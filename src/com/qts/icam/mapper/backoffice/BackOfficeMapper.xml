<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.qts.icam.mapper.backoffice.BackofficeMapper">
	
	<update id="updateAcademicYearDetails" parameterType="com.qts.icam.model.common.AcademicYear">
		UPDATE academic_year set
			updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			session_start_date=(SELECT extract(epoch from (SELECT to_timestamp(#{sessionStartDate},'DD/MM/YYYY')))),
			session_end_date=(SELECT extract(epoch from (SELECT to_timestamp(#{sessionEndDate},'DD/MM/YYYY'))))
		WHERE
			academic_year_code=#{academicYearCode}
		AND
			year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C');
	</update>
	<insert id="insertNextAcademicYear" parameterType="com.qts.icam.model.common.AcademicYear">
		INSERT INTO academic_year(
	            rec_id, obj_id, updated_by, updated_on, date_of_creation, 
	            academic_year_code, academic_year_name, academic_year_desc, year_status)
	    VALUES ((select uuid_generate_v4()), #{academicYearObjectId},
	    	(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{academicYearCode}, #{academicYearName}, #{academicYearDesc},
			(SELECT rec_id FROM status_flag WHERE status_sym ='NE'));
	</insert>
	
	<!-- <insert id="insertSocialCategory" parameterType="com.qts.icam.model.common.SocialCategory">
		INSERT INTO social_category(
			rec_id, obj_id, updated_by, updated_on, date_of_creation,
			social_category_code, social_category_name, social_category_desc)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{socialCategoryCode}, #{socialCategoryName}, #{desc});
	</insert> -->
	<!-- <update id="updateSocialCategory" parameterType="java.util.List">
	 	<foreach item="socialCategory" collection="list" index="index" open="" close="" separator=";">
			UPDATE social_category SET
				updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike #{socialCategory.updatedBy} AND is_active = true),
				updated_on=extract(epoch FROM now()),
				social_category_code=#{socialCategory.socialCategoryName},
				social_category_name=#{socialCategory.socialCategoryName},
				social_category_desc=#{socialCategory.desc}
			WHERE
				social_category_code=#{socialCategory.socialCategoryCode}
				AND
				is_active=true
		</foreach>
	</update> -->
	
	
	
	
	
	
	<insert id="insertFees" parameterType="com.qts.icam.model.backoffice.Fees">
		INSERT INTO fees(
			rec_id, obj_id, updated_by, updated_on, date_of_creation,
			fees_code, fees_name, fees_desc)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{feesCode}, #{feesName}, #{desc});
	</insert>
	<update id="updateFees" parameterType="java.util.List">
	 	<foreach item="fee" collection="list" index="index" open="" close="" separator=";">
			UPDATE fees SET
				updated_by=(SELECT rec_id FROM resource WHERE user_id =#{fee.updatedBy} AND is_active = true),
				updated_on=extract(epoch FROM now()),
				fees_code=#{fee.feesName},
				fees_name=#{fee.feesName},
				fees_desc=#{fee.desc}
			WHERE
				fees_code=#{fee.feesCode}
				AND
				is_active=true
		</foreach>
	</update>
	
	
	
	
	
	
	
	
	
	
	<update id="updateFeesTemplate" parameterType="com.qts.icam.model.backoffice.FeesTemplate">
		<if test="applied == true">
			UPDATE fees_template SET
				updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on=(SELECT extract(epoch FROM now())),
				applied=false
			WHERE
				standard=(SELECT rec_id FROM standard WHERE standard_code =#{standard} AND is_active = true)
				AND
				is_active = true;
		</if>
		UPDATE fees_template SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())), 
			fees_template_code=#{templateCode},
			fees_template_name=#{templateName},
			fees_template_desc= #{desc}, 
			standard=(SELECT rec_id FROM standard WHERE standard_code =#{standard} AND is_active = true),
			applied=#{applied}
		WHERE
			fees_template_id=#{serialId};
		<foreach item="fees" collection="feesList"  open="" close="" separator=";">
			<foreach item="socialCategory" collection="fees.socialCategoryList"  open="" close="" separator=";">
				UPDATE fees_template_details SET
					updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
					updated_on=(SELECT extract(epoch FROM now())),
					amount=#{socialCategory.amount}
				WHERE
					fees=(SELECT rec_id FROM fees WHERE fees_code =#{fees.feesCode} AND is_active = true)
					AND
					social_category=(SELECT rec_id FROM social_category WHERE social_category_code =#{socialCategory.socialCategoryCode} AND is_active = true)
					AND
					fees_template=(SELECT rec_id FROM fees_template WHERE fees_template_id =#{serialId} AND is_active = true)
			</foreach>
		</foreach>
	</update>
	
	
	
	
	
	<select id="selectMedicallyFitCandidate" resultType="com.qts.icam.model.common.Candidate">
		SELECT
		  standard as "standard.standardName",
		  candidate_first_name || ' ' || COALESCE(candidate_middle_name,'') || ' ' || candidate_last_name as "resource.name",
		  gender as "resource.gender",
		  (to_char((SELECT to_timestamp(date_of_birth)), 'DD/MM/YYYY')) as "resource.dateOfBirth",
		  father_first_name || ' ' || COALESCE(father_middle_name,'') || '' || father_last_name as "resource.fatherFirstName",
		  form_id as admissionFormId
		FROM
			admission_form
		WHERE
			medical_status='SELECTED'
		AND
			fees_status is null
		AND
			document_status is null
		AND
			is_active = true
			<if test="FormId != null">
				AND form_id::text ilike ('%'||#{FormId}||'%')
			</if>
			<if test="Standard != null">
				AND standard ilike ('%'||#{Standard}||'%')
			</if>
			<if test="FirstName != null">
				AND candidate_first_name ilike ('%'||#{FirstName}||'%')
			</if>
			<if test="MiddleName != null">
				AND candidate_middle_name ilike ('%'||#{MiddleName}||'%')
			</if>
			<if test="LastName != null">
				AND candidate_last_name ilike ('%'||#{LastName}||'%')
			</if>
			<if test="DOB != null">
				AND to_char((SELECT to_timestamp(date_of_birth)), 'DD/MM/YYYY') ilike ('%'||#{DOB}||'%')
			</if>
			
	</select>
	<update id="approveDocument" parameterType="com.qts.icam.model.common.Candidate">
		UPDATE admission_form SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			roll_number=#{rollNumber},
			document_status=(SELECT status_desc FROM status_flag WHERE status_sym='ACCP'),
			fees_status=(SELECT status_desc FROM status_flag WHERE status_sym='PEN')
		WHERE
			form_id=#{admissionFormId}
			AND
			fees_status is null
			AND
			is_active = true;
	</update>
	<update id="rejectDocument" parameterType="com.qts.icam.model.common.Candidate">
		UPDATE admission_form SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			reason_of_rejection=#{reasonOfRejection},
			document_status=(SELECT status_desc FROM status_flag WHERE status_sym='RT')
		WHERE
			form_id=#{admissionFormId}
			AND
			fees_status is null
			AND
			is_active = true;
	</update>
	<select id="checkAvailableRollNumber1" resultType="java.lang.Long">
			SELECT
			  roll_number as rollNumberFromDB1
			FROM
				used_roll_number_and_user_id
			WHERE
				roll_number=#{rollNumber};
	</select>
	<select id="checkAvailableRollNumber2" resultType="java.lang.Long">
			SELECT
			  roll_number as rollNumberFromDB2
			FROM
				admission_form
			WHERE
				roll_number=#{rollNumber};
	</select>
	
	<!-- naimisha 24062017 -->
	
	<insert id="insertStudent" parameterType="com.qts.icam.model.common.Student">
		INSERT INTO resource(
			rec_id, obj_id, updated_by, updated_on, date_of_creation, is_active, 
			resource_type, gender, date_of_admission, user_id, mobile_no 
			first_name, middle_name, last_name, date_of_birth, father_first_name, 
			father_middle_name, father_last_name, father_annual_income, 
			mother_first_name, mother_middle_name, mother_last_name,
			mother_annual_income, guardian_first_name, guardian_middle_name, 
			guardian_last_name, email_address, blood_group, mother_tongue, 
			religion, nationality, social_category,hostel, state_of_domicile, 
			bank_name, branch, bank_account_number, scholarship, father_in_defence, 
			father_service_status, father_defence_category, father_rank,
			father_mobile, father_email, mother_mobile, mother_email, student_income,
			family_income, guardian_mobile, guardian_email, previous_scholl_phone,
			previous_school_website, previous_school_email, previous_school_address,
			previous_school, medical_status, second_language, aadhar_card_no,registration_id,print_admission_form_id)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())), true,
			(SELECT rec_id FROM resource_type WHERE resource_type_code ='STUDENT' AND is_active = true),
			#{resource.gender}, (SELECT extract(epoch from (SELECT to_timestamp(#{dateOfAdmission},'DD/MM/YYYY')))),
			#{resourceUserId}, #{mobileNo}, #{resource.firstName}, #{resource.middleName}, #{resource.lastName}, 
			(SELECT extract(epoch from (SELECT to_timestamp(#{resource.dateOfBirth},'DD/MM/YYYY')))),
			#{resource.fatherFirstName}, #{resource.fatherMiddleName}, #{resource.fatherLastName}, #{fatherIncome}, 
			#{resource.motherFirstName}, #{resource.motherMiddleName}, #{resource.motherLastName}, #{motherIncome}, 
			#{guardianFirstName}, #{guardianMiddleName}, #{guardianLastName},
			#{resource.emailId}, #{resource.bloodGroup}, #{resource.motherTongue}, #{resource.religion}, #{resource.nationality},
			(SELECT rec_id FROM social_category WHERE social_category_code =#{resource.category} AND is_active = true), 
			<!-- (SELECT rec_id FROM section WHERE standard=(SELECT rec_id FROM standard WHERE standard_code=#{standard}) AND section_code='NA' AND is_active = true), -->
			(SELECT rec_id FROM hostel WHERE hostel_code =#{house} AND is_active = true), #{stateOfDomicile}, #{resource.bankName}, #{resource.bankBranch},
			#{resource.accountNumber}, (SELECT rec_id FROM scholarship WHERE scholarship_code =#{scholarship} AND is_active = true), #{resource.fatherInDefence},
			#{resource.fatherServiceStatus}, #{resource.fatherDefenceCategory}, #{resource.fatherRank}, #{resource.fatherMobile}, #{resource.fatherEmail},
			#{resource.motherMobile}, #{resource.motherEmail}, #{studentIncome}, #{familyIncome}, #{guardianMobile}, #{guardianEmail}, #{previousSchoolPhone},
			#{previousSchoolWebsite}, #{previousSchoolEmail}, #{previousSchoolAddress}, #{previousSchoolName}, 
			#{resource.medicalStatus}, (SELECT rec_id FROM subject WHERE subject_code =#{secondLanguage} AND is_active = true), #{resource.aadharCardNo}, #{registrationId},
			(SELECT paf.rec_id FROM print_admission_form paf JOIN course c ON (paf.course = c.rec_id AND c.is_active = true) WHERE c.course_code = #{courseId} AND paf.application_id = #{strFormId}::integer));
		<foreach item="attachment" collection="resource.attachmentList" open="" close="" separator=";">
			INSERT INTO attachment(
				rec_id, obj_id, updated_by, updated_on, 
	            date_of_creation,attachment_code, 
	            attachment_type, attachment_location, attachment_size, 
	            attached_file_name, resource)
	    	VALUES (
    			uuid_generate_v4(),
	   			#{objectId}, 
	  			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
	  			extract(epoch FROM now()),
          		extract(epoch FROM now()), 
          		(SELECT 'ATTCH-' ||COALESCE((SELECT MAX(attachment_id) FROM attachment), 0 )+1),
          		(SELECT rec_id FROM attachment_type WHERE attachment_type_name = #{attachment.attachmentType} AND is_active = true), 
          		#{attachment.storageRootPath}, 
          		#{attachment.attachmentSize},
          		#{attachment.attachmentName},
          		(SELECT rec_id FROM resource WHERE user_id = #{resourceUserId} AND is_active = true)
	  		 );
		</foreach>
	</insert>
	
	<!-- naimisha.04072017 -->
	
	<select id="getAdmissionModeForACourse" parameterType="java.lang.String" resultType="java.lang.String">
 		SELECT
			admission_mode
		FROM 
			course c
		WHERE 
			course_code = #{courseCode} 
		AND
			is_active = true;
	</select>
	
	<insert id="insertStudentOffline" parameterType="com.qts.icam.model.common.Student">
		INSERT INTO 
			resource
				(
					rec_id, 
					obj_id, 
					updated_by, 
					updated_on, 
					date_of_creation, 
					resource_type, 
					gender, 
					date_of_admission, 
					user_id, 
					mobile_no,
					first_name, 
					middle_name, 
					last_name, 
					date_of_birth, 
					father_first_name, 
					father_middle_name, 
					father_last_name, 
					father_occupation,
					father_annual_income, 
					mother_first_name, 
					mother_middle_name, 
					mother_last_name,
					mother_occupation,
					mother_annual_income, 
					guardian_first_name, 
					guardian_middle_name, 
					guardian_last_name, 
					email_address, 
					blood_group, 
					mother_tongue, 
					religion, 
					nationality, 
					social_category,
					house,
					state_of_domicile, 
					bank_name, 
					branch, 
					bank_account_number, 
					scholarship, 
					father_in_defence, 
					father_service_status, 
					father_defence_category, 
					father_rank,
					father_mobile, 
					father_email, 
					mother_mobile, 
					mother_email, 
					student_income,
					family_income, 
					guardian_mobile, 
					guardian_email, 
					previous_scholl_phone,
					previous_school_website, 
					previous_school_email, 
					previous_school_address,
					previous_school, 
					medical_status, 
					aadhar_card_no,
					print_admission_form_id,
					child_id,
					food_preference,
					pickup_place,
					hobbies,
					personal_identification,
					previous_achivement,
					resident_type
				)
		VALUES (
					(select uuid_generate_v4()), 
					#{objectId},
					(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
					(SELECT extract(epoch FROM now())),
					(SELECT extract(epoch FROM now())), 
					(SELECT rec_id FROM resource_type WHERE resource_type_code ='STUDENT' AND is_active = true),
					#{resource.gender}, 
					(SELECT extract(epoch from (SELECT to_timestamp(#{dateOfAdmission},'DD/MM/YYYY')))),
					#{resourceUserId}, 
					#{mobileNo},
					#{resource.firstName}, 
					#{resource.middleName}, 
					#{resource.lastName}, 
					(SELECT extract(epoch from (SELECT to_timestamp(#{resource.dateOfBirth},'DD/MM/YYYY')))),
					#{resource.fatherFirstName}, 
					#{resource.fatherMiddleName}, 
					#{resource.fatherLastName}, 
					#{resource.fatherOccupation},
					#{fatherIncome}, 
					#{resource.motherFirstName}, 
					#{resource.motherMiddleName}, 
					#{resource.motherLastName}, 
					#{resource.motherOccupation},
					#{motherIncome}, 
					#{guardianFirstName}, 
					#{guardianMiddleName}, 
					#{guardianLastName},
					#{resource.emailId}, 
					#{resource.bloodGroup}, 
					#{resource.motherTongue}, 
					#{resource.religion}, 
					#{resource.nationality},
					(SELECT rec_id FROM social_category WHERE social_category_code =#{resource.category} AND is_active = true), 
					(SELECT rec_id FROM house WHERE house_code =#{house} AND is_active = true), 
					#{stateOfDomicile}, 
					#{resource.bankName}, 
					#{resource.bankBranch},
					#{resource.accountNumber}, 
					(SELECT rec_id FROM scholarship WHERE scholarship_code =#{scholarship} AND is_active = true), 
					#{resource.fatherInDefence},
					#{resource.fatherServiceStatus}, 
					#{resource.fatherDefenceCategory}, 
					#{resource.fatherRank}, 
					#{resource.fatherMobile}, 
					#{resource.fatherEmail},
					#{resource.motherMobile}, 
					#{resource.motherEmail}, 
					#{studentIncome}, 
					#{familyIncome}, 
					#{guardianMobile}, 
					#{guardianEmail}, 
					#{previousSchoolPhone},
					#{previousSchoolWebsite}, 
					#{previousSchoolEmail}, 
					#{previousSchoolAddress}, 
					#{previousSchoolName}, 
					#{resource.medicalStatus}, 
					#{resource.aadharCardNo}, 
					(SELECT paf.rec_id FROM print_admission_form paf 
					JOIN course c ON (paf.course = c.rec_id AND c.is_active = true) 
					WHERE c.course_code = #{courseId} 
					AND paf.print_admission_form_code = #{strFormId}
					AND paf.print_admission_form_name = #{driveId}
					AND paf.is_active = true),
					#{resource.childId},
					#{resource.foodPreference},
					#{resource.firstPickUpPlace},
					#{resource.hobbies},
					#{resource.personalIdentificationMark},
					#{previousAchivement},
					(SELECT rec_id FROM resident_type WHERE resident_type_code = #{residentType} AND is_active = true)
					);
		<foreach item="attachment" collection="resource.attachmentList" open="" close="" separator=";">
			INSERT INTO attachment(
				rec_id, obj_id, updated_by, updated_on, 
	            date_of_creation,attachment_code, 
	            attachment_type, attachment_location, attachment_size, 
	            attached_file_name, resource)
	    	VALUES (
    			uuid_generate_v4(),
	   			#{objectId}, 
	  			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
	  			extract(epoch FROM now()),
          		extract(epoch FROM now()), 
          		(SELECT 'ATTCH-' ||COALESCE((SELECT MAX(attachment_id) FROM attachment), 0 )+1),
          		(SELECT rec_id FROM attachment_type WHERE attachment_type_name = #{attachment.attachmentType} AND is_active = true), 
          		#{attachment.storageRootPath}, 
          		#{attachment.attachmentSize},
          		#{attachment.attachmentName},
          		(SELECT rec_id FROM resource WHERE user_id = #{resourceUserId} AND is_active = true)
	  		 );
		</foreach>
	</insert>
	
	<update id="updatePrintAdmissionFormOffline" parameterType="com.qts.icam.model.common.Student">
		UPDATE 
			print_admission_form
		SET 
			resource_enrolled = true,
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now())),
			status = (SELECT rec_id FROM status_flag WHERE status_sym = 'O') 
		WHERE
			course = (SELECT rec_id FROM course WHERE course_code = #{courseId} AND is_active = true)
		AND
			print_admission_form_code = #{strFormId}
		AND
			is_active = true;
	</update>

	<insert id="insertStudentPresentAddress" parameterType="com.qts.icam.model.common.Address" statementType="CALLABLE">
		select insert_resource_address(
			#{objectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{addressCode, mode=IN, jdbcType=VARCHAR},
			#{presentAddressLine, mode=IN, jdbcType=VARCHAR},
			#{addressDesc, mode=IN, jdbcType=VARCHAR},			
			#{presentAddressCityVillage, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPinCode, mode=IN, jdbcType=VARCHAR},
			#{presentAddressState, mode=IN, jdbcType=VARCHAR},
			#{presentAddressCountry, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPoliceStation, mode=IN, jdbcType=VARCHAR},			
			#{presentAddressDistrict, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPostOffice, mode=IN, jdbcType=VARCHAR},
			#{presentAddressLandmark, mode=IN, jdbcType=VARCHAR},
			#{presentAddressRailwayStation, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPhone, mode=IN, jdbcType=VARCHAR},
			#{addressType, mode=IN, jdbcType=VARCHAR},			
			#{userId, mode=IN, jdbcType=VARCHAR});	
	</insert>
	<insert id="insertStudentPermanentAddress" parameterType="com.qts.icam.model.common.Address" statementType="CALLABLE">
		select insert_resource_address(
			#{objectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{addressCode, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressLine, mode=IN, jdbcType=VARCHAR},
			#{addressDesc, mode=IN, jdbcType=VARCHAR},			
			#{permanentAddressCityVillage, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPinCode, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressState, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressCountry, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPoliceStation, mode=IN, jdbcType=VARCHAR},			
			#{permanentAddressDistrict, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPostOffice, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressLandmark, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressRailwayStation, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPhone, mode=IN, jdbcType=VARCHAR},
			#{addressType, mode=IN, jdbcType=VARCHAR},			
			#{userId, mode=IN, jdbcType=VARCHAR});	
	</insert>
	<insert id="insertStudentLocalGuardianAddress" parameterType="com.qts.icam.model.common.Address" statementType="CALLABLE">
		select insert_resource_address(
			#{objectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{addressCode, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressLine, mode=IN, jdbcType=VARCHAR},
			#{addressDesc, mode=IN, jdbcType=VARCHAR},			
			#{guardianAddressCityVillage, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPinCode, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressState, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressCountry, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPoliceStation, mode=IN, jdbcType=VARCHAR},			
			#{guardianAddressDistrict, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPostOffice, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressLandmark, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressRailwayStation, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPhone, mode=IN, jdbcType=VARCHAR},
			#{addressType, mode=IN, jdbcType=VARCHAR},			
			#{userId, mode=IN, jdbcType=VARCHAR});	
	</insert>
	
	<select id="selectTermListForExam" resultType="com.qts.icam.model.backoffice.Exam">
		SELECT
			distinct term as term
		FROM exam
		WHERE is_active=true
		order by term;
	</select>
	
	<select id="selectExamList" resultType="com.qts.icam.model.backoffice.Exam">
		SELECT
			ex.exam_name as examName,
			ex.exam_code as examCode,
			(SELECT to_char((SELECT to_timestamp(ywe.exam_start_date)), 'DD/MM/YYYY'))	as examStartDate,
			(SELECT to_char((SELECT to_timestamp(ywe.exam_end_date)), 'DD/MM/YYYY'))	as examEndDate,
			ex.term as term
		FROM exam ex
		LEFT JOIN year_wise_exam ywe ON (ywe.exam = ex.rec_id AND ywe.is_active = true)
		LEFT JOIN academic_year ay ON (ywe.academic_year = ay.rec_id AND ay.is_active=true AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
		WHERE ex.is_active=true
		ORDER by ex.serial_id;
	</select>
	
	<select id="countYearWiseExam" resultType="Integer" parameterType="com.qts.icam.model.backoffice.Exam">
		SELECT
			count(ywe.serial_id) as countRecId
		FROM exam ex
		JOIN year_wise_exam ywe ON (ywe.exam = ex.rec_id AND ywe.is_active = true)
		JOIN academic_year ay ON (ywe.academic_year = ay.rec_id AND ay.is_active=true AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
		WHERE ex.is_active=true
		AND ex.exam_code=#{examCode};
	</select>
	
	<insert id="insertExamSetUp" parameterType="com.qts.icam.model.backoffice.Exam">
		INSERT INTO year_wise_exam(
            rec_id, obj_id, updated_by, updated_on, date_of_creation,
            exam, academic_year, exam_start_date, exam_end_date)
    	VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			(SELECT rec_id FROM exam WHERE exam_code = #{examCode} AND is_active = true),
            (SELECT rec_id FROM academic_year WHERE is_active=true AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C')),
            (SELECT extract(epoch from (SELECT to_timestamp(#{examStartDate},'DD/MM/YYYY')))),
            (SELECT extract(epoch from (SELECT to_timestamp(#{examEndDate},'DD/MM/YYYY')))));
	</insert>
	
	<update id="updateExamSetUp" parameterType="com.qts.icam.model.backoffice.Exam">
		UPDATE year_wise_exam SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			exam_start_date = (SELECT extract(epoch from (SELECT to_timestamp(#{examStartDate},'DD/MM/YYYY')))),
			exam_end_date = (SELECT extract(epoch from (SELECT to_timestamp(#{examEndDate},'DD/MM/YYYY'))))
		WHERE
			is_active = true
		AND
			academic_year =(SELECT rec_id FROM academic_year WHERE is_active=true AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
		AND
			exam = (SELECT rec_id FROM exam WHERE exam_code = #{examCode} AND is_active = true);
	</update>
	
	
	
	 <select id="selectCandidateDetailsAgainstUserId" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Student">
		SELECT
			roll_number as rollNumber,
			standard as standard,
			candidate_first_name as "resource.firstName",
			candidate_middle_name as "resource.middleName",
			candidate_last_name as "resource.lastName",
			gender as "resource.gender",
			to_char((SELECT to_timestamp(date_of_birth)),'DD/MM/YYYY')as "resource.dateOfBirth",
			blood_group as "resource.bloodGroup",
			category as "resource.category",
			religion as "resource.religion",
			nationality as "resource.nationality",
			father_first_name as "resource.fatherFirstName",
			father_middle_name as "resource.fatherMiddleName",
			father_last_name as "resource.fatherLastName",
			mother_first_name as "resource.motherFirstName",
			mother_middle_name as "resource.motherMiddleName",
			mother_last_name as "resource.motherLastName",
			guardian_first_name as guardianFirstName,
			guardian_middle_name as guardianMiddleName,
			guardian_last_name as guardianLastName,
			email_id as emailId,
			father_total_income as fatherIncome,
			mother_total_income as motherIncome,
			COALESCE(present_address_1 ,'') || ' ' || COALESCE(present_address_2 ,'') as "address.presentAddressLine",
			present_address_landmark as "address.presentAddressLandmark",
			present_address_city_village as "address.presentAddressCityVillage",
			present_address_post_office as "address.presentAddressPostOffice",
			present_address_police_station as "address.presentAddressPoliceStation",
			present_address_pin_code as "address.presentAddressPinCode",
			present_address_district as "address.presentAddressDistrict",
			present_address_country as "address.presentAddressCountry",
			present_address_state as "address.presentAddressState",
			COALESCE(permanent_address_1 ,'') || ' ' || COALESCE(permanent_address_2 ,'') as "address.permanentAddressLine",
			permanent_address_landmark as "address.permanentAddressLandmark",
			permanent_address_city_village as "address.permanentAddressCityVillage",
			permanent_address_post_office as "address.permanentAddressPostOffice",
			permanent_address_police_station as "address.permanentAddressPoliceStation",
			permanent_address_pincode as "address.permanentAddressPinCode",
			permanent_address_district as "address.permanentAddressDistrict",
			permanent_address_country as "address.permanentAddressCountry",
			permanent_address_state as "address.permanentAddressState",
			previous_school_name as previousSchoolName,
			previous_school_contact as previousSchoolPhone,
			previous_school_website as previousSchoolWebsite
		FROM
			admission_form
		WHERE
			form_id=#{formId}
		AND
			is_active=true;
	</select> 
	
	
	
	<resultMap id="selectStudentDetailsResultMap" type="com.qts.icam.model.common.Student">
		<id property="userId" column="user_id" jdbcType="VARCHAR" />
		<result property="dateOfAdmission" column="dateOfAdmission" jdbcType="VARCHAR" />	
		<result property="fatherIncome" column="father_annual_income" jdbcType="INTEGER" />
		<result property="motherIncome" column="mother_annual_income" jdbcType="INTEGER" />
		<result property="guardianFirstName" column="guardian_first_name" jdbcType="VARCHAR" />
		<result property="guardianMiddleName" column="guardian_middle_name" jdbcType="VARCHAR" />
		<result property="guardianLastName" column="guardian_last_name" jdbcType="VARCHAR" />
		<result property="standard" column="standard_code" jdbcType="VARCHAR" />		
		<result property="section" column="section_code" jdbcType="VARCHAR" />
		<result property="houseData.houseCode" column="house_code" jdbcType="VARCHAR" />
		<result property="houseData.houseName" column="house_name" jdbcType="VARCHAR" />
		<result property="residentTypeData.residentTypeCode" column="resident_type_code" jdbcType="VARCHAR" />
		<result property="residentTypeData.residentTypeName" column="resident_type_name" jdbcType="VARCHAR" />
		<result property="stateOfDomicile" column="state_of_domicile" jdbcType="VARCHAR" />
		<result property="scholarship" column="scholarship_code" jdbcType="VARCHAR" />
		<result property="studentIncome" column="student_income" jdbcType="INTEGER" />
		<result property="familyIncome" column="family_income" jdbcType="INTEGER" />
		<result property="guardianMobile" column="guardian_mobile" jdbcType="VARCHAR" />
		<result property="guardianEmail" column="guardian_email" jdbcType="VARCHAR" />		
		<result property="previousSchoolPhone" column="previous_scholl_phone" jdbcType="VARCHAR" />
		<result property="previousSchoolWebsite" column="previous_school_website" jdbcType="VARCHAR" />
		<result property="previousSchoolEmail" column="previous_school_email" jdbcType="VARCHAR" />
		<result property="previousSchoolAddress" column="previous_school_address" jdbcType="VARCHAR" />
		<result property="previousSchoolName" column="previous_school" jdbcType="VARCHAR" />
		<result property="secondLanguage" column="subject_code" jdbcType="VARCHAR" />
		<result property="courseId" column="course_code" jdbcType="VARCHAR" />
		<result property="courseName" column="course_name" jdbcType="VARCHAR" />
		<result property="roll" column="roll_number" jdbcType="VARCHAR" />
		<association property="resource" javaType="com.qts.icam.model.common.Resource">
			<result property = "registrationId" column = "registration_id" jdbcType = "VARCHAR"/>
			<result property="firstName" column="first_name" jdbcType="VARCHAR" />
			<result property="middleName" column="middle_name" jdbcType="VARCHAR" />
			<result property="lastName" column="last_name" jdbcType="VARCHAR" />
			<result property="dateOfBirth" column="dateOfBirth" jdbcType="VARCHAR" />
			<result property="gender" column="gender" jdbcType="VARCHAR" />
			<result property="fatherFirstName" column="father_first_name" jdbcType="VARCHAR" />
			<result property="fatherMiddleName" column="father_middle_name" jdbcType="VARCHAR" />
			<result property="fatherLastName" column="father_last_name" jdbcType="VARCHAR" />
			<result property="motherFirstName" column="mother_first_name" jdbcType="VARCHAR" />
			<result property="motherMiddleName" column="mother_middle_name" jdbcType="VARCHAR" />
			<result property="motherLastName" column="mother_last_name" jdbcType="VARCHAR" />
			<result property="emailId" column="email_address" jdbcType="VARCHAR" />
			<result property="bloodGroup" column="blood_group" jdbcType="VARCHAR" />
			<result property="motherTongue" column="mother_tongue" jdbcType="VARCHAR" />
			<result property="religion" column="religion" jdbcType="VARCHAR" />
			<result property="nationality" column="nationality" jdbcType="VARCHAR" />
			<result property="category" column="social_category_code" jdbcType="VARCHAR" />
			<result property="bankName" column="bank_name" jdbcType="VARCHAR" />
			<result property="bankBranch" column="branch" jdbcType="VARCHAR" />
			<result property="accountNumber" column="bank_account_number" jdbcType="VARCHAR" />
			<result property="fatherInDefence" column="father_in_defence" jdbcType="BOOLEAN" />
			<result property="fatherServiceStatus" column="father_service_status" jdbcType="VARCHAR" />
			<result property="fatherDefenceCategory" column="father_defence_category" jdbcType="VARCHAR" />
			<result property="fatherRank" column="father_rank" jdbcType="VARCHAR" />
			<result property="fatherMobile" column="father_mobile" jdbcType="VARCHAR" />
			<result property="fatherEmail" column="father_email" jdbcType="VARCHAR" />
			<result property="motherMobile" column="mother_mobile" jdbcType="VARCHAR" />
			<result property="motherEmail" column="mother_email" jdbcType="VARCHAR" />
			<result property="medicalStatus" column="medical_status" jdbcType="VARCHAR" />
			<result property="aadharCardNo" column="aadhar_card_no" jdbcType="VARCHAR" />
			<result property="mobile" column="mobile_no" jdbcType="VARCHAR" />
			<collection property="attachmentList" ofType="com.qts.icam.model.common.Attachment">
				<id property="storageObjectId" column="attachment_id" jdbcType="VARCHAR" />
				<result property="storageRootPath" column="attachment_location" jdbcType="VARCHAR" />
				<result property="attachmentName" column="attached_file_name" jdbcType="VARCHAR" />
				<result property="attachmentType" column="attachment_type_name" jdbcType="VARCHAR" />
			</collection>
		</association>	
	</resultMap>
	<select id="selectStudentDetails" parameterType="java.lang.String" resultMap="selectStudentDetailsResultMap">
		SELECT 
			scm.roll_number,
			registration_id,
			(to_char((SELECT to_timestamp(date_of_admission)), 'DD/MM/YYYY')) as dateOfAdmission,						
			father_annual_income,						
			mother_annual_income,			
			guardian_first_name,
			guardian_middle_name,
			guardian_last_name,			
			std.standard_code,
			section_code,
			h.house_code,
			h.house_name,
			rest.resident_type_code,
			rest.resident_type_name,
			state_of_domicile,
			sch.scholarship_code,
			student_income,
			family_income,
			guardian_mobile,
			guardian_email,
			previous_scholl_phone,
			previous_school_website,
			previous_school_email,
			previous_school_address,
			previous_school,
			first_name,
			middle_name,
			last_name,
			(to_char((SELECT to_timestamp(date_of_birth)), 'DD/MM/YYYY')) as dateOfBirth,
			r.gender,
			father_first_name,
			father_middle_name,
			father_last_name,
			mother_first_name,
			mother_middle_name,
			mother_last_name,
			email_address,
			blood_group,
			mother_tongue,
			religion,
			nationality,
			sc.social_category_code,
			bank_name,
			branch,
			bank_account_number,
			father_in_defence,
			father_service_status,
			father_defence_category,
			father_rank,
			father_mobile,
			father_email,
			mother_mobile,
			mother_email,
			medical_status,
			att.attachment_id,
			att.attachment_location,
			att.attached_file_name,
			attp.attachment_type_name,
			sub.subject_code,
			aadhar_card_no,
			c.course_code,
			c.course_name,
			r.user_id,
			r.mobile_no
		FROM resource r 
		JOIN resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN student_course_mapping scm ON (scm.user_id = r.user_id AND scm.is_active = true)
		JOIN course c ON (scm.course = c.rec_id AND c.is_active = true)
		JOIN section sec ON (scm.section = sec.rec_id AND sec.is_active = true)
		JOIN standard std ON (sec.standard = std.rec_id AND std.is_active = true)
		LEFT JOIN house h ON (r.house = h.rec_id AND h.is_active = true)
		LEFT JOIN social_category sc ON (r.social_category = sc.rec_id AND sc.is_active = true)
		LEFT JOIN attachment att ON (r.rec_id = att.resource AND att.is_active = true)
		LEFT JOIN attachment_type attp ON (att.attachment_type = attp.rec_id AND attp.is_active = true)
		LEFT JOIN scholarship sch ON (r.scholarship = sch.rec_id AND sch.is_active = true)
		LEFT JOIN subject sub ON (r.second_language = sub.rec_id AND sub.is_active = true)
		LEFT JOIN resident_type rest ON (r.resident_type = rest.rec_id AND rest.is_active = true)
		WHERE
			rt.resource_type_code = 'STUDENT'
		AND
			r.user_id = #{rollNumber}
		AND
			r.is_active = true;
	</select>
	
	<select id="selectStudentAddress" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Address">
		SELECT  DISTINCT
			a1.address_line as presentAddressLine, 
			a1.land_mark as presentAddressLandmark, 
			ct1.city_name as presentAddressCityVillage, 
			dis1.district_name as presentAddressDistrict, 
			a1.postal_code as presentAddressPinCode, 
			st1.state_code as presentAddressState, 
			cty1.country_code presentAddressCountry, 
			a1.police_station as presentAddressPoliceStation, 
			a1.post_office as presentAddressPostOffice,
			a1.railway_station as presentAddressRailwayStation, 
			a1.phone as presentAddressPhone,
		
			a2.address_line as permanentAddressLine, 
			a2.land_mark as permanentAddressLandmark, 
			ct2.city_name as permanentAddressCityVillage, 
			dis2.district_name as permanentAddressDistrict, 
			a2.postal_code as permanentAddressPinCode, 
			st2.state_code as permanentAddressState, 
			cty2.country_code as permanentAddressCountry, 
			a2.police_station as permanentAddressPoliceStation, 
			a2.post_office as permanentAddressPostOffice,
			a2.railway_station as permanentAddressRailwayStation,
			a2.phone as permanentAddressPhone,
		
			a3.address_line as guardianAddressLine, 
			a3.land_mark as guardianAddressLandmark, 
			ct3.city_name as guardianAddressCityVillage, 
			dis3.district_name as guardianAddressDistrict, 
			a3.postal_code as guardianAddressPinCode, 
			st3.state_code as guardianAddressState,
			cty3.country_code as guardianAddressCountry, 
			a3.police_station as guardianAddressPoliceStation, 
			a3.post_office as guardianAddressPostOffice,
			a3.railway_station as guardianAddressRailwayStation,
			a3.phone as guardianAddressPhone
		FROM address a1
			JOIN resource r1 ON (a1.resource = r1.rec_id AND a1.is_active = true AND r1.is_active = true)
		
			JOIN state st1 ON (a1.state = st1.rec_id AND st1.is_active = true)
			LEFT JOIN district dis1 ON (a1.district = dis1.rec_id AND dis1.is_active = true)
			LEFT JOIN city ct1 ON (a1.city = ct1.rec_id AND ct1.is_active = true)
			JOIN country cty1 ON (a1.country = cty1.rec_id AND cty1.is_active = true)
		
			JOIN address a2 ON (a2.resource = r1.rec_id)
			JOIN state st2 ON (a2.state = st2.rec_id AND st2.is_active = true)
			LEFT JOIN district dis2 ON (a2.district = dis2.rec_id AND dis2.is_active = true)
			LEFT JOIN city ct2 ON (a2.city = ct2.rec_id AND ct2.is_active = true)
			JOIN country cty2 ON (a2.country = cty2.rec_id AND cty2.is_active = true)
		
			LEFT JOIN address a3 ON (a3.resource = r1.rec_id)
			LEFT JOIN state st3 ON (a3.state = st3.rec_id AND st3.is_active = true)
			LEFT JOIN district dis3 ON (a3.district = dis3.rec_id AND dis3.is_active = true)
			LEFT JOIN city ct3 ON (a3.city = ct3.rec_id AND ct3.is_active = true)
			LEFT JOIN country cty3 ON (a3.country = cty3.rec_id AND cty3.is_active = true)
		WHERE
			r1.user_id = #{userId}
			AND
			a1.address_type = 'PRESENT'
			AND
			a2.address_type = 'PERMANENT'
			AND
			a3.address_type = 'LOCAL GUARDIAN';
	</select>
	
	<update id="updateStudent" parameterType="com.qts.icam.model.common.Student">
		UPDATE resource SET 
			updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true), 
			updated_on = (SELECT extract(epoch FROM now())),  
			gender = #{resource.gender}, 
			date_of_admission = (SELECT extract(epoch from (SELECT to_timestamp(#{dateOfAdmission},'DD/MM/YYYY')))), 
			first_name = #{resource.firstName}, 
			aadhar_card_no=#{resource.aadharCardNo},
			
			middle_name = #{resource.middleName}, 
			last_name = #{resource.lastName}, 
			date_of_birth = (SELECT extract(epoch from (SELECT to_timestamp(#{resource.dateOfBirth},'DD/MM/YYYY')))), 
			father_first_name = #{resource.fatherFirstName}, 
			father_middle_name = #{resource.fatherMiddleName}, 
		
			father_last_name = #{resource.fatherLastName}, 
			father_annual_income = #{fatherIncome}, 
			mother_first_name = #{resource.motherFirstName}, 
			mother_middle_name = #{resource.motherMiddleName}, 
			mother_last_name = #{resource.motherLastName}, 
		
			mother_annual_income = #{motherIncome}, 
			guardian_first_name = #{guardianFirstName}, 
			guardian_middle_name = #{guardianMiddleName}, 
			guardian_last_name = #{guardianLastName},  
			email_address = #{resource.emailId}, 
		
			blood_group = #{resource.bloodGroup},  
			mother_tongue = #{resource.motherTongue}, 
			religion = #{resource.religion},  
			nationality = #{resource.nationality}, 
			social_category = (SELECT rec_id FROM social_category WHERE social_category_code =#{resource.category} AND is_active = true), 
		
			<!-- section = (SELECT rec_id FROM section WHERE standard=(SELECT rec_id FROM standard WHERE standard_code = #{standard}) AND section_code = #{section} AND is_active = true),  -->
			house = (SELECT rec_id FROM house WHERE house_code = #{house} AND is_active = true),  
			state_of_domicile = #{stateOfDomicile},  
			bank_name = #{resource.bankName}, 
			branch = #{resource.bankBranch}, 
		
			bank_account_number = #{resource.accountNumber}, 
			scholarship = (SELECT rec_id FROM scholarship WHERE scholarship_code = #{scholarship} AND is_active = true), 
			father_in_defence = #{resource.fatherInDefence},  
			father_service_status = #{resource.fatherServiceStatus}, 
			father_defence_category = #{resource.fatherDefenceCategory},  
		
			father_rank = #{resource.fatherRank}, 
			father_mobile = #{resource.fatherMobile}, 
			father_email = #{resource.fatherEmail}, 
			mother_mobile = #{resource.motherMobile},  
			mother_email = #{resource.motherEmail},  
		
			student_income = #{studentIncome}, 
			family_income=#{familyIncome}, 
			guardian_mobile=#{guardianMobile},  
			guardian_email=#{guardianEmail}, 
			previous_scholl_phone=#{previousSchoolPhone}, 
		
			previous_school_website=#{previousSchoolWebsite}, 
			previous_school_email=#{previousSchoolEmail},  
			previous_school_address=#{previousSchoolAddress}, 
			previous_school=#{previousSchoolName}, 
			medical_status=#{resource.medicalStatus},
			<!-- second_language=(SELECT rec_id FROM subject WHERE subject_code =#{secondLanguage} AND is_active = true) -->
			resident_type = (SELECT rec_id FROM resident_type WHERE resident_type_code = #{residentType} AND is_active = true),
			mobile_no = #{resource.mobile}
			<!-- ,print_admission_form_id = (SELECT paf.rec_id FROM print_admission_form paf 
					JOIN course c ON (paf.course = c.rec_id AND c.is_active = true) 
					WHERE c.course_code = #{courseName} AND paf.is_active = true) -->
		WHERE
			is_active = true
		AND
			user_id = #{resourceUserId};
			
			
		<foreach item="attachment" collection="resource.attachmentList" open="" close="" separator=";">
			INSERT INTO attachment(
				rec_id, obj_id, updated_by, updated_on, 
	            date_of_creation,attachment_code, 
	            attachment_type, attachment_location, attachment_size, 
	            attached_file_name, resource)
	    	VALUES (
    			uuid_generate_v4(),
	   			#{objectId}, 
	  			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
	  			extract(epoch FROM now()),
          		extract(epoch FROM now()), 
          		(SELECT 'ATTCH-' ||COALESCE((SELECT MAX(attachment_id) FROM attachment), 0 )+1),
          		(SELECT rec_id FROM attachment_type WHERE attachment_type_name = #{attachment.attachmentType} AND is_active = true), 
          		#{attachment.storageRootPath}, 
          		#{attachment.attachmentSize},
          		#{attachment.attachmentName},
          		(SELECT rec_id FROM resource WHERE user_id = #{resourceUserId} AND is_active = true)
	  		 );
		</foreach>		
	</update>	
	
	<update id="updateStudentPresentAddress" parameterType="com.qts.icam.model.common.Address" statementType="CALLABLE">
		select update_resource_address(			
			#{objectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{addressCode, mode=IN, jdbcType=VARCHAR},
			#{presentAddressLine, mode=IN, jdbcType=VARCHAR},
			#{addressDesc, mode=IN, jdbcType=VARCHAR},			
			#{presentAddressCityVillage, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPinCode, mode=IN, jdbcType=VARCHAR},
			#{presentAddressState, mode=IN, jdbcType=VARCHAR},
			#{presentAddressCountry, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPoliceStation, mode=IN, jdbcType=VARCHAR},			
			#{presentAddressDistrict, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPostOffice, mode=IN, jdbcType=VARCHAR},
			#{presentAddressLandmark, mode=IN, jdbcType=VARCHAR},
			#{presentAddressRailwayStation, mode=IN, jdbcType=VARCHAR},
			#{presentAddressPhone, mode=IN, jdbcType=VARCHAR},
			#{addressType, mode=IN, jdbcType=VARCHAR},			
			#{userId, mode=IN, jdbcType=VARCHAR});	
	</update>
	
	<update id="updateStudentPermananentAddress" parameterType="com.qts.icam.model.common.Address" statementType="CALLABLE">
		select update_resource_address(
			#{objectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{addressCode, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressLine, mode=IN, jdbcType=VARCHAR},
			#{addressDesc, mode=IN, jdbcType=VARCHAR},			
			#{permanentAddressCityVillage, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPinCode, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressState, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressCountry, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPoliceStation, mode=IN, jdbcType=VARCHAR},			
			#{permanentAddressDistrict, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPostOffice, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressLandmark, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressRailwayStation, mode=IN, jdbcType=VARCHAR},
			#{permanentAddressPhone, mode=IN, jdbcType=VARCHAR},
			#{addressType, mode=IN, jdbcType=VARCHAR},			
			#{userId, mode=IN, jdbcType=VARCHAR});	
	</update>
	
	<!-- <update id="updateStudentLocalGuardianAddress" parameterType="com.qts.icam.model.common.Address" statementType="CALLABLE">
		select update_resource_address(
			#{objectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{addressCode, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressLine, mode=IN, jdbcType=VARCHAR},
			#{addressDesc, mode=IN, jdbcType=VARCHAR},			
			#{guardianAddressCityVillage, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPinCode, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressState, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressCountry, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPoliceStation, mode=IN, jdbcType=VARCHAR},			
			#{guardianAddressDistrict, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPostOffice, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressLandmark, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressRailwayStation, mode=IN, jdbcType=VARCHAR},
			#{guardianAddressPhone, mode=IN, jdbcType=VARCHAR},
			#{addressType, mode=IN, jdbcType=VARCHAR},			
			#{userId, mode=IN, jdbcType=VARCHAR});	
	</update> -->
	
	
	
	
	<select id="fetchCalendarEventListForAllUser" resultType="com.qts.icam.model.backoffice.CalendarEvent">
		SELECT
			event_code as calendarEventCode,
			(select CAST(calender_event_details_id AS text)) as calendarEventDesc ,
			event_name as calendarEventName,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY')) as calendarEventStartDate,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as calendarEventEndDate,
			start_time as calendarEventStartTime,
			end_time as calendarEventEndTime,
			event_color as calendarEventEndColor
		FROM
			calender_event_details cl
		JOIN
			event_type et ON (et.is_active = true) AND (cl.event_type = et.rec_id)
		WHERE
			cl.is_active = true
		AND
			cl.event_viewer = 'All User'
		AND
			et.event_type_code = #{eventTypeCode};
	</select>
	
	<select id="fetchCalendarEventListForRollBased" resultType="com.qts.icam.model.backoffice.CalendarEvent" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		(SELECT
			event_code as calendarEventCode,
			(select CAST(calender_event_details_id AS text)) as calendarEventDesc ,
			event_name as calendarEventName,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY')) as calendarEventStartDate,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as calendarEventEndDate,
			start_time as calendarEventStartTime,
			end_time as calendarEventEndTime,
			event_color as calendarEventEndColor
		FROM
			calender_event_details cl
		 JOIN
		 	event_role_mapping erm ON (cl.rec_id = erm.calendar_event_details) AND (true = erm.is_active)
		 JOIN
			event_type et ON (et.is_active = true) AND (cl.event_type = et.rec_id)
		 WHERE
			 erm.role_name = #{RollName}
		AND
			cl.is_active = true
		AND
			et.event_type_code = #{eventType.eventTypeCode})
		UNION 
		(SELECT
			event_code as calendarEventCode,
			(select CAST(calender_event_details_id AS text)) as calendarEventDesc ,
			event_name as calendarEventName,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY')) as calendarEventStartDate,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as calendarEventEndDate,
			start_time as calendarEventStartTime,
			end_time as calendarEventEndTime,
			event_color as calendarEventEndColor
		FROM
			calender_event_details cl
		JOIN
			event_type et ON (et.is_active = true) AND (cl.event_type = et.rec_id)
		WHERE
			cl.is_active = true
		AND
			cl.event_viewer = 'All User'
		AND
			et.event_type_code = #{eventType.eventTypeCode});
			
	</select>
	
	<insert id="insertAssignedEvent" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		<selectKey keyProperty="calendarIntEventCode" resultType="Integer"
			order="AFTER">
			SELECT MAX(calender_event_details_id) FROM
			calender_event_details;
		</selectKey>
		INSERT INTO calender_event_details
		(rec_id,
		obj_id,
		updated_by,
		updated_on,
		date_of_creation,
		is_active,
		event_name,
		start_date,
		end_date,
		event_code,
		start_time,
		end_time,
		event_color,
		event_viewer,
		event_type)
		VALUES (
		(SELECT uuid_generate_v4()),
		#{calendarEventObjectId},
		(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
		(SELECT extract(epoch FROM now())),
		(SELECT extract(epoch FROM now())),true,
		#{calendarEventName},
		(SELECT extract(epoch from (SELECT
		to_timestamp(#{calendarEventStartDate},'DD-MM-YYYY')))),
		(SELECT extract(epoch from (SELECT
		to_timestamp(#{calendarEventEndDate},'DD-MM-YYYY')))),
		#{calendarEventBy},
		#{calendarEventStartTime},
		#{calendarEventEndTime},
		#{calendarEventEndColor},
		#{calendarEventViewer},
		(SELECT rec_id FROM event_type WHERE event_type_code = #{eventType.eventTypeCode} AND is_active = true));
	</insert>
	
	<insert id="insertRollForAssignedEvent" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		INSERT INTO event_role_mapping
			(rec_id,
			obj_id,
			updated_by,
			updated_on,
			date_of_creation,
			is_active,
			event_roll_mapping_code,
			calendar_event_details,
			role_name
			)
		VALUES 
			(
			(SELECT uuid_generate_v4()),
			#{calendarEventObjectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),
			(SELECT extract(epoch FROM now())),
			true,
			#{RollName},
			(SELECT rec_id FROM calender_event_details WHERE calender_event_details_id
			= #{calendarIntEventCode} AND is_active = true),
			#{RollName});
	</insert>

	<update id="updateAssignedEvent" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		UPDATE
			calender_event_details
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			event_name=#{calendarEventName}
		WHERE
			calender_event_details_id=#{calendarIntEventCode}
		AND
			is_active=true;
	</update>
	
	<select id="selectEventRolleMappingIdList" resultType="com.qts.icam.model.backoffice.CalendarEvent" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		SELECT
			erm.event_roll_mapping_id as calendarIntEventCode
		FROM
			calender_event_details cl
		 JOIN
		 	event_role_mapping erm ON (cl.rec_id = erm.calendar_event_details) AND (true = erm.is_active)
		 WHERE
			 cl.calender_event_details_id = #{calendarIntEventCode}
		AND
			cl.is_active = true;		
	</select>
	
	<update id="deleteAssignedEvent" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		UPDATE
			calender_event_details
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			is_active = false
		WHERE
			calender_event_details_id=#{calendarIntEventCode}
		AND
			is_active=true;
	</update>
	
	<update id="deleteAssignedEventRoleMapping" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		UPDATE
			event_role_mapping
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			is_active = false
		WHERE
			event_roll_mapping_id=#{calendarIntEventCode}
		AND
			is_active=true;
	</update>
	
	
	<resultMap id="selectSubjectsAndGroupForStandardRM" type="com.qts.icam.model.backoffice.StudentSubjectMapping">
		<id property="subjectGroup" column="subject_group_name" jdbcType="VARCHAR" />
		<collection property="subjects" ofType="com.qts.icam.model.academics.Subject">
			<id property="subjectCode" column="subject_code" jdbcType="VARCHAR" />
			<result property="subjectName" column="subject_name" jdbcType="VARCHAR" />
		</collection>
	</resultMap>
	<select id="selectSubjectsAndGroupForStandard"  parameterType="java.lang.String" resultMap="selectSubjectsAndGroupForStandardRM">
		SELECT
			sub.subject_code,
			sub.subject_name,
			sg.subject_group_name
		FROM standard_subject_mapping ssm
		JOIN standard std ON(ssm.standard=std.rec_id AND std.is_active=true)
		JOIN subject sub ON(ssm.subject=sub.rec_id AND sub.is_active=true)
		JOIN subject_group sg ON(sub.subject_group=sg.rec_id AND sg.is_active=true)
		WHERE
			std.standard_code=#{standard}
			AND
			ssm.is_active=true;
	</select>
	<update id="inactiveStudentSubjectMapping" parameterType="com.qts.icam.model.backoffice.StudentSubjectMapping">
	 	<foreach item="oldSubject" collection="oldSubjectList" index="index" open="" close="" separator=";">
			UPDATE student_subject_mapping SET
				updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on=extract(epoch FROM now()),
				is_active=false
			WHERE
				student=(SELECT rec_id FROM resource WHERE roll_number =#{student.rollNumber} AND is_active = true)
				AND
				subject=(SELECT rec_id FROM subject WHERE subject_code =#{oldSubject} AND is_active = true)
				AND
				is_active=true;
		</foreach>
	</update>
	<select id="selectInactiveSubjectForStudent" resultType="com.qts.icam.model.backoffice.StudentSubjectMapping" parameterType="com.qts.icam.model.backoffice.StudentSubjectMapping">
		SELECT
			sub.subject_code as subject,
			r.roll_number as "student.rollNumber"
		FROM student_subject_mapping ssm
		JOIN resource r ON(ssm.student=r.rec_id AND r.is_active=true)
		JOIN subject sub ON(ssm.subject=sub.rec_id AND sub.is_active=true)
		WHERE
			r.roll_number=#{student.rollNumber}
			AND
			sub.subject_code=#{subject}
			AND
			ssm.is_active=false;
	</select>
	<update id="updateStudentSubjectMapping" parameterType="com.qts.icam.model.backoffice.StudentSubjectMapping">
		UPDATE student_subject_mapping SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=extract(epoch FROM now()),
			is_active=true
		WHERE
			student=(SELECT rec_id FROM resource WHERE roll_number =#{student.rollNumber} AND is_active = true)
			AND
			subject=(SELECT rec_id FROM subject WHERE subject_code =#{subject} AND is_active = true)
			AND
			is_active=false;
	</update>
	<insert id="insertStudentSubjectMapping" parameterType="com.qts.icam.model.backoffice.StudentSubjectMapping">
		INSERT INTO student_subject_mapping(
			rec_id, obj_id, updated_by, updated_on, 
			date_of_creation, student, subject)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			(SELECT rec_id FROM resource WHERE roll_number =#{student.rollNumber} AND is_active = true),
			(SELECT rec_id FROM subject WHERE subject_code =#{subject} AND is_active = true));
	</insert>
	
	<select id="selectAcademicTimeTable" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		resultType="com.qts.icam.model.backoffice.AcademicTimeTable">
		SELECT
		tt.time_table_code as timeTableCode,
		tt.status as status,
		tt.total_slot as totalSlot,
		tt.day as timeTableDay,
		tt.time_table_id as timeintTableCode,
		s.standard_code as "timeTableClass.standardCode",
		sec.section_code as "timeTableSection.sectionCode",
		ay.academic_year_code as "academicYear.academicYearCode"
		FROM
		time_table tt
		JOIN
		standard s ON(tt.standard = s.rec_id) AND (s.is_active = true)
		JOIN
		section sec ON(tt.section = sec.rec_id) AND (sec.standard = s.rec_id) AND(sec.is_active = true) 
		JOIN
		academic_Year ay ON (ay.is_active = true) AND (ay.rec_id = tt.academic_year)
		WHERE
		tt.is_active = true
		AND
		s.standard_code = #{timeTableClass.standardCode}
		AND
		sec.section_code= #{timeTableSection.sectionCode}
		AND
		ay.academic_year_code = #{academicYear.academicYearCode};
	</select>
	
	<select id="selectAcademicTimeTableDetails" parameterType="com.qts.icam.model.backoffice.AcademicTimeTableDetails"
		resultType="com.qts.icam.model.backoffice.AcademicTimeTableDetails">

		SELECT
			ttd.school_start_time as schoolStartTime,
			(to_char((SELECT to_timestamp((ttd.start_date))), 'DD/MM/YYYY')) AS timeTableDetailsStartDate,
			ttd.status as status,
			ttd.individual_slot as individualSlot,
			ttd.start_time as timeTableDetailsStartTime,
			ttd.end_time as timeTableDetailsEndTime,
			ttd.duration as timeTableDetailsDuration,
			sub.subject_name as timeTableDetailsSubjectName,
			rs.first_name || ' ' || COALESCE(rs.middle_name,' ') || ' ' || COALESCE(rs.last_name,' ') as timeTableDetailsTeacherName,
			rs.user_id as timeTableDetailsUserId,
			ttd.school_break as breakFlag
		FROM
			time_table tt
		JOIN
			time_table_details ttd ON(tt.rec_id = ttd.time_table) AND (ttd.is_active = true)
		LEFT OUTER JOIN
			resource rs ON (ttd.resource = rs.rec_id) AND (rs.is_active = true)
		LEFT OUTER JOIN
			subject sub ON (ttd.subject = sub.rec_id) AND (sub.is_active = true) 
		LEFT OUTER JOIN 
			subject_group sg ON (sub.subject_group = sg.rec_id) AND (sg.is_active = true)
		WHERE
			tt.is_active = true
		AND
			tt.time_table_id=#{timeintTableCode};
	</select>
	
	
	<select id="selectSubjectsBasedOnStandardAndSubjectGroup" resultType="com.qts.icam.model.academics.Subject" parameterType="com.qts.icam.model.academics.Subject">
		SELECT
			sub.subject_code as subjectCode,
			sub.subject_name as subjectName
		FROM standard_subject_mapping ssm
		JOIN standard std ON(ssm.standard=std.rec_id AND std.is_active=true)
		JOIN subject sub ON(ssm.subject=sub.rec_id AND sub.is_active=true)
		JOIN subject_group sg ON(sub.subject_group = sg.rec_id AND sg.is_active=true) 
		WHERE
			std.standard_code= #{desc}
			AND
			sg.subject_group_code = #{subjectGroup}
			AND
			ssm.is_active=true;
	</select>
	
	<insert id="insertIntoAcademicTimeTable" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		statementType="CALLABLE">
		select insert_into_time_table_and_time_table_details(
		#{objectId, mode=IN, jdbcType=VARCHAR},
		#{status, mode=IN, jdbcType=VARCHAR},
		#{totalSlot, mode=IN, jdbcType=VARCHAR},
		#{updatedBy, mode=IN, jdbcType=VARCHAR},
		#{timeTableClass.standardCode, mode=IN, jdbcType=VARCHAR},
		#{timeTableSection.sectionCode, mode=IN, jdbcType=VARCHAR},
		#{timeTableDay, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.schoolStartTime, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.individualSlot, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartDate, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartTime, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsEndTime, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsDuration, mode=IN,
		jdbcType=INTEGER},
		#{academicYear.academicYearCode, mode=IN,jdbcType=VARCHAR}
		);
	</insert>
	
	
	<select id="selectTimeTableDurationSlotForValidation" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		resultType="com.qts.icam.model.backoffice.AcademicTimeTableDetails">

		SELECT
			ttd.start_time as timeTableDetailsStartTime,
			ttd.end_time as timeTableDetailsEndTime
		FROM
			time_table tt
		JOIN
			time_table_details ttd ON(tt.rec_id = ttd.time_table) AND (ttd.is_active = true)
		JOIN
			standard s ON(tt.standard = s.rec_id) AND (s.is_active = true)
		JOIN
			section sec ON(tt.section = sec.rec_id) AND (sec.is_active = true) AND (sec.standard = s.rec_id)
		JOIN
			academic_year ay ON (ay.is_active = true) AND (ay.rec_id = tt.academic_year) AND (year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C'))
		WHERE
			tt.is_active=true
		AND
			ttd.status = 'PERIODDURATION'
		AND
			start_date = (SELECT extract(epoch from (SELECT to_timestamp('22/09/2013','DD/MM/YYYY'))))
		AND
			ttd.individual_slot = #{academicTimeTableDetails.individualSlot}
		AND
			s.standard_code = #{timeTableClass.standardCode}
		AND
			sec.section_code= #{timeTableSection.sectionCode}
		AND
			ay.academic_year_code = #{academicYear.academicYearCode};
	</select>
	
	
	<insert id="insertIntoAcademicTimeTableForBreak" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		statementType="CALLABLE">
		select insert_into_time_table_and_time_table_details_for_break(
		#{objectId, mode=IN, jdbcType=VARCHAR},
		#{status, mode=IN, jdbcType=VARCHAR},
		#{totalSlot, mode=IN, jdbcType=VARCHAR},
		#{updatedBy, mode=IN, jdbcType=VARCHAR},
		#{timeTableClass.standardCode, mode=IN, jdbcType=VARCHAR},
		#{timeTableSection.sectionCode, mode=IN, jdbcType=VARCHAR},
		#{timeTableDay, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.schoolStartTime, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsSubject, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.individualSlot, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartDate, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartTime, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsEndTime, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsDuration, mode=IN,
		jdbcType=INTEGER},
		#{academicYear.academicYearCode, mode=IN,jdbcType=VARCHAR}
		);
	</insert>
	
	
	<insert id="insertSubjectAndTeacherForTimeTable" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		statementType="CALLABLE">
		select insert_into_time_table_for_subject_and_teacher(
		#{objectId, mode=IN, jdbcType=VARCHAR},
		#{status, mode=IN, jdbcType=VARCHAR},
		#{totalSlot, mode=IN, jdbcType=VARCHAR},
		#{updatedBy, mode=IN, jdbcType=VARCHAR},
		#{timeTableClass.standardCode, mode=IN, jdbcType=VARCHAR},
		#{timeTableSection.sectionCode, mode=IN, jdbcType=VARCHAR},
		#{timeTableDay, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.schoolStartTime, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.individualSlot, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsSubject, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsSubjectGroup, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsTeacherName, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartDate, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsDuration, mode=IN,
		jdbcType=INTEGER},
		#{academicYear.academicYearCode, mode=IN,jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartTime, mode=IN,jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsEndTime, mode=IN,jdbcType=VARCHAR}
		);
	</insert>
	
	
	<select id="getTeacherNamesBasedOnSubject" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Resource">
		Select
			r.user_id as userId,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,'  ')  as name
		From
			resource r
		JOIN 
			employee_details ed ON (ed.resource = r.rec_id AND ed.is_active=true)
		JOIN
			teacher_subject_mapping tsm ON (tsm.is_active = true) AND (tsm.resource = r.rec_id AND r.is_active = true)
		JOIN
			subject sbj ON (sbj.is_active = true) AND (tsm.subject = sbj.rec_id AND tsm.is_active = true)
		
		WHERE
			sbj.subject_code = #{subjectName}
		AND
			r.is_active = true
		GROUP BY 
			r.user_id,name;
	</select>
	
	<select id="getTeacherConflictionForTimeTable" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		resultType="com.qts.icam.model.backoffice.AcademicTimeTableDetails">

		SELECT
			rs.first_name || ' ' || COALESCE(rs.middle_name,' ') || ' ' || COALESCE(rs.last_name,' ') as timeTableDetailsTeacherName,
			ttd.subject as timeTableDetailsSubjectName
		FROM
			time_table tt
		JOIN
			time_table_details ttd ON(tt.rec_id = ttd.time_table) AND (ttd.is_active = true)
		JOIN
			standard s ON(tt.standard = s.rec_id) AND (s.is_active = true)
		JOIN
			section sec ON(tt.section = sec.rec_id) AND (sec.standard = s.rec_id) AND (sec.is_active = true)
		JOIN
			academic_year ay ON (ay.is_active = true) AND (ay.rec_id = tt.academic_year) AND (year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C'))
		LEFT OUTER JOIN
			resource rs ON (ttd.resource = rs.rec_id) AND (rs.is_active = true)
		WHERE
			tt.is_active = true
		AND
			ay.academic_year_code = #{academicYear.academicYearCode}
		AND
			rs.user_id = #{academicTimeTableDetails.timeTableDetailsUserId}
		AND
			tt.day = #{timeTableDay}
		AND
			ttd.start_time = #{academicTimeTableDetails.timeTableDetailsStartTime}
		AND
			ttd.end_time = #{academicTimeTableDetails.timeTableDetailsEndTime}
		EXCEPT
		SELECT
			rs.first_name || ' ' || COALESCE(rs.middle_name,' ') || ' ' || COALESCE(rs.last_name,' ') as timeTableDetailsTeacherName,
			ttd.subject as timeTableDetailsSubjectName
		FROM
			time_table tt
		JOIN
			time_table_details ttd ON(tt.rec_id = ttd.time_table) AND (ttd.is_active = true)
		JOIN
			standard s ON(tt.standard = s.rec_id) AND (s.is_active = true)
		JOIN
			section sec ON(tt.section = sec.rec_id) AND (sec.standard = s.rec_id) AND (sec.is_active = true)
		JOIN
			academic_year ay ON (ay.is_active = true) AND (ay.rec_id = tt.academic_year) AND (year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C'))
		LEFT OUTER JOIN
			resource rs ON (ttd.resource = rs.rec_id) AND (rs.is_active = true)
		WHERE
			tt.is_active = true
		AND
			s.standard_code = #{timeTableClass.standardCode}
		AND
			sec.section_code= #{timeTableSection.sectionCode}
		AND
			ay.academic_year_code = #{academicYear.academicYearCode}
		AND
			rs.user_id = #{academicTimeTableDetails.timeTableDetailsUserId}
		AND
			tt.day = #{timeTableDay}
		AND
			ttd.start_time = #{academicTimeTableDetails.timeTableDetailsStartTime}
		AND
			ttd.end_time = #{academicTimeTableDetails.timeTableDetailsEndTime};
	</select>
	
	
	
	<select id="selectSubjectAndCount" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable"
		resultType="com.qts.icam.model.backoffice.AcademicTimeTableDetails">
		SELECT
			sub.subject_name as timeTableDetailsSubjectName,
			COUNT(ttd.subject) as timeTableDetailsSubjectCount
		FROM
			time_table tt
		JOIN
			standard s ON(tt.standard = s.rec_id) AND (s.is_active = true)
		JOIN
			section sec ON(tt.section = sec.rec_id) AND (sec.is_active = true) AND (sec.standard = s.rec_id AND s.is_active = true)		
		JOIN
			time_table_details ttd ON(tt.rec_id = ttd.time_table) AND (ttd.is_active = true)
		JOIN
			academic_year ay ON (ay.is_active = true) AND (ay.rec_id = tt.academic_year) AND (year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C'))
		JOIN
			subject sub ON (sub.rec_id = ttd.subject AND ttd.is_active = true) AND (sub.is_active = true) 
		WHERE
			tt.is_active = true
		AND
			s.standard_code = #{timeTableClass.standardCode}
		AND
			sec.section_code= #{timeTableSection.sectionCode}
		AND
			ay.academic_year_code = #{academicYear.academicYearCode}
		AND
			ttd.subject is NOT NULL
		GROUP BY 
			sub.subject_name;
	</select>
	
	
	<update id="deleteDraggedSubjectForAcademicTimeTable"
		parameterType="com.qts.icam.model.backoffice.AcademicTimeTable" statementType="CALLABLE">
		select update_assigened_subject_into_time_table(
		#{updatedBy, mode=IN, jdbcType=VARCHAR},
		#{timeintTableCode, mode=IN, jdbcType=INTEGER}
		);

	</update>
	
	
	<update id="updateTimeTableForPeriodDuration" parameterType="com.qts.icam.model.backoffice.AcademicTimeTableDetails">
		UPDATE
			time_table_details
		SET
			start_time = #{timeTableDetailsStartTime},
			end_time = #{timeTableDetailsEndTime}
		WHERE
			time_table=(SELECT rec_id FROM time_table WHERE time_table_id = #{timeTableDetailsId} AND is_active = true )
		AND
			is_active= true;
	</update>
	
	
	<select id="selectedParameterForEditDuration" parameterType="com.qts.icam.model.backoffice.AcademicTimeTableDetails"
		resultType="com.qts.icam.model.backoffice.AcademicTimeTable">
		SELECT
			s.standard_code as "timeTableClass.standardCode",
			sec.section_code as "timeTableSection.sectionCode",
			ttd.individual_slot as "academicTimeTableDetails.individualSlot",
			ay.academic_year_code as "academicYear.academicYearCode"
		FROM
			time_table tt
		JOIN
			time_table_details ttd ON(tt.rec_id = ttd.time_table) AND (ttd.is_active = true)
		JOIN
			standard s ON(tt.standard = s.rec_id) AND (s.is_active = true)
		JOIN
			section sec ON(tt.section = sec.rec_id) AND (sec.is_active = true) AND (sec.standard = s.rec_id AND s.is_active = true)
		JOIN
			academic_year ay ON (ay.is_active = true) AND (ay.rec_id = tt.academic_year) AND (year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C'))
		WHERE
			tt.is_active = true
		AND
			tt.time_table_id = #{timeTableDetailsId};
	</select>
	
	
	<update id="updateTimeTableDetailsForPeriodDuration" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable">
		 <![CDATA[ 		
			UPDATE
				time_table_details
			SET
				updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true),
				updated_on = (SELECT extract(epoch FROM now())),
				start_time = #{academicTimeTableDetails.timeTableDetailsStartTime},
				end_time = #{academicTimeTableDetails.timeTableDetailsEndTime}
			WHERE
				time_table IN 
				(SELECT rec_id FROM time_table 
				WHERE 
					standard=(SELECT rec_id FROM standard WHERE standard_code = #{timeTableClass.standardCode} AND is_active = true) 
				AND 
					section = (SELECT rec_id FROM section WHERE section_code = #{timeTableSection.sectionCode} AND is_active = true AND standard = (SELECT rec_id FROM standard WHERE standard_code = #{timeTableClass.standardCode} AND is_active = true))
				AND 
					academic_year = (SELECT rec_id FROM academic_year WHERE academic_year_code = #{academicYear.academicYearCode} AND is_active = true AND year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C'))
				AND 
				is_active = true)
			AND 
				individual_slot = #{academicTimeTableDetails.individualSlot}
			AND
				status = 'SUBJECTANDTEACHER'
			AND
				end_time <> '0';
		]]>
	</update>
	
	
	<update id="updateSubjectAndTeacherForTimeTable" parameterType="com.qts.icam.model.backoffice.AcademicTimeTable">
		select edit_assigened_subject_into_time_table(
		#{updatedBy, mode=IN, jdbcType=VARCHAR},
		#{timeintTableCode, mode=IN, jdbcType=INTEGER},
		#{timeTableDay, mode=IN, jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartTime, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsStartDate, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.individualSlot, mode=IN,
		jdbcType=VARCHAR},
		#{academicTimeTableDetails.timeTableDetailsEndTime, mode=IN,
		jdbcType=VARCHAR}
		);
		
	</update>
	
	
	<select id="selectSubjectsForTeacher" resultType="com.qts.icam.model.academics.Subject" parameterType="java.lang.String">
		SELECT
			sub.subject_code as subjectCode,
			sub.subject_name as subjectName
		FROM teacher_subject_mapping tsm
		JOIN resource r ON(tsm.resource=r.rec_id AND r.is_active=true)
		JOIN subject sub ON(tsm.subject=sub.rec_id AND sub.is_active=true)
		WHERE
			r.user_id=#{teacher}
			AND
			tsm.is_active=true;
	</select>
	
	<!-- <update id="inactiveTeacherSubjectMapping" parameterType="com.qts.icam.model.backoffice.TeacherSubjectMapping">
	 	<foreach item="oldSubject" collection="oldSubjectList" index="index" open="" close="" separator=";">
			UPDATE teacher_subject_mapping SET
				updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on=extract(epoch FROM now()),
				is_active=false
			WHERE
				resource=(SELECT rec_id FROM resource WHERE user_id =#{resource.userId} AND is_active = true)
				AND
				subject=(SELECT rec_id FROM subject WHERE subject_code =#{oldSubject} AND is_active = true)
				AND
				is_active=true;
		</foreach>
	</update> -->
	
	<!-- <select id="selectInactiveSubjectForTeacher" resultType="com.qts.icam.model.backoffice.TeacherSubjectMapping" parameterType="com.qts.icam.model.academics.StandardSubjectMapping">
		SELECT
			sub.subject_code as subject,
			res.user_id as "resource.userId"
		FROM teacher_subject_mapping tsm
		JOIN resource res ON(tsm.resource=res.rec_id AND res.is_active=true)
		JOIN subject sub ON(tsm.subject=sub.rec_id AND sub.is_active=true)
		WHERE
			res.user_id=#{resource.userId}
			AND
			sub.subject_code=#{subject}
			AND
			tsm.is_active=false;
	</select> -->
	<!-- <update id="updateTeacherSubjectMapping" parameterType="com.qts.icam.model.backoffice.TeacherSubjectMapping">
		UPDATE teacher_subject_mapping SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=extract(epoch FROM now()),
			is_active=true
		WHERE
			resource=(SELECT rec_id FROM resource WHERE user_id =#{resource.userId} AND is_active = true)
			AND
			subject=(SELECT rec_id FROM subject WHERE subject_code =#{subject} AND is_active = true)
			AND
			is_active=false;
	</update> -->
	<insert id="insertTeacherSubjectMapping" parameterType="com.qts.icam.model.common.TeacherSubjectMapping">
		INSERT INTO teacher_subject_mapping(
			rec_id, obj_id, updated_by, updated_on, 
			date_of_creation, resource, subject)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			(SELECT rec_id FROM resource WHERE user_id =#{resource.userId} AND is_active = true),
			(SELECT rec_id FROM subject WHERE subject_code =#{subject} AND is_active = true));
	</insert>
	
	
	<!-- anup.roy//to populate result -->
	<insert id="populateResult" parameterType="com.qts.icam.model.academics.StudentResult" statementType="CALLABLE">
		select exam_report(
			#{standard, mode=IN, jdbcType=VARCHAR},
			#{section, mode=IN, jdbcType=VARCHAR},
			#{serialId, mode=IN, jdbcType=INTEGER});
	</insert>
	<!-- anup.roy//fetch students for promotion -->
	<select id="selectStudentsResultForPromotion" resultType="com.qts.icam.model.academics.StudentResult">
		SELECT
			student as name,
			roll as rollNumber,
			result as passFail
		FROM
			temp_student_promotion_status;
		
		DELETE FROM temp_student_promotion_status;
	</select>
	<!-- anup.roy//to get student fees pay status -->
	<select id="getStudentFeesPaymentStatus" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT fees_status FROM student_fees_payment WHERE roll_number=#{rollNumber} AND
		academic_year=(SELECT rec_id FROM academic_year WHERE year_status=
			(SELECT rec_id FROM status_flag WHERE status_sym ='C') AND is_active= true);
	</select>
	
	
	<!-- <select id="getStudentLibraryFineStatus" resultType="java.lang.String" parameterType="java.lang.Integer">
		SELECT
			sf1.status_sym	
		FROM
			book_allocation ba
		JOIN book_allocation_details bad ON (bad.book_allocation = ba.rec_id) AND (bad.is_active = true)
		JOIN status_flag sf1 ON (bad.fine_status = sf1.rec_id)
		JOIN book_id bi ON (bad.book_id = bi.rec_id) AND (bi.is_active = true)
		JOIN book b ON (bi.book = b.rec_id) AND (b.is_active = true)
		JOIN resource r ON (ba.book_issued_to = r.rec_id) AND (r.is_active = true)
		JOIN resource_type rtp ON (rtp.rec_id = r.resource_type) AND (ba.book_issued_to_resource_type = rtp.rec_id) AND (rtp.is_active = true)
		WHERE
			ba.is_active = true
		AND
			rtp.resource_type_code = 'STUDENT'
		AND
			r.roll_number = #{rollNumber}
	</select> -->
	
	<!-- <select id="getStudentLibraryBookStatus" resultType="java.lang.String" parameterType="java.lang.Integer">
		SELECT
			sf.status_sym		
		FROM
			book_allocation ba
		JOIN status_flag sf ON (ba.allocation_status = sf.rec_id)
		JOIN book_allocation_details bad ON (bad.book_allocation = ba.rec_id) AND (bad.is_active = true)
		JOIN book_id bi ON (bad.book_id = bi.rec_id) AND (bi.is_active = true)
		JOIN book b ON (bi.book = b.rec_id) AND (b.is_active = true)
		JOIN resource r ON (ba.book_issued_to = r.rec_id) AND (r.is_active = true)
		JOIN resource_type rtp ON (rtp.rec_id = r.resource_type) AND (ba.book_issued_to_resource_type = rtp.rec_id) AND (rtp.is_active = true)
		WHERE
			ba.is_active = true
		AND
			rtp.resource_type_code = 'STUDENT'
		AND
			r.roll_number = #{rollNumber}
	</select> -->
	
	<!-- anup.roy//update student promotion -->
	
	 <insert id="updateStudentPromotion" parameterType="com.qts.icam.model.common.Student">
	 	<foreach item="studentResult" collection="studentResultList" index="index" open="" close="" separator=";">
			INSERT INTO 
				history_student_marks_v1 
			SELECT * FROM 
				student_marks_v1 
			WHERE 
				student_roll = #{studentResult.rollNumber};
			DELETE FROM 
				student_marks_v1 
			WHERE 
				student_roll = #{studentResult.rollNumber}; 
			 <if test="studentResult.status == 'PROMOTE'">
				UPDATE  
					student_course_mapping 
				SET 
					course =(SELECT c.rec_id FROM course c 
							JOIN standard st ON (c.standard = st.rec_id AND st.is_active = true)
							WHERE st.standard_code = #{studentResult.standard}
							AND c.is_active = true	
							),
					section =(SELECT sec.rec_id FROM section sec 
							JOIN standard st ON (sec.standard = st.rec_id AND st.is_active = true)
							WHERE sec.section_code = #{studentResult.section} 
							AND st.standard_code = #{studentResult.standard}
							AND sec.is_active = true)
				WHERE
					roll_number = #{studentResult.rollNumber}
				AND
					is_active = true;
			</if>
			<!-- anup.roy//modification for entry standard where students passes out -->
			<if test="studentResult.status == 'PASSOUT'">
			 	INSERT INTO history_student(updated_by, date_of_creation, roll_number, course)
				    VALUES ((SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
							(SELECT extract(epoch FROM now())), #{studentResult.rollNumber},
							(SELECT c.rec_id FROM course c 
							JOIN standard st ON (c.standard = st.rec_id AND st.is_active = true)
							WHERE st.standard_code = #{studentResult.standard}
							AND c.is_active = true	
							));
			</if>
		</foreach>
	</insert>
	
	<select id="selectViewPendingPromotion" resultType="com.qts.icam.model.academics.StudentResult">
		SELECT DISTINCT standard as standard, section as section FROM student_marks;
	</select>
	
	<!-- saif ali 12062017 -->
	
	<insert id="grantStudentTC" parameterType="com.qts.icam.model.backoffice.StudentTC">
		INSERT INTO history_resource(
            updated_by, date_of_creation, resource_type, gender, date_of_admission, 
            roll_number, first_name, middle_name, last_name, date_of_birth, 
            father_first_name, father_middle_name, father_last_name, mother_first_name, 
            mother_middle_name, mother_last_name, email_address, mobile_no, 
            blood_group, mother_tongue, religion, nationality, social_category, 
            standard, hostel, state_of_domicile, bank_name, branch, bank_account_number, 
            scholarship, father_in_defence, father_defence_category, father_rank, 
            address, previous_school, medical_status, joining_class, photo_source, 
            tc_reason, tc_desc, year, student_character)
    	VALUES(#{updatedBy}, (SELECT extract(epoch FROM now())),
    		(SELECT resource_type_name FROM resource_type WHERE rec_id=(SELECT resource_type FROM resource WHERE user_id=#{rollNumber})),
    		(SELECT gender FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT date_of_admission FROM resource WHERE user_id=#{rollNumber}),
    		#{rollNumber}, (SELECT first_name FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT middle_name FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT last_name FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT date_of_birth FROM resource WHERE user_id=#{rollNumber} ),
    		(SELECT father_first_name FROM resource WHERE user_id=#{rollNumber} ),
    		(SELECT father_middle_name FROM resource WHERE user_id=#{rollNumber} ),
    		(SELECT father_last_name FROM resource WHERE user_id=#{rollNumber} ),
    		(SELECT mother_first_name FROM resource WHERE user_id=#{rollNumber} ),
    		(SELECT mother_middle_name FROM resource WHERE user_id=#{rollNumber} ),
    		(SELECT mother_last_name FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT email_address FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT mobile_no FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT blood_group FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT mother_tongue FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT religion FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT nationality FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT social_category_name FROM social_category WHERE rec_id=(SELECT social_category FROM resource WHERE user_id=#{rollNumber})),
    		#{standard}, (SELECT hostel_name FROM hostel WHERE rec_id=(SELECT hostel FROM resource WHERE user_id=#{rollNumber})),
    		(SELECT state_of_domicile FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT bank_name FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT branch FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT bank_account_number FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT scholarship_name FROM scholarship WHERE rec_id=(SELECT scholarship FROM resource WHERE user_id=#{rollNumber})),
    		(SELECT father_in_defence FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT father_defence_category FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT father_rank FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT
				address_line || ' Landmark - ' || land_mark || ' ' || city_name || ' Dist - ' || district_name || ' PO - ' || post_office || ' PS - ' || police_station || ' ' || state_name || ' ' || country_name || ' Pin - ' || postal_code as address
				FROM address add
				JOIN resource r ON(add.resource=r.rec_id)
				JOIN city c ON(add.city=c.rec_id)
				JOIN district d ON(add.district=d.rec_id)
				JOIN state s ON(add.state=s.rec_id)
				JOIN country co ON(add.country=co.rec_id)
				WHERE
					r.user_id=#{rollNumber}
				AND
					add.address_type='PRESENT'),
    		(SELECT previous_school FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT medical_status FROM resource WHERE user_id=#{rollNumber}),
    		(SELECT 
    			print_admission_form_class 
    		FROM 
    			print_admission_form paf 
   			JOIN 
   				resource r ON (r.print_admission_form_id = paf.rec_id AND r.is_active = true)
   			WHERE 
   				r.user_id=#{rollNumber}),
    		(SELECT (attachment_location || attached_file_name) as path FROM attachment WHERE
    				resource=(SELECT rec_id FROM resource WHERE user_id=#{rollNumber}) AND
    				attachment_type=(SELECT rec_id FROM attachment_type WHERE attachment_type_code='PROFIMG')),
    		#{reason}, #{description},
    		(SELECT academic_year_name FROM academic_year WHERE year_status=(SELECT rec_id FROM status_flag WHERE status_sym='C')),
    		#{studentCharacter});
    		
    		
    		INSERT INTO 
    			history_student_marks_v1 
   			SELECT  * FROM 
   				student_marks_v1 
 			WHERE 
 				student_roll = #{rollNumber};
 				
			DELETE FROM 
				student_marks_v1 
			WHERE 
				student_roll = #{rollNumber};
			<!-- INSERT INTO history_student_marks_co SELECT  * FROM student_marks_co WHERE student_roll = #{rollNumber};
			DELETE FROM history_student_marks_co WHERE student_roll = #{rollNumber}; -->
			
    		DELETE FROM 
    			student_subject_mapping 
    		WHERE student=(SELECT rec_id FROM resource WHERE user_id=#{rollNumber} AND is_active=true);
					
    		UPDATE 
    			resource 
    		SET 
    			is_active = false 
   			WHERE
				user_id=(select user_id from student_course_mapping where user_id=#{rollNumber})
			AND
				is_active=true;
				
			DELETE FROM 
				address 
			WHERE
				resource=(SELECT rec_id FROM resource WHERE user_id=#{rollNumber});
			
			<!-- DELETE FROM book_allocation_details WHERE book_allocation=
				(SELECT rec_id FROM book_allocation WHERE book_issued_to=
					(SELECT rec_id FROM resource WHERE roll_number=#{rollNumber}));
			
			DELETE FROM book_allocation where book_issued_to=
				(SELECT rec_id FROM resource WHERE roll_number=#{rollNumber}); -->
				
			<!-- added by saif -->
			UPDATE 
				student_course_mapping 
			SET 
				is_active = false
			WHERE
				user_id=#{rollNumber}
			AND
				is_active=true; 
				
			<!-- DELETE FROM book_reservation_queue WHERE book_reservation_for=
				(SELECT rec_id FROM resource WHERE roll_number=#{rollNumber}); -->
			
			<!-- DELETE FROM resource WHERE
				roll_number=#{rollNumber}; -->
			
	</insert>
	
	
	<select id="selectSearchExStudents" resultType="com.qts.icam.model.backoffice.ExStudents">
		SELECT
			(to_char((SELECT to_timestamp(date_of_admission)), 'DD/MM/YYYY')) as dateOfAdmission,
			roll_number as rollNumber,
			(first_name || ' ' || COALESCE(middle_name,' ') || ' ' || last_name) as name,
			(father_first_name || ' ' || COALESCE(father_middle_name,' ') || ' ' || father_last_name) as fatherName,
			(mother_first_name || ' ' || COALESCE(mother_middle_name,' ') || ' ' || mother_last_name) as motherName,
			(to_char((SELECT to_timestamp(date_of_birth)), 'DD/MM/YYYY')) as dateOfBirth,
			email_address as email,
			mobile_no as mobile,
			standard as lastStandard,
			joining_class as joinStandard,
			student_character as studentCharacter,
			year as lastYear
		FROM history_resource
		WHERE
			roll_number is not null
			<if test="rollNumber != null">
				AND roll_number ilike ('%'||#{rollNumber}||'%')
			</if>
			<if test="firstName != null">
				AND first_name ilike ('%'||#{firstName}||'%')
			</if>
			<if test="middleName != null">
				AND middle_name ilike ('%'||#{middleName}||'%')
			</if>
			<if test="lastName != null">
				AND last_name ilike ('%'||#{lastName}||'%')
			</if>
			<if test="year != null">
				AND year ilike ('%'||#{year}||'%')
			</if>
	</select>	
	
	<update id="deleteSelectedAttachment" parameterType="java.lang.Integer">
		UPDATE 
			attachment
		SET
			is_active = FALSE
		WHERE
			attachment_id = #{attachId};
	</update>
	
	<select id="selectEventType" resultType="com.qts.icam.model.common.EventType">
		SELECT 
			et.event_type_code as eventTypeCode,
			et.event_type_name as eventTypeName
        FROM 
			event_type et
        WHERE 
			et.is_active = true
		group by event_type_name,event_type_code;
	</select>
	
	<select id="fetchCalendarEventListForPersonal" resultType="com.qts.icam.model.backoffice.CalendarEvent" parameterType="com.qts.icam.model.common.EventType">
		(SELECT
			event_code as calendarEventCode,
			(select CAST(calender_event_details_id AS text)) as calendarEventDesc ,
			event_name as calendarEventName,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY')) as calendarEventStartDate,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as calendarEventEndDate,
			start_time as calendarEventStartTime,
			end_time as calendarEventEndTime,
			event_color as calendarEventEndColor
		FROM
			calender_event_details cl
		JOIN
			event_type et ON (et.is_active = true) AND (cl.event_type = et.rec_id)
		JOIN
			event_role_mapping erm ON (erm.calendar_event_details = cl.rec_id) AND (erm.is_active = true)
		LEFT JOIN
			resource r ON (r.is_active = true) AND (erm.personal = r.rec_id)
		WHERE
			cl.is_active = true
		AND
			cl.event_viewer ='Personal'
		AND
			et.event_type_code = #{eventTypeCode}
		AND
			r.user_id=#{updatedBy})
		UNION
		(SELECT
			event_code as calendarEventCode,
			(select CAST(calender_event_details_id AS text)) as calendarEventDesc ,
			event_name as calendarEventName,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY')) as calendarEventStartDate,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as calendarEventEndDate,
			start_time as calendarEventStartTime,
			end_time as calendarEventEndTime,
			event_color as calendarEventEndColor
		FROM
			calender_event_details cl
		JOIN
			event_type et ON (et.is_active = true) AND (cl.event_type = et.rec_id)
		WHERE
			cl.is_active = true
		AND
			cl.event_viewer = 'All User'
		AND
			et.event_type_code = #{eventTypeCode});
	</select>
	
	<insert id="insertRollForAssignedEventPersonal" parameterType="com.qts.icam.model.backoffice.CalendarEvent">
		INSERT INTO event_role_mapping
			(rec_id,
			obj_id,
			updated_by,
			updated_on,
			date_of_creation,
			is_active,
			event_roll_mapping_code,
			calendar_event_details,
			role_name,
			personal
			)
		VALUES 
			(
			(SELECT uuid_generate_v4()),
			#{calendarEventObjectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),
			(SELECT extract(epoch FROM now())),
			true,
			#{RollName},
			(SELECT rec_id FROM calender_event_details WHERE calender_event_details_id
			= #{calendarIntEventCode} AND is_active = true),
			#{RollName},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true));
	</insert>
	
	
<!-- 	lEAVE -->
	<insert id="insertLeaveType" parameterType="com.qts.icam.model.backoffice.AcademicLeaveCategory">
		INSERT INTO	leave_type
		(rec_id, obj_id, updated_by, updated_on, date_of_creation,
		leave_type_code, leave_type_name, leave_type_desc)
		VALUES ((
		SELECT uuid_generate_v4()),
		#{leaveCategoryObjectId},
		(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
		(SELECT extract(epoch FROM now())),
		(SELECT extract(epoch FROM now())),
		(SELECT ('LT-' ||(select COALESCE((SELECT MAX(leave_type_id) FROM leave_type), 0 )+1))),		
		#{leaveCategoryName},
		#{leaveCategoryDesc});
	</insert>
	
	<update id="deleteLeaveType" parameterType="com.qts.icam.model.backoffice.AcademicLeaveCategory">
		UPDATE
		leave_type
		SET
		updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
		updated_on=(SELECT extract(epoch FROM now())),
		is_active= false
		WHERE
		leave_type_id = #{leaveTypeId};
	</update>
	
	<update id="editLeaveType" parameterType="com.qts.icam.model.backoffice.AcademicLeaveCategory">
		UPDATE
		leave_type
		SET
		updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
		updated_on=(SELECT extract(epoch FROM now())),
		leave_type_name = #{leaveCategoryName}
		WHERE
		leave_type_id =
		#{leaveTypeId};
	</update>
	
	<resultMap id="resultMapOfSelectLeaveType" type="com.qts.icam.model.backoffice.AcademicLeaveCategory">
		<id property="leaveTypeId" column="leave_type_id" jdbcType="INTEGER" />
		<id property="leaveCategoryName" column="leave_type_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="selectLeaveType" parameterType="com.qts.icam.model.backoffice.AcademicLeaveCategory"
		resultMap="resultMapOfSelectLeaveType">
		SELECT
		leave_type_id,
		leave_type_name
		FROM
		leave_type lt
		WHERE
		is_active = true;
	</select>
	
	<resultMap id="resultMapOfSelectlistLeaveStructure" type="com.qts.icam.model.backoffice.AcademicLeave">
		<id property="leaveCode" column="leave_structure_id" jdbcType="INTEGER" />
		<result property="leaveName" column="leave_type_name" jdbcType="VARCHAR" />
		<result property="leaveDesc" column="academic_year_name"
			jdbcType="VARCHAR" />
		<result property="leaveDuration" column="duration" jdbcType="INTEGER" />
		<result property="leaveEncashment" column="encashment"
			jdbcType="BOOLEAN" />
		<result property="leaveLimit" column="limtation" jdbcType="INTEGER" />
		<result property="leaveValidUpto" column="valid_upto" jdbcType="INTEGER" />
	</resultMap>

	<select id="selectlistLeaveStructure" parameterType="com.qts.icam.model.backoffice.AcademicLeave"
		resultMap="resultMapOfSelectlistLeaveStructure">
		SELECT
		ls.leave_structure_id,
		lt.leave_type_name,
		ay.academic_year_name,
		ls.duration,
		ls.encashment,
		ls.limtation,
		(SELECT
		to_char((SELECT to_timestamp(valid_upto)), 'DD/MM/YYYY'))as
		valid_upto
		FROM
		leave_structure ls
		JOIN
		academic_year ay ON (ls.academic_year = ay.rec_id) AND (ay.is_active = true)
		JOIN
		leave_type lt ON (ls.leave_type =
		lt.rec_id) AND (lt.is_active = true)
		WHERE
		ls.is_active = true;
	</select>
	
	<!-- ranita.sur 29062017 -->
	
	<insert id="insertLeaveStructure" parameterType="com.qts.icam.model.backoffice.AcademicLeave" statementType="CALLABLE">
		select insert_into_leave_structure
			(
				#{leaveObjectId,mode=IN, jdbcType=VARCHAR},
				#{updatedBy, mode=IN, jdbcType=VARCHAR},
				#{employeeType.employeeTypeName, mode=IN, jdbcType=VARCHAR},
				#{jobType.jobTypeName, mode=IN, jdbcType=VARCHAR},
				#{academicYear.academicYearName, mode=IN, jdbcType=VARCHAR}, 
				#{academicLeaveType.leaveCategoryName, mode=IN,jdbcType=VARCHAR},
				#{leaveDuration, mode=IN, jdbcType=INTEGER},
				#{leaveEncashment, mode=IN, jdbcType=BOOLEAN},			
				#{leaveCarryForward, mode=IN, jdbcType=BOOLEAN}
			)
	</insert>
	<!-- ,
				#{leaveEncashment, mode=IN, jdbcType=BOOLEAN},			
				#{leaveCarryForward, mode=IN, jdbcType=BOOLEAN} -->
	
	<update id="updateLeaveStructureDetails" parameterType="com.qts.icam.model.backoffice.AcademicLeave">
		UPDATE leave_structure
		   SET       
		       duration=#{leaveDuration}, 
		       encashment=#{leaveEncashment}, 
		       leave_carry_forward=#{leaveCarryForward},        
		       limitation=#{leaveLimit}
		 WHERE  
			academic_year=(SELECT rec_id FROM academic_year WHERE academic_year_name = #{academicYear.academicYearName} AND is_active = true) AND
			leave_type=(SELECT rec_id FROM leave_type WHERE leave_type_name = #{academicLeaveType.leaveCategoryName} AND is_active=true) AND
			resource_type=(SELECT rec_id FROM resource_type WHERE resource_type_code=#{employeeType.employeeTypeName} AND is_active=true) AND
			job_type=(SELECT rec_id FROM job_type WHERE job_type_name=#{jobType.jobTypeName} AND is_active=true) AND
			is_active=true;
	</update>
	
	<resultMap id="resultMapOfSelectSpecificLeaveStructure" type="com.qts.icam.model.backoffice.AcademicLeave">
		<id property="leaveCode" column="leave_structure_id" jdbcType="INTEGER" />
		<result property="leaveName" column="leave_type_name" jdbcType="VARCHAR" />
		<result property="leaveDesc" column="academic_year_name" jdbcType="VARCHAR" />
		<result property="leaveDuration" column="duration" jdbcType="INTEGER" />
		<result property="leaveEncashment" column="encashment" jdbcType="BOOLEAN" />
		<result property="leaveLimit" column="limtation" jdbcType="INTEGER" />
		<result property="leaveValidUpto" column="valid_upto" jdbcType="INTEGER" />
		<result property="leaveCarryForward" column="leave_carry_forward" jdbcType="BOOLEAN" />
	</resultMap>

	<select id="selectSpecificLeaveStructure" parameterType="com.qts.icam.model.backoffice.AcademicLeave" resultMap="resultMapOfSelectSpecificLeaveStructure">
		SELECT
			ls.leave_structure_id,
			lt.leave_type_name,
			ay.academic_year_name,
			ls.duration,
			ls.encashment,
			ls.limtation,
			(SELECT	to_char((SELECT to_timestamp(valid_upto)), 'DD/MM/YYYY'))as valid_upto,
			ls.leave_carry_forward
		FROM
			leave_structure ls
		JOIN
			academic_year ay ON (ls.academic_year = ay.rec_id) AND (ay.is_active = true)
		JOIN
			leave_type lt ON (ls.leave_type = lt.rec_id) AND (lt.is_active = true)
		WHERE
			ls.leave_structure_id = #{leaveDuration}
		AND
			ls.is_active = true;
	</select>
	
	<update id="updateLeaveStructure" parameterType="com.qts.icam.model.backoffice.AcademicLeave">
		UPDATE
			leave_structure
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			duration = #{leaveDuration},
			encashment =#{leaveEncashment},
			limtation =#{leaveLimit},
			valid_upto =(SELECT extract(epoch from (SELECT to_timestamp(#{leaveValidUpto},'DD-MM-YYYY')))),
			leave_carry_forward = #{leaveCarryForward}
		WHERE
			leave_structure_id = #{leaveTypeId}
		AND
			is_active=true;
	</update>
	
	
	
	<select id="selectStudentSubjectMappingList" resultType="com.qts.icam.model.backoffice.StudentSubjectMapping">
		SELECT
			count(DISTINCT r.roll_number) as total,
			count(DISTINCT ssm.student) as completed,			
			sec.section_code as "student.section",
			std.standard_code as "student.standard"
		FROM resource r
		LEFT JOIN student_subject_mapping ssm on(ssm.student= r.rec_id AND ssm.is_active=true)
		JOIN section sec on(r.section=sec.rec_id)
		JOIN standard std on(std.rec_id =sec.standard)
		GROUP BY section_code, standard_code;
	</select>
	
	<select id="selectStudentsInStudentSubjectMapping" parameterType="com.qts.icam.model.common.Student" resultType="com.qts.icam.model.common.Student">
		SELECT DISTINCT
			r.roll_number as rollNumber,
			r.first_name || ' ' || COALESCE(r.middle_name ,'') || ' ' || COALESCE(r.last_name ,' ') as studentName
		FROM student_subject_mapping ssm
		JOIN resource r ON(ssm.student=r.rec_id)
		JOIN section sec on(r.section=sec.rec_id)
		JOIN standard std on(std.rec_id =sec.standard)
		WHERE
			ssm.is_active=true
			AND std.standard_code=#{standard}
			AND sec.section_code=#{section}
		ORDER BY rollNumber;
	</select>
	
	<select id="selectStudentsNotInStudentSubjectMapping" parameterType="com.qts.icam.model.common.Student" resultType="com.qts.icam.model.common.Student">
		SELECT
			r.roll_number as rollNumber,
			r.first_name || ' ' || COALESCE(r.middle_name ,'') || ' ' || COALESCE(r.last_name ,' ') as studentName
		FROM resource r
		JOIN section sec on(r.section=sec.rec_id)
		JOIN standard std on(std.rec_id =sec.standard)
		WHERE r.roll_number NOT IN(
					SELECT DISTINCT
						r1.roll_number as rollNumber
					FROM student_subject_mapping ssm
					JOIN resource r1 ON(ssm.student=r1.rec_id)
					JOIN section sec1 on(r1.section=sec1.rec_id)
					JOIN standard std1 on(std1.rec_id =sec1.standard)
					WHERE
						ssm.is_active=true
						AND std1.standard_code=#{standard}
						AND sec1.section_code=#{section}
					)
		AND std.standard_code=#{standard}
		AND sec.section_code=#{section}
		ORDER BY rollNumber;
	</select>

	<resultMap id="selectStudentRollForStandardAndSectionRM" type="com.qts.icam.model.common.Standard">
		<id property="standardName" column="standard_name" jdbcType="VARCHAR" />
		<result property="section" column="section_name" jdbcType="VARCHAR" />
		<collection property="studentList" ofType="com.qts.icam.model.common.Student">
			<id property="rollNumber" column="roll_number" jdbcType="INTEGER" />
			<collection property="subjectList" ofType="com.qts.icam.model.academics.Subject">
				<id property="subjectName" column="subject_name" jdbcType="VARCHAR" />
			</collection>
		</collection>		
	</resultMap>
	<select id="selectStudentRollForStandardAndSection" resultMap="selectStudentRollForStandardAndSectionRM" parameterType="com.qts.icam.model.common.Student">
		SELECT
			st.standard_name,
			sec.section_name,
			res.roll_number,
			sub.subject_name
		FROM
			standard st
		JOIN section sec ON (sec.standard = st.rec_id) AND (sec.is_active = true)
		JOIN resource res ON (res.section = sec.rec_id) AND (res.is_active = true)
		JOIN standard_subject_mapping ssmp ON (ssmp.standard = st.rec_id) AND (ssmp.is_active = true)
		JOIN subject sub ON (ssmp.subject = sub.rec_id) AND (sub.is_active = true)
		WHERE
			st.is_active = true
		AND
			st.standard_name = #{standard}
		AND
			sec.section_name = #{section};
	</select>
	
	
	<select id="getEmployeeCompleteLeaveDetails" parameterType="com.qts.icam.model.backoffice.AcademicLeave" resultType="com.qts.icam.model.backoffice.AcademicLeave" >
		SELECT 
			 ay.academic_year_name as "academicYear.academicYearName", 
			ay.academic_year_name as "academicYear.academicYearCode",  
			jt.job_type_name as "jobType.jobTypeName", 
			jt.job_type_name as "jobType.jobTypeCode", 		
			rt.resource_type_name as "employeeType.employeeTypeName", 
			rt.resource_type_code as "employeeType.employeeTypeCOde", 
			lt.leave_type_name as "academicLeaveType.leaveCategoryName", 
			lt.leave_type_code as "academicLeaveType.leaveCategoryCode", 
			duration as leaveDuration, 
			limitation as leaveLimit,
			encashment as leaveEncashment, 
			leave_carry_forward as leaveCarryForward   
		FROM leave_structure ls 
		JOIN academic_year ay ON (ls.academic_year= ay.rec_id AND ay.is_active=true) 		
		JOIN resource_type rt ON (ls.resource_type= rt.rec_id AND rt.is_active=true)
		JOIN job_type jt ON (ls.job_type= jt.rec_id AND jt.is_active=true)
		JOIN leave_type lt ON (ls.leave_type= lt.rec_id AND lt.is_active=true)
		WHERE  ay.academic_year_name=#{academicYear.academicYearName}
		AND 
		rt.resource_type_code = #{employeeType.employeeTypeCode}
		AND
		jt.job_type_name = #{jobType.jobTypeName}
		AND 
			ls.is_active=true
	</select>
	
	<resultMap id="listUpdatedStudentSubjectMappingRM" type="com.qts.icam.model.backoffice.StudentSubjectMapping">
		<id property="status" column="status" jdbcType="VARCHAR" />
		<collection property="subjects" ofType="com.qts.icam.model.academics.Subject">
			<id property="subjectName" column="subject_name" jdbcType="VARCHAR" />
		</collection>
	</resultMap>
	<select id="listUpdatedStudentSubjectMapping" resultMap="listUpdatedStudentSubjectMappingRM" parameterType="com.qts.icam.model.common.Student">
		SELECT
			sub.subject_name,
			r.roll_number || '(' || r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,' ') || ')'  as status
		FROM student_subject_mapping ssm
		JOIN subject sub ON(ssm.subject=sub.rec_id AND sub.is_active=true)
		JOIN subject_group sg ON(sub.subject_group=sg.rec_id AND sg.is_active=true)
		JOIN resource r ON(ssm.student=r.rec_id AND r.is_active=true)
		JOIN section sec ON(r.section=sec.rec_id AND sec.is_active=true)
		JOIN standard std ON(sec.standard=std.rec_id AND std.is_active=true)
		WHERE
			ssm.is_active = true
			AND
			std.standard_code = #{standard}
			AND
			sec.section_code = #{section}
			order by
			r.roll_number, sg.subject_group_order;
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- singh.backoffice -->
	
	<insert id="insertSocialCategory" parameterType="com.qts.icam.model.common.SocialCategory">
		INSERT INTO social_category(
			rec_id, obj_id, updated_by, updated_on, date_of_creation,
			social_category_code, social_category_name, social_category_desc)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{socialCategoryCode}, #{socialCategoryName}, #{desc});
	</insert>
	
	<update id="updateSocialCategory" parameterType="com.qts.icam.model.common.SocialCategory">
		UPDATE social_category SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			updated_on=extract(epoch FROM now()),
			social_category_code=#{socialCategoryName},
			social_category_name=#{socialCategoryName},
			social_category_desc=#{desc}
		WHERE
			social_category_code=#{socialCategoryCode}
			AND
			is_active=true;
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- anup.backoffice -->
	
	<select id="selectLeave" resultType="com.qts.icam.model.erp.Leave">
		SELECT
			leave_type_id as leaveId,
			leave_type_code as leaveCode,
			leave_type_name as leaveType,
			leave_type_desc as desc
			
		FROM leave_type
		
		WHERE is_active=true
		
		ORDER BY leave_type_id;
	</select>
	
	
	<update id="updateLeave" parameterType="com.qts.icam.model.erp.Leave">
			UPDATE 
				leave_type
			SET
				updated_by =(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on = extract(epoch FROM now()),
				leave_type_name = #{leaveType}
			WHERE
				leave_type_code=#{leaveCode}
			AND
				is_active=true;
	</update>
	
	<update id="switchAcademicYear">
		UPDATE academic_year set
			updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike 'superadmin' AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='P')
		WHERE
			year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C');
		UPDATE academic_year set
			updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike 'superadmin' AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='C')
		WHERE
			year_status=(SELECT rec_id FROM status_flag WHERE status_sym ='NE');
	</update>
	
	<select id="selectFeesList" resultType="com.qts.icam.model.backoffice.Fees">
		SELECT
			fees_code as feesCode,
			fees_name as feesName,
			fees_desc as desc,
			l.ledger_code as ledger
		FROM fees f
		LEFT JOIN ledger l ON(l.rec_id=f.ledger)
		WHERE f.is_active=true;
	</select>
	
	
	<update id="feesUpdate" parameterType="com.qts.icam.model.backoffice.Fees">
			UPDATE fees SET
				updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on = extract(epoch FROM now()),
				fees_name = #{feesName}
			WHERE
				fees_code = #{feesCode}
			AND
				is_active = true
	</update>
	
	
	<select id="selectFeesTemplateList" resultType="com.qts.icam.model.backoffice.FeesTemplate">
		SELECT
			ft.fees_template_code as templateCode,
			ft.fees_template_name as templateName,
			ft.fees_template_desc as desc,
			st.standard_name as standard,
			ft.applied as applied
		FROM fees_template ft
		JOIN standard st ON(ft.standard=st.rec_id AND st.is_active=true)
		WHERE ft.is_active=true
		<if test="TemplateName != null">
			AND ft.fees_template_name ilike ('%'||#{TemplateName}||'%')
		</if>
		<if test="Standard != null">
			AND st.standard_name ilike ('%'||#{Standard}||'%')
		</if>
	</select>
	
	
	<insert id="insertFeesTemplate" parameterType="com.qts.icam.model.backoffice.FeesTemplate">
		<if test="applied == true">
			UPDATE fees_template SET
				updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
				updated_on = (SELECT extract(epoch FROM now())),
				applied = false
			WHERE
				standard = (SELECT rec_id FROM standard WHERE standard_code = #{standard} AND is_active = true)
			AND
				is_active = true;
		</if>
		INSERT INTO fees_template(
			rec_id, obj_id, updated_by, updated_on, date_of_creation, 
			fees_template_code, fees_template_name, fees_template_desc, 
			standard, applied)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{templateCode}, #{templateName}, #{desc},
			(SELECT rec_id FROM standard WHERE standard_code =#{standard} AND is_active = true),
			#{applied});
		<foreach item="fees" collection="feesList"  open="" close="" separator=";">
			<foreach item="socialCategory" collection="fees.socialCategoryList"  open="" close="" separator=";">
				INSERT INTO fees_template_details(
					rec_id, obj_id, updated_by, updated_on, date_of_creation,
					fees, social_category, amount, fees_template)
				VALUES ((select uuid_generate_v4()), #{objectId},
					(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
					(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
					(SELECT rec_id FROM fees WHERE fees_code =#{fees.feesCode} AND is_active = true),
					(SELECT rec_id FROM social_category WHERE social_category_code =#{socialCategory.socialCategoryCode} AND is_active = true),
					#{socialCategory.amount}, (SELECT rec_id FROM fees_template WHERE fees_template_code =#{templateCode} AND is_active = true));
			</foreach>
		</foreach>
	</insert>
	
	
	<resultMap id="selectFeesTemplateDetailsRM" type="com.qts.icam.model.backoffice.FeesTemplate">
		<id property="serialId" column="serialId" jdbcType="INTEGER" />
		<result property="templateCode" column="templateCode" jdbcType="VARCHAR" />
		<result property="templateName" column="templateName" jdbcType="VARCHAR" />
		<result property="standard" column="standard" jdbcType="VARCHAR" />
		<result property="applied" column="applied" jdbcType="BOOLEAN" />
		<collection property="feesList" ofType="com.qts.icam.model.backoffice.Fees">
			<id property="feesCode" column="feesCode" jdbcType="VARCHAR" />
			<result property="feesName" column="feesName" jdbcType="VARCHAR" />
			<collection property="socialCategoryList" ofType="com.qts.icam.model.common.SocialCategory">
				<id property="socialCategoryCode" column="socialCategoryCode" jdbcType="VARCHAR" />
				<result property="socialCategoryName" column="socialCategoryName" jdbcType="VARCHAR" />				
				<result property="amount" column="amount" jdbcType="DOUBLE" />
			</collection>
		</collection>
	</resultMap>
	<select id="selectFeesTemplateDetails" parameterType="java.lang.String" resultMap="selectFeesTemplateDetailsRM">
		SELECT
			ft.fees_template_id as serialId,
			ft.fees_template_code as templateCode,
			ft.fees_template_name as templateName,
			st.standard_name as standard,
			ft.applied as applied,
			f.fees_code as feesCode,
			f.fees_name as feesName,
			sc.social_category_code as socialCategoryCode,
			sc.social_category_name as socialCategoryName,
			sc.social_category_id as socialCategoryId,
			ftd.amount as amount
		FROM fees_template ft
		JOIN standard st ON(ft.standard=st.rec_id AND st.is_active=true)
		JOIN fees_template_details ftd ON(ftd.fees_template=ft.rec_id AND ftd.is_active=true)
		JOIN fees f ON(ftd.fees=f.rec_id AND f.is_active=true)
		JOIN social_category sc ON(ftd.social_category=sc.rec_id AND sc.is_active=true)
		WHERE
			fees_template_code=#{templateCode}
			AND
			ft.is_active=true
		ORDER BY social_category_id;
	</select>
	
	
	<select id="selectFeesPaidCandidate" resultType="com.qts.icam.model.common.Candidate">
		SELECT 
			form_id as admissionFormId,
			roll_number as rollNumber
		FROM 
			admission_form
		WHERE
			is_active=true
		AND
			fees_status='PAID';
	</select>
	
	<!-- modified by saif.ali 12062017 -->
	<select id="selectAllStudents" resultType="com.qts.icam.model.common.Student">
		SELECT
			scm.roll_number as roll,
			r.first_name || ' ' || COALESCE(r.middle_name ,'') || ' ' || COALESCE(r.last_name ,' ') as studentName,
			r.gender as "resource.gender",
			std.standard_name as standard,
			sec.section_name as section,
			r.mobile_no as mobileNo,
			r.email_address as strFormId,
			h.house_name as house,
			r.user_id as userId,
			rest.resident_type_name as residentType
		FROM
			resource r
		LEFT JOIN 
			student_course_mapping scm ON (r.user_id = scm.user_id AND scm.is_active= true)
		<!-- JOIN 
			course c on (scm.course = c.rec_id AND c.is_active= true) -->
		JOIN 
			section sec on (scm.section = sec.rec_id AND sec.is_active= true)
		LEFT JOIN 
			standard std ON(sec.standard = std.rec_id AND std.is_active = true)
		LEFT JOIN 
			house h ON(r.house = h.rec_id AND h.is_active = true)
		JOIN 
			resource_type rt ON(rt.rec_id = r.resource_type AND rt.is_active = true)
		<!-- LEFT JOIN 
			subject sub ON (r.second_language = sub.rec_id AND sub.is_active = true) -->
		LEFT JOIN
			resident_type rest ON (r.resident_type = rest.rec_id AND rest.is_active = true)
		WHERE 
			r.is_active=true
		AND 
			rt.resource_type_name='STUDENT'
	</select>
	
	<!-- <resultMap id="editStudentDetailsListResultMap" type="qls.sms.model.common.Resource">
		<id property="registrationId" column="registration_id" jdbcType="VARCHAR" />
		<result property="rollNumber" column="roll_no" jdbcType="VARCHAR" />
		<result property="userId" column="user_id" jdbcType="VARCHAR" />
		<result property="dateOfAdmission" column="DOA" jdbcType="VARCHAR" />
		<result property="klass" column="class_name" jdbcType="VARCHAR" />
		<result property="section" column="section_name" jdbcType="VARCHAR" />
		<result property="stream" column="stream_name" jdbcType="VARCHAR" />
		<result property="lastName" column="last_name" jdbcType="VARCHAR" />
		<result property="firstName" column="first_name" jdbcType="VARCHAR" />
		<result property="middleName" column="middle_name" jdbcType="VARCHAR" />
		<result property="userId" column="user_id" jdbcType="VARCHAR" />
		<result property="desc" column="image_name" jdbcType="VARCHAR" />
		<result property="fatherLastName" column="father_last_name"
			jdbcType="VARCHAR" />
		<result property="fatherFirstName" column="father_first_name"
			jdbcType="VARCHAR" />
		<result property="fatherMiddleName" column="father_middle_name"
			jdbcType="VARCHAR" />
		<result property="fatherOccupation" column="father_occupation"
			jdbcType="VARCHAR" />
		<result property="fatherAnnualIncome" column="father_annual_income"
			jdbcType="DOUBLE" />
		<result property="motherLastName" column="mother_last_name"
			jdbcType="VARCHAR" />
		<result property="motherFirstName" column="mother_first_name"
			jdbcType="VARCHAR" />
		<result property="motherMiddleName" column="mother_middle_name"
			jdbcType="VARCHAR" />
		<result property="motherOccupation" column="mother_occupation"
			jdbcType="VARCHAR" />
		<result property="motherAnnualIncome" column="mother_annual_income"
			jdbcType="DOUBLE" />
		<result property="dateOfBirth" column="DOB" jdbcType="VARCHAR" />
		<result property="emailId" column="email_address" jdbcType="VARCHAR" />
		<result property="mobile" column="contact_number" jdbcType="VARCHAR" />
		<result property="gender" column="gender_code" jdbcType="VARCHAR" />
		<result property="bloodGroup" column="blood_group" jdbcType="VARCHAR" />
		<result property="motherTongue" column="mother_tongue"
			jdbcType="VARCHAR" />
		<result property="category" column="category" jdbcType="VARCHAR" />
		<result property="religion" column="religion" jdbcType="VARCHAR" />
		<result property="nationality" column="nationality" jdbcType="VARCHAR" />
		<result property="optingHostel" column="opting_hostel"
			jdbcType="VARCHAR" />
		<result property="passportNo" column="passport_id" jdbcType="VARCHAR" />
		<result property="panCardNo" column="pan_no" jdbcType="VARCHAR" />
		<result property="aadharCardNo" column="aadhar_card_no"
			jdbcType="VARCHAR" />
		<result property="rationCardNo" column="ration_id" jdbcType="VARCHAR" />
		<result property="voterCardNo" column="voter_id" jdbcType="VARCHAR" />
		<result property="status" column="position_name" jdbcType="VARCHAR" />
		<result property="admissionYear" column="admission_year"
			jdbcType="VARCHAR" />
		<result property="admissionDriveNameId" column="admission_drive_name"
			jdbcType="VARCHAR" />
		<result property="admissionFromId" column="admission_form_id"
			jdbcType="VARCHAR" />
		<association property="sholarschip"
			javaType="qls.sms.model.backoffice.Scholarship">
			<id property="scholarshipAmount" column="scholarship_percent"
				jdbcType="DOUBLE" />
		</association>

	</resultMap> -->

	<select id="selectStudentDetailsEdit" parameterType="com.qts.icam.model.common.Student"
		resultType="com.qts.icam.model.common.Student">
				SELECT
		
			DISTINCT r.user_id as userId,
			to_char((SELECT to_timestamp(r.date_of_admission)), 'DD/MM/YYYY') as dateOfAdmission,
			<!-- std.standard_name as standard,
			sec.section_name as section, -->
			r.first_name || ' ' || COALESCE(r.middle_name ,'') || ' ' || COALESCE(r.last_name ,' ') as studentName,
			<!-- r.image_name as "resource.desc",  -->
			r.father_first_name as "resource.fatherFirstName",
			r.father_middle_name as "resource.fatherMiddleName",
			r.father_last_name as "resource.fatherLastName",
			r.father_annual_income as fatherIncome,
			r.mother_first_name as "resource.motherFirstName",
			r.mother_middle_name as "resource.motherMiddleName",
			r.mother_last_name as "resource.motherLastName",
			r.mother_annual_income as motherIncome,
			to_char((SELECT to_timestamp(r.date_of_birth)), 'DD/MM/YYYY') as "resource.dateOfBirth",
			r.email_address as "resource.emailId",
			r.mobile_no as "resource.mobile",
			r.gender as "resource.gender",
			r.blood_group as "resource.bloodGroup",
			r.mother_tongue as "resource.motherTongue",
			sc.social_category_name as "resource.category",
			r.religion as "resource.religion",
			r.nationality as "resource.nationality",
			h.hostel_name as house,
			sclp.scholarship_name as scholarship,
			r.previous_school as previousSchoolName,
			r.previous_school_website as previousSchoolWebsite,
			r.previous_scholl_phone as previousSchoolPhone
			
		FROM
			resource r
		<!-- JOIN 
			student_course_mapping scm ON (scm.user_id = r.user_id AND scm.is_active = true)
		JOIN 
			course c ON (scm.course = c.rec_id AND c.is_active = true)
		JOIN 
			section sec ON (scm.section = sec.rec_id AND sec.is_active = true)
		JOIN 
			standard std ON (sec.standard = std.rec_id AND std.is_active = true) -->
		LEFT JOIN
			hostel h ON(r.hostel = h.rec_id AND h.is_active = true)
		JOIN 
			social_category sc ON (sc.rec_id = r.social_category AND sc.is_active = true)
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		LEFT JOIN 
			scholarship sclp ON (r.scholarship = sclp.rec_id AND sclp.is_active = true)
		WHERE
			rt.resource_type_name = 'STUDENT'
		AND
			r.user_id= #{userId}
		AND
			r.is_active = true
		AND
		<choose>
			<when test="status != null">
				r.is_active = false;
			</when>
			<otherwise>
				r.is_active = true;
			</otherwise>
		</choose>
	</select>
	
	<!-- <select id="checkingRoomAvlStatus" resultType="java.lang.String">
		SELECT
		count(hr.bed_vacent) as hostelAvlStatus
		FROM
		"Hostel_Room" hr
		JOIN
		"Status_Flag" sf ON (hr.active = sf.rec_id)
		JOIN "Hostel" h ON
		(h.rec_id = hr.hostel) AND (h.active = sf.rec_id)
		WHERE
		sf.status_sym='A'
		AND
		hr.bed_vacent != 0
	</select> -->
	
	<!-- <resultMap id="editPresentAddressResultMap" type="qls.sms.model.common.Address">
		<id property="presentAddress1" column="address_1" jdbcType="VARCHAR" />
		<result property="presentAddress2" column="address_2" jdbcType="VARCHAR" />
		<result property="presentPin" column="postal_code" jdbcType="VARCHAR" />
		<result property="presentLandMark" column="land_mark" jdbcType="VARCHAR" />
		<result property="presentCity" column="city_name" jdbcType="VARCHAR" />
		<result property="presentState" column="state_name" jdbcType="VARCHAR" />
		<result property="presentDistrict" column="district_name"
			jdbcType="VARCHAR" />
		<result property="presentCountry" column="country_name"
			jdbcType="VARCHAR" />
		<result property="presentPoliceStation" column="police_station"
			jdbcType="VARCHAR" />
		<result property="presentPostOffice" column="post_office"
			jdbcType="VARCHAR" />
	</resultMap> -->


	<select id="selectPresentAddressEdit" parameterType="com.qts.icam.model.common.Student"
		resultType="com.qts.icam.model.common.Address">
		SELECT
			DISTINCT user_id as userId,
			a.address_line as presentAddressLine,
			a.postal_code as presentAddressPinCode,
			a.land_mark as presentAddressLandmark,
			c.city_name as presentAddressCityVillage,
			s.state_name as presentAddressState,
			d.district_name as presentAddressDistrict,
			cty.country_name as presentAddressCountry,
			a.police_station as presentAddressPoliceStation,
			a.post_office as presentAddressPostOffice
		FROM
			address a
		LEFT JOIN 
			city c ON (a.city = c.rec_id AND c.is_active = true)
		LEFT JOIN 
			state s ON (a.state = s.rec_id AND s.is_active = true)
		LEFT JOIN 
			country cty ON (a.country = cty.rec_id AND cty.is_active = true)
		LEFT JOIN 
			district d ON (a.district = d.rec_id AND d.is_active = true)
		JOIN 
			resource r ON (a.resource = r.rec_id AND r.is_active = true)
		WHERE
			a.is_active = true
		AND
			user_id = #{userId};
	</select>
	
	<!-- <resultMap id="editPermanentAddressResultMap" type="qls.sms.model.common.Address">
		<id property="permanentAddress1" column="address_1" jdbcType="VARCHAR" />
		<result property="permanentAddress2" column="address_2"
			jdbcType="VARCHAR" />
		<result property="permanentPin" column="postal_code" jdbcType="VARCHAR" />
		<result property="permanentLandMark" column="land_mark"
			jdbcType="VARCHAR" />
		<result property="permanentCity" column="city_name" jdbcType="VARCHAR" />
		<result property="permanentState" column="state_name" jdbcType="VARCHAR" />
		<result property="permanentDistrict" column="district_name"
			jdbcType="VARCHAR" />
		<result property="permanentCountry" column="country_name"
			jdbcType="VARCHAR" />
		<result property="permanentPoliceStation" column="police_station"
			jdbcType="VARCHAR" />
		<result property="permanentPostOffice" column="post_office"
			jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectPermanentAddressEdit" parameterType="com.qts.icam.model.common.Student"
		resultType="com.qts.icam.model.common.Address">
		SELECT
			DISTINCT user_id as userId,
			a.address_line as permanentAddressLine,
			a.postal_code as permanentAddressPinCode,
			a.land_mark as permanentAddressLandmark,
			c.city_name as permanentAddressCityVillage,
			s.state_name as permanentAddressState,
			d.district_name as permanentAddressDistrict,
			cty.country_name as permanentAddressCountry,
			a.police_station as permanentAddressRailwayStation,
			a.post_office as permanentAddressPostOffice
		FROM
			address a
		LEFT JOIN 
			city c ON (a.city = c.rec_id AND c.is_active = true)
		LEFT JOIN 
			state s ON (a.state = s.rec_id AND s.is_active = true)
		LEFT JOIN 
			country cty ON (a.country = cty.rec_id AND cty.is_active = true)
		LEFT JOIN 
			district d ON (a.district = d.rec_id AND d.is_active = true)
		JOIN 
			resource r ON (a.resource = r.rec_id AND r.is_active = true)
		WHERE
			a.is_active = true
		AND
			user_id = #{userId};
	</select>
	<!-- possibly in common mapper with different id -->
	<!-- <resultMap id="stateNameResultMap" type="com.qts.icam.model.common.State">
		<id property="stateName" column="state_name" jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectStates" parameterType="String" resultType="com.qts.icam.model.common.State">
		SELECT
			st.state_name as stateName
		FROM
			state st
		JOIN
			country ct ON (st.country = ct.rec_id AND ct.is_active = true)
		WHERE
			ct.country_name = #{presentCountry}
		AND
			st.is_active = true
	</select>
	
	<!-- <resultMap id="selectCountryResultMap" type="qls.sms.model.common.Country">
		<id property="countryName" column="country_name" jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectCountry" resultType="com.qts.icam.model.common.Country">
		SELECT
			c.country_name as countryName
		FROM
			country c
		WHERE
			c.is_active = true;
	</select>
	
	<!-- <resultMap id="bloodGroupResultMap" type="qls.sms.model.common.BloodGroup">
		<id property="bloodGroupName" column="blood_group_name" jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectBloodGroup" resultType="com.qts.icam.model.common.BloodGroup">
		SELECT 
			bg.blood_group_name as bloodGroupName
		FROM 
			blood_group bg
		WHERE 
			bg.is_active = true
		ORDER BY 
        	blood_group_name;
	</select>
	
	<!-- <resultMap id="socialCategoryResultMap" type="qls.sms.model.common.SocialCategory">
		<id property="socialCategory" column="social_category_name"
			jdbcType="VARCHAR" />
		<result property="socialCategoryCode" column="social_category_code"
			jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectSocialCategory" resultType="com.qts.icam.model.common.SocialCategory">
		SELECT
			sc.social_category_name as socialCategoryName,
			sc.social_category_code as socialCategoryCode
		FROM
			social_category sc
		WHERE
			sc.is_active = true;
	</select>
	
	<!-- <resultMap id="selectPreviousSchoolEditResultMap" type="qls.sms.model.common.Organization">
		<id property="organizationName" column="organization_name"
			jdbcType="VARCHAR" />
		<result property="organizationWebSite" column="organization_website"
			jdbcType="VARCHAR" />
		<result property="organizationContactNo" column="school_contact_number"
			jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectPreviousSchoolEdit" parameterType="com.qts.icam.model.common.Student"
		resultType="com.qts.icam.model.common.Student">
		SELECT
			r.previous_school as previousSchoolName,
			r.previous_school_website as previousSchoolWebsite,
			r.previous_scholl_phone as previousSchoolPhone
		FROM
			resource r
		WHERE
			r.is_active = true
		AND
			r.registration_id = #{resource.registrationId};
	</select>
	<!-- from sms -->
	
	<select id="numberOfCurrentFinancialYear" resultType="Integer">
			SELECT count(*)
			FROM 
				financial_year fy
			JOIN
				status_flag sf ON(sf.rec_id = fy.year_status)
			WHERE
				fy.is_active = true
			AND
				sf.status_sym='C'
	</select>
	
	<insert id="createNewFinancialYear" parameterType="com.qts.icam.model.common.FinancialYear">
		INSERT INTO financial_year(
            rec_id, 
            obj_id, 
            updated_by, 
            updated_on, 
            date_of_creation,
            financial_year_code, 
            financial_year_name, 
            financial_year_desc, 
            year_status, 
            session_start_date, 
            session_end_date)
    VALUES (
			(SELECT	uuid_generate_v4()), 
			#{financialYearObjectId},
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = 'true'), 
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())),
			#{financialYearCode},
			#{financialYearName},
			#{financialYearDesc},
			(SELECT rec_id FROM status_flag WHERE status_desc='CURRENT'), 
			(SELECT	extract(epoch from (SELECT to_timestamp(#{sessionStartDate},'DD-MM-YYYY')))),
			(SELECT	extract(epoch from (SELECT to_timestamp(#{sessionEndDate},'DD-MM-YYYY'))))		 
			);
		
			UPDATE income_age SET
				financial_year=(select rec_id from financial_year where
								is_active = 'true'
			 					AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
			WHERE is_active ='true';
	</insert>
	
	
	
	<update id="updateFinancialYear" parameterType="com.qts.icam.model.common.FinancialYear">
	UPDATE
		financial_year
	 SET  	
		updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active ='true'),
		updated_on = (SELECT extract(epoch FROM now())), 
		financial_year_name = #{financialYearName}      
	 WHERE 
		is_active = 'true'
	 AND
		financial_year_code = #{financialYearCode};
	</update>
	
	
	
	<resultMap id="fetchCourseListResultMap" type="com.qts.icam.model.common.Course">
		<id property="courseCode" column="course_code" jdbcType="VARCHAR" />
		<result property="courseName" column="course_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchCourseList" resultMap="fetchCourseListResultMap">
		SELECT
			cr.course_code,
			cr.course_name
		FROM
			course cr
		WHERE
			cr.is_active = 'true'
	</select>
	
	<update id="updateWorkingDaysForCheckedCloseDay" parameterType="com.qts.icam.model.backoffice.Term">
		UPDATE
		"Term_Details"
		SET
		working_days =#{noOfWorkingDays},
		updated_by=(SELECT rec_id FROM "Resource" WHERE user_id
		=#{updatedBy}AND active=(SELECT
		rec_id FROM "Status_Flag" WHERE
		status_desc='ACTIVE')),
		updated_on=(SELECT extract(epoch FROM now())),
		holiday_one=#{holiDayOne},
		holiday_two=#{holiDayTwo}
		WHERE
		term_details_code =#{termCode}
		AND
		active=(SELECT rec_id FROM
		"Status_Flag" WHERE status_desc='ACTIVE');
	</update>
	
	<insert id="insertHolidays" parameterType="com.qts.icam.model.backoffice.Holiday">
		<!-- select insert_into_holiday_details(
			#{holidayObjectId, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR},
			#{holidayCode, mode=IN, jdbcType=VARCHAR},
			#{holidayName, mode=IN, jdbcType=VARCHAR},
			#{holidayDesc, mode=IN, jdbcType=VARCHAR},
			#{specialHoliday, mode=IN, jdbcType=VARCHAR},
			#{mode, mode=IN, jdbcType=VARCHAR},
			#{compensatory, mode=IN, jdbcType=VARCHAR},
			#{termCode, mode=IN, jdbcType=VARCHAR}
		) -->
		
		INSERT INTO holiday_details(
		            rec_id, obj_id, updated_by, updated_on, date_of_creation, 
		            holiday_code, holiday_name, holiday_desc, total_workingdays, special_holiday, year, month, holiday_1, holiday_2, academic_year)
		VALUES (
			(SELECT	uuid_generate_v4()), 
			#{holidayObjectId},
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = 'true'), 
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())),
			(select 'HOLIDAY_DETAILS-' || #{month} || '-' || #{year} || ' ' || COALESCE((SELECT MAX(holiday_details_id) FROM holiday_details), 0)+1),
			(select 'HOLIDAY_DETAILS-' || #{month} || '-' || #{year} || ' ' || COALESCE((SELECT MAX(holiday_details_id) FROM holiday_details), 0)+1),
			(select 'HOLIDAY_DETAILS-' || #{month} || '-' || #{year} || ' ' || COALESCE((SELECT MAX(holiday_details_id) FROM holiday_details), 0)+1),
			#{specialHoliday}::integer, #{mode}::integer, #{compensatory}, #{month}, #{holidayOne}, #{holidayTwo}, #{year}
		);

		
	</insert>
	
	<resultMap id="resultMapOffetchTermList" type="com.qts.icam.model.backoffice.Term">
		<id property="course.courseName" column="course_name" jdbcType="VARCHAR" />
		<result property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="termName" column="term_details_name" jdbcType="VARCHAR" />
		<result property="termStartDate" column="start_date" jdbcType="VARCHAR" />
		<result property="termEndDate" column="end_date" jdbcType="VARCHAR" />
		<result property="noOfWorkingDays" column="working_days" jdbcType="INTEGER" />
		<result property="academicYear" column="academic_year_code" jdbcType="VARCHAR" />
	</resultMap>

	<select id="fetchTermList" resultMap="resultMapOffetchTermList">
		SELECT
			course_name,
			term_details_code,
			term_details_name,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY'))as start_date,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as end_date,
			working_days,
			academic_year_code
		FROM
			term_details td 
		JOIN 
			academic_year ay ON (td.academic_year = ay.rec_id AND ay.is_active = true AND ay.year_status = 
			(SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
		JOIN
			course cr ON (td.course = cr.rec_id AND cr.is_active = true)
		WHERE
			start_date is not null
		AND
			end_date is not null
		AND
			td.is_active = true;
	</select>
	
	
	<!-- <resultMap id="resultMapOffetchTermHolidaysList" type="com.qts.icam.model.backoffice.Holiday">
		<id property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="holidayDetailsId" column="holiday_details_id" jdbcType="INTEGER" />
		<result property="holidayDesc" column="holiday_desc" jdbcType="VARCHAR" />
		<result property="specialHoliday" column="special_holiday" jdbcType="VARCHAR" />
		<result property="compensatory" column="compensatory" jdbcType="VARCHAR" />
	</resultMap> -->

	<select id="fetchTotalHolidaysList" resultType="com.qts.icam.model.backoffice.Term">
		SELECT 
			holiday_code as termCode, 
			holiday_name as termName, 
			holiday_desc as termDesc, 
			special_holiday as count, 
			total_workingdays as noOfWorkingDays, 
		    academic_year as academicYear, 
		    year as termEndDate,
		    month as termStartDate, 
		    holiday_1 as holiDayOne, 
		    holiday_2 as holiDayTwo
		FROM 
			holiday_details
		WHERE 
			is_active = true;

	</select>
	
	
	<update id="updateWorkingDays" parameterType="com.qts.icam.model.backoffice.Term">
		UPDATE
			term_details
		SET
			working_days = #{noOfWorkingDays},
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy}AND is_active = true ),
			updated_on = (SELECT extract(epoch FROM now()))
		WHERE
			term_details_code = #{termCode}
		AND
			is_active = true;
	</update>
	
	<resultMap id="resultMapOffetchTermHolidays" type="com.qts.icam.model.backoffice.Holiday">
		<id property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<id property="holidayDetailsId" column="holiday_details_id" jdbcType="INTEGER" />
		<id property="holidayDesc" column="holiday_desc" jdbcType="VARCHAR" />
		<id property="specialHoliday" column="special_holiday" jdbcType="VARCHAR" />
		<id property="compensatory" column="compensatory" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchTermHolidays" parameterType="java.lang.String" resultMap="resultMapOffetchTermHolidays">
		SELECT
			term_details_code,
			holiday_details_id,
			holiday_desc,
			(SELECT to_char((SELECT to_timestamp(special_holiday)), 'DD/MM/YYYY'))as special_holiday,
			(SELECT to_char((SELECT to_timestamp(compensatory)), 'DD/MM/YYYY'))as compensatory
		FROM
			term_details td
		JOIN
			holiday_details hd ON (hd.term_details = td.rec_id AND hd.is_active = true)
		WHERE
			td.is_active = true
	</select>
	
	
	<resultMap id="resultMapOffetchclassForAttendance" type="com.qts.icam.model.common.Resource">
		<id property="klass" column="standard_name" jdbcType="VARCHAR" />
	</resultMap>


	<select id="fetchclassForAttendance" resultMap="resultMapOffetchclassForAttendance">
		SELECT
			st.standard_name
		FROM
			standard st
		WHERE
			st.is_active = true;
	</select>
	
	<!-- <resultMap id="resultMapOffetchTeacherIdForAttendance" type="com.qts.icam.model.common.StudentAttendance">
		<id property="resourceId" column="user_id" jdbcType="VARCHAR" />
		<result property="absentDay" column="date_of_absent" jdbcType="INTEGER" />
		<result property="month" column="month" jdbcType="VARCHAR" />
		<result property="year" column="year" jdbcType="VARCHAR" />
		<result property="year" column="year" jdbcType="VARCHAR" />
		<result property="attendanceDetailsId" column="attendance_details_id" jdbcType="INTEGER" />
		<result property="attendanceDesc" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchTeacherIdForAttendance" parameterType="com.qts.icam.model.common.StudentAttendance"
		resultMap="resultMapOffetchTeacherIdForAttendance">
		SELECT
			distinct r.user_id,
			(SELECT to_char((SELECT to_timestamp(date_of_absent)), 'DD/MM/YYYY'))as date_of_absent,
			ad.month,
			ad.year,
			ad.attendance_details_id,
			(SELECT to_char((SELECT to_timestamp(ad.date_of_creation)), 'DD/MM/YYYY'))as date_of_creation
		FROM 
			attendance_details ad
		JOIN 
			resource r ON (ad.resource = r.rec_id AND r.is_active = true)
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN 
			"Shift" s ON (s.active = sf.rec_id)
		AND (s.rec_id = ad.shift)
		JOIN 
			employee_details emp ON (emp.resource = r.rec_id AND erp.is_active = true)
		JOIN 
			"ERP_Shift" es ON (es.erp =
		erp.rec_id) AND (es.shift = s.rec_id) AND (es.active = sf.rec_id)
		WHERE
			ad.is_active = true
		AND
			rt.resource_type_name = #{resourceType.resourceTypeName}
		AND
		s.shift_code=
		#{workShift.workShiftCode}
		AND
			emp.is_retired = false
		AND
			ad.month = #{month}
		AND
			ad.year = #{year};
	</select> -->
	<resultMap id="resultMapOffetchTeacherIdForAttendance" type="com.qts.icam.model.common.StudentAttendance">
		<id property="resourceId" column="user_id" jdbcType="VARCHAR" />
		<result property="absentDay" column="date_of_absent" jdbcType="INTEGER" />
		<result property="month" column="month" jdbcType="VARCHAR" />
		<result property="year" column="year" jdbcType="VARCHAR" />
		<result property="attendanceDetailsId" column="attendance_details_id" jdbcType="INTEGER" />
		<result property="attendanceDesc" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchTeacherIdForAttendance" parameterType="com.qts.icam.model.common.StudentAttendance"
		resultMap="resultMapOffetchTeacherIdForAttendance">
		SELECT
				distinct r.user_id,
				(SELECT to_char((SELECT to_timestamp(date_of_absent)), 'DD/MM/YYYY'))as date_of_absent,
				td.month,
				td.year,
				td.attendance_details_id,
				(SELECT to_char((SELECT to_timestamp(td.date_of_creation)), 'DD/MM/YYYY'))as date_of_creation
		FROM 
				teacher_attendance td
		JOIN 
				resource r ON (td.resource = r.rec_id AND r.is_active = true)
		JOIN
				resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		WHERE
				td.is_active = true
		AND
				rt.resource_type_name = #{resourceType.resourceTypeName}
		AND
				td.month = #{month}
		AND
				td.year = #{year};
	</select>
	
	<select id="getTeacherDetailsForAttendance" parameterType="com.qts.icam.model.common.StudentAttendance"
		resultType="com.qts.icam.model.common.Resource">
		SELECT
			r.user_id as code,
			r.first_name as firstName,
			r.middle_name as middleName,
			r.last_name as lastName
		FROM
			resource r
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN 
			employee_details emp ON (emp.resource = r.rec_id AND emp.is_active = true)
		WHERE
			r.is_active = true
		AND
			rt.resource_type_name = #{resourceType.resourceTypeName}
		AND
			emp.is_active = true;
	</select>
	
	
	<resultMap id="resultMapOffetchCourseForAttendance" type="com.qts.icam.model.common.Course">
		<id property="courseCode" column="course_code" jdbcType="VARCHAR" />
		<result property="courseName" column="course_name" jdbcType="VARCHAR" />
		<result property="courseStartTime" column="start_time" jdbcType="VARCHAR" />
		<result property="courseEndTime" column="end_time" jdbcType="VARCHAR" />
	</resultMap>

	<select id="fetchCourseForAttendance" parameterType="java.lang.String"
		resultMap="resultMapOffetchCourseForAttendance">
		SELECT
			course_code,
			course_name,
			start_time,
			end_time
		FROM
			course co
		JOIN 
			standard st ON (co.standard = st.rec_id AND st.is_active = true)
		WHERE
			co.is_active = true
		AND
			st.standard_name = #{className};
	</select>
	
	<resultMap id="resultMapOffetchSectionForAttendance" type="com.qts.icam.model.common.Resource">
		<id property="section" column="section_name" jdbcType="VARCHAR" />
	</resultMap> 
	<select id="fetchSectionForAttendance" parameterType = "com.qts.icam.model.common.Resource" resultType = "com.qts.icam.model.common.Resource">
		SELECT
			sec.section_name as "section.sectionName"
		FROM 
			section sec
		JOIN 
			standard st ON (sec.standard = st.rec_id AND st.is_active = true)
		WHERE
			st.standard_name = #{klass}
		AND 
			sec.is_active = true;
	</select>
	
	<resultMap id="resultMapOffetchStudentIdForAttendance" type="com.qts.icam.model.common.StudentAttendance">
		<id property="studentId" column="roll_number" jdbcType="VARCHAR" />
		<result property="absentDay" column="date_of_absent" jdbcType="INTEGER" />
		<result property="month" column="month" jdbcType="VARCHAR" />
		<result property="year" column="year" jdbcType="VARCHAR" />
		<result property="attendanceDesc" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchStudentIdForAttendance" resultMap="resultMapOffetchStudentIdForAttendance">
		SELECT
				distinct scm.roll_number as roll_number,
				(SELECT to_char((SELECT to_timestamp(date_of_absent)), 'DD/MM/YYYY'))as date_of_absent,
				ad.month,
				ad.year,
				(SELECT to_char((SELECT to_timestamp(ad.date_of_creation)), 'DD/MM/YYYY'))as date_of_creation
		FROM 
				attendance_details ad
		JOIN 
				resource r ON (ad.resource = r.rec_id AND r.is_active = true)
		JOIN 
			student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true) 
		WHERE
				ad.is_active = true
		AND
				ad.month = #{month}
		AND
				ad.year = #{year};
	</select>
	
	<resultMap id="resultMapOffetchStudentsForAttendance" type="com.qts.icam.model.common.Resource">
		<id property="firstName" column="first_name" jdbcType="VARCHAR" />
		<result property="lastName" column="middle_name" jdbcType="VARCHAR" />
		<result property="middleName" column="last_name" jdbcType="VARCHAR" />
		<result property="userId" column="registration_id" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchStudentsForAttendance" parameterType="com.qts.icam.model.common.Resource"
		resultType = "com.qts.icam.model.common.Resource">
		SELECT 
			r.first_name as firstName,
			r.middle_name as middleName,
			r.last_name as lastName,
			scm.roll_number as userId
		FROM
			resource r
		JOIN
			student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true)
		JOIN 
			section sec ON(scm.section=sec.rec_id AND sec.is_active=true)
		JOIN 
			standard s ON (sec.standard = s.rec_id AND s.is_active = true)
		WHERE
			sec.section_name = #{section.sectionName}
		AND
			s.standard_name = #{klass}
		AND
			r.is_active = true;
	</select>
	
	<resultMap id="resultMapOfFetchStudentsAttendanceDateOfCreation" type="com.qts.icam.model.common.StudentAttendance">
		<id property="attendanceDesc" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchStudentsAttendanceDateOfCreation"
		parameterType="com.qts.icam.model.common.StudentAttendance" resultMap="resultMapOfFetchStudentsAttendanceDateOfCreation">
		SELECT
			distinct 
			(SELECT to_char((SELECT to_timestamp(ad.date_of_creation)), 'DD/MM/YYYY'))as date_of_creation
		FROM 
			attendance_details ad
		JOIN 
			resource r ON (ad.resource = r.rec_id AND r.is_active = true)
		WHERE
			ad.is_active = true
		AND
			ad.month=#{month}
		AND
			ad.year=#{year}
		AND
			r.roll_number = #{studentRollNo};
	</select>
	
	
	<resultMap id="resultMapOfFetchResourceAttendanceDateOfCreation" type="com.qts.icam.model.common.StudentAttendance">
		<id property="attendanceDesc" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchResourceAttendanceDateOfCreation"
		parameterType="com.qts.icam.model.common.StudentAttendance" resultMap="resultMapOfFetchResourceAttendanceDateOfCreation">
		SELECT
			(SELECT to_char((SELECT to_timestamp(ad.date_of_creation)), 'DD/MM/YYYY'))as date_of_creation
		FROM 
			attendance_details ad
		JOIN 
			resource r ON (ad.resource = r.rec_id AND r.is_active = true)
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN 
			employee_details emp ON (emp.resource = r.rec_id AND emp.is_active = true)
		WHERE
			ad.is_active = true
		AND
			rt.resource_type_name = #{resourceType.resourceTypeName}
		AND
			emp.is_retired = false
		AND
			ad.month= #{month}
		AND
			ad.year= #{year}
		AND
			r.user_id = #{resourceId};
	</select>
	
	
	<delete id="updateStudentAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		DELETE FROM
			attendance_details
		WHERE
			resource = (SELECT rec_id FROM resource WHERE roll_number = #{studentRollNo});
	</delete>
	
	
	<insert id="insertStudentAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		INSERT INTO attendance_details(
				rec_id, obj_id, updated_by, updated_on, 
				date_of_creation, date_of_absent, resource, 
				month, year)
		VALUES(
				(SELECT uuid_generate_v4()),
				#{attendanceObjectId},
				(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
				(SELECT extract (epoch FROM now())),
				(SELECT extract (epoch FROM now())),
				(SELECT extract (epoch FROM (SELECT to_timestamp(#{absentDay},'DD/MM/YYYY')))),
				(SELECT 
					r.rec_id 
				FROM 
					resource r
				JOIN 
					student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true) 
				WHERE 
					scm.roll_number = #{studentRollNo}
				AND 
					r.is_active = true),
				#{month},
				#{year});
	</insert>
	
	
	<!-- <delete id="updateTeacherAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		DELETE FROM
			attendance_details
		WHERE
			resource = (SELECT rec_id FROM resource WHERE user_id = #{resourceId});
	</delete> -->
	<delete id="updateTeacherAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		DELETE FROM
			teacher_attendance
		WHERE
			resource = (SELECT rec_id FROM resource WHERE user_id = #{resourceId});
	</delete>
	
	<!-- <insert id="insertTeacherAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		INSERT INTO attendance_details 
										(rec_id,
										obj_id,
										updated_by,
										updated_on,
										date_of_creation,
										date_of_absent,
										resource,
										month,
										year)
								VALUES 
										((SELECT uuid_generate_v4()),
										#{attendanceObjectId},
										(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
										(SELECT extract(epoch FROM now())),
										(SELECT extract(epoch FROM now())),
										(SELECT extract(epoch from (SELECT to_timestamp(#{absentDay},'DD/MM/YYYY')))),
										(SELECT r.rec_id FROM resource r
										JOIN resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
										WHERE r.is_active = true AND
										rt.resource_type_name = #{resourceType.resourceTypeName}
										AND r.user_id = #{resourceId}),
										#{month},
										#{year});
	</insert> -->
	
	<insert id="insertTeacherAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		INSERT INTO teacher_attendance 
										(rec_id,
										obj_id,
										updated_by,
										updated_on,
										date_of_creation,
										date_of_absent,
										resource,
										month,
										year)
								VALUES 
										((SELECT uuid_generate_v4()),
										#{attendanceObjectId},
										(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
										(SELECT extract(epoch FROM now())),
										(SELECT extract(epoch FROM now())),
										(SELECT extract(epoch from (SELECT to_timestamp(#{absentDay},'DD/MM/YYYY')))),
										(SELECT r.rec_id FROM resource r
										JOIN resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
										WHERE r.is_active = true AND
										rt.resource_type_name = #{resourceType.resourceTypeName}
										AND r.user_id = #{resourceId}),
										#{month},
										#{year});
	</insert>
	
	<select id="getWorkShiftListForAttendance" resultType="com.qts.icam.model.common.WorkShift">
		SELECT
		shift_code as workShiftCode,
		shift_name as workShiftName
		FROM
		"Shift" s
		JOIN "Status_Flag" sf ON (s.active = sf.rec_id)
		WHERE
		sf.status_sym='A';
	</select>
	
	
	<resultMap id="resultMapOffetchfetchTeacherAttendance" type="com.qts.icam.model.backoffice.ResourceAttendance">
		<id property="resourceId" column="user_id" jdbcType="VARCHAR" />
		<result property="attendanceDay" column="date_of_attendance" jdbcType="INTEGER" />
		<result property="month" column="month" jdbcType="VARCHAR" />
		<result property="year" column="year" jdbcType="VARCHAR" />
		<result property="attendanceDetailsId" column="attendance_details_id" jdbcType="INTEGER" />
		<result property="swipeTimeSlot" column="card_swipe_time" jdbcType="VARCHAR" />
		<result property="attendanceFlag" column="attendance_flag" jdbcType="BOOLEAN" />
	</resultMap>
	<select id="fetchTeacherAttendance" parameterType="com.qts.icam.model.backoffice.ResourceAttendance" resultMap="resultMapOffetchfetchTeacherAttendance">
		SELECT
			 r.user_id,
			(SELECT to_char((SELECT to_timestamp(date_of_attendance)), 'DD/MM/YYYY'))as date_of_attendance,
			tad.month,
			tad.year,
			tad.attendance_details_id,
			tad.card_swipe_time,
			tad.attendance_flag
		FROM 
			teacher_attendance_details tad
		JOIN 
			resource r ON (tad.resource = r.rec_id AND r.is_active = true)
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN 
			employee_details emp ON (emp.resource = r.rec_id AND emp.is_active = true)
		WHERE
			tad.is_active = true
		<!-- AND
			rt.resource_type_name = #{resourceType.resourceTypeName} -->
		AND
			emp.is_retired = false
		AND
			tad.month= #{month}
		AND
			tad.year= #{year}
		AND
			r.user_id = #{resourceId};
	</select>
	
	<select id="getLibraryPolicyRating" parameterType="com.qts.icam.model.backoffice.LibraryPolicy"
		resultType="com.qts.icam.model.backoffice.Rating">
		SELECT
			rating as rating,
			max_lending_period as maxLendingPeriod
		FROM
			library_policy_rating lpr
		JOIN
			library_policy lp ON (lp.rec_id = lpr.library_policy AND lp.is_active = true)
		JOIN
			resource_type rt ON (lp.resource_type = rt.rec_id AND rt.is_active = true)
		WHERE
			lpr.is_active = true
		AND
			rt.resource_type_name = #{resourceType.resourceTypeName};
	</select>
	
	<select id="getLibraryPolicy" parameterType="com.qts.icam.model.backoffice.LibraryPolicy"
		resultType="com.qts.icam.model.backoffice.LibraryPolicy">
		SELECT
			max_no_of_book_req as maxNoOfBookReq,
			max_no_of_books_per_req as maxNoOfBooksPerReq,
			same_book_across_req as sameBookAcrossReq,
			fine_per_day as finePerDay,
			max_fine as maxFine,
			over_due_fine as overDueFine,
			processing_fee as processingFee,
			max_book_allocated as maxNoOfBookAllocated
		FROM
			library_policy lb
		JOIN 
			resource_type rt ON (rt.rec_id = lb.resource_type)
		WHERE
			lb.is_active = true
		AND
			rt.resource_type_name = #{resourceType.resourceTypeName}
	</select>
	
	<update id="updateLibraryPolicy" parameterType="com.qts.icam.model.backoffice.LibraryPolicy">
		UPDATE
			library_policy
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = 'true'),
			updated_on=(SELECT extract(epoch FROM now())),
			max_no_of_book_req = #{maxNoOfBookReq},
			max_no_of_books_per_req = #{maxNoOfBooksPerReq},
			same_book_across_req = #{sameBookAcrossReq},
			fine_per_day = #{finePerDay},
			max_fine = #{maxFine},
			over_due_fine = #{overDueFine},
			processing_fee = #{processingFee},
			max_book_allocated = #{maxNoOfBookAllocated}
		WHERE
			is_active = true
		AND
			resource_type = (SELECT rec_id FROM resource_type WHERE resource_type_name=#{resourceType.resourceTypeName} AND is_active = true);
	</update>
	
	
	<update id="updateLibraryPolicyRating" parameterType="com.qts.icam.model.backoffice.Rating">
		UPDATE
			library_policy_rating
		SET
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now())),
			max_lending_period = #{maxLendingPeriod}
		WHERE
			rating = #{rating}
		AND
			is_active = true
		AND
		library_policy = (SELECT lp.rec_id FROM library_policy lp WHERE resource_Type = (SELECT rec_id FROM resource_type WHERE
		resource_type_name = #{resourceType.resourceTypeName}
		AND is_active = true)
		AND
		is_active = true);	

	</update>
	
	<parameterMap id="insertLibraryPolicyParameterMap" type="com.qts.icam.model.backoffice.LibraryPolicy">
		<parameter property="libraryPolicyId" jdbcType="INTEGER" mode="OUT" />
		<parameter property="libraryPolicyObjectId" jdbcType="VARCHAR" mode="IN" />
		<parameter property="updatedBy" jdbcType="VARCHAR" mode="IN" />
		<parameter property="maxNoOfBookReq" jdbcType="INTEGER" mode="IN" />
		<parameter property="maxNoOfBooksPerReq" jdbcType="INTEGER" mode="IN" />
		<parameter property="sameBookAcrossReq" jdbcType="INTEGER" mode="IN" />
		<parameter property="finePerDay" jdbcType="DOUBLE" mode="IN" />
		<parameter property="maxFine" jdbcType="DOUBLE" mode="IN" />
		<parameter property="overDueFine" jdbcType="DOUBLE" mode="IN" />
		<parameter property="processingFee" jdbcType="DOUBLE" mode="IN" />
		<parameter property="maxNoOfBookAllocated" jdbcType="INTEGER" mode="IN" />
		<parameter property="resourceType.resourceTypeName" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>

	<insert id="insertLibraryPolicy" parameterType="com.qts.icam.model.backoffice.LibraryPolicy"
		parameterMap="insertLibraryPolicyParameterMap" statementType="CALLABLE">
		{? = call insert_into_library_policy(?,?,?,?,?,?,?,?,?,?,?)}
	</insert>
	
	<insert id="insertLibraryPolicyRating" parameterType="com.qts.icam.model.backoffice.Rating">
				INSERT INTO library_policy_rating(
						rec_id,
						obj_id,
						updated_by,
						updated_on,
						date_of_creation,
						rating,
						max_lending_period,
						library_policy)
					VALUES (
						uuid_generate_v4(),
						#{ratingObjectId},
						(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active= true),
						(SELECT extract(epoch FROM now())),
						(SELECT extract(epoch FROM now())),
						#{rating},
						#{maxLendingPeriod},					
						(SELECT rec_id FROM library_policy WHERE serial_id = #{libraryPolicyId} AND is_active = true ));
	</insert>
	
	
	<select id="getRatingPolicyCount" parameterType="com.qts.icam.model.backoffice.Rating"
		resultType="com.qts.icam.model.backoffice.Rating">
		SELECT
			count (*) AS rating
		FROM
			book_rating_scheme
		WHERE
			is_active='true'
		AND
			academic_year = (SELECT rec_id FROM academic_year WHERE academic_year_code = #{academicYear} AND is_active ='true' AND year_status =(SELECT rec_id FROM status_flag WHERE status_sym='C'));


	</select>
	
	<select id="getRatingPolicy" parameterType="com.qts.icam.model.backoffice.Rating"
		resultType="com.qts.icam.model.backoffice.Rating">
		SELECT
			rating as rating,
			min_lendings_to as minLendingsTo,
			min_lendings_from as minLendingsFrom
		FROM
			book_rating_scheme
		WHERE
			is_active='true'
		AND
			academic_year = (SELECT rec_id FROM academic_year WHERE academic_year_code = #{academicYear} AND is_active ='true' AND year_status =(SELECT rec_id FROM status_flag WHERE status_sym='C'));
	</select>
	
	
	<insert id="saveRatingPolicy" parameterType="com.qts.icam.model.backoffice.Rating">
				INSERT INTO
			book_rating_scheme(
					rec_id,
					obj_id,
					updated_by,
					updated_on,
					date_of_creation,
					rating,
					min_lendings_to,
					min_lendings_from,
					academic_year)
				VALUES (
					uuid_generate_v4(),
					#{ratingObjectId},
					(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active= 'true'),
					(SELECT extract(epoch FROM now())),
					(SELECT extract(epoch FROM now())),
					#{rating},
					#{minLendingsTo},
					#{minLendingsFrom},
					(SELECT rec_id FROM academic_year WHERE academic_year_code =#{academicYear} AND is_active = 'true' AND year_status =(SELECT rec_id FROM status_flag WHERE
					status_sym='C')));
	</insert>
	
	
	<update id="updateRatingPolicy" parameterType="com.qts.icam.model.backoffice.Rating">
				UPDATE
			book_rating_scheme
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active= 'true'),
			updated_on=(SELECT extract(epoch FROM now())),
			academic_year=(SELECT rec_id FROM academic_year WHERE academic_year_code =#{academicYear} AND is_active = 'true'
			AND year_status =(SELECT rec_id FROM status_flag WHERE status_sym='C')),
			is_active='false'
			WHERE
			is_active='true'
			AND
			rating=#{rating}
			AND
			academic_year = (SELECT rec_id FROM academic_year WHERE academic_year_code =#{academicYear}AND is_active ='true'
			AND year_status =(SELECT rec_id FROM status_flag WHERE status_sym='C'));
	</update>
	
	
	<select id="getVendorPolicy" parameterType="com.qts.icam.model.backoffice.VendorRatingPolicy"
		resultType="com.qts.icam.model.backoffice.VendorRatingPolicy">
		SELECT
			max_supply_day as maxSupplyDay,
			max_no_deffects as
			maxNoDeffects
		FROM
			vendor_rating_policy vrp
		JOIN 
			vendor_type vt ON (vt.rec_id = vrp.vendor_type) AND (vt.is_active = 'true')
		WHERE
			vrp.is_active = 'true'
		AND
			vt.vendor_type_code = #{vendorType.vendorTypeCode};
	</select>
	
	<update id="updateVendorPolicy" parameterType="com.qts.icam.model.backoffice.VendorRatingPolicy">
		UPDATE
			vendor_rating_policy
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = 'true'),
			updated_on=(SELECT extract(epoch FROM now())),
			is_active='true',
			max_supply_day = #{maxSupplyDay},
			max_no_deffects = #{maxNoDeffects}
		WHERE
			is_active='true'
		AND
			vendor_type = (SELECT rec_id FROM vendor_type WHERE vendor_type_code = #{vendorType.vendorTypeCode} AND is_active= 'true');
	</update>
	
	<insert id="insertVendorPolicy" parameterType="com.qts.icam.model.backoffice.VendorRatingPolicy">
				INSERT INTO
			vendor_rating_policy(
						rec_id,
						obj_id,
						updated_by,
						updated_on,
						date_of_creation,
						max_supply_day,
						max_no_deffects,
						vendor_type)
					VALUES (
					uuid_generate_v4(),
					#{vendorRatingPolicyObjectId},
					(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active= 'true'),
					(SELECT extract(epoch FROM now())),
					(SELECT extract(epoch FROM now())),
					#{maxSupplyDay},
					#{maxNoDeffects},					
					(SELECT rec_id FROM vendor_type WHERE vendor_type_code =#{vendorType.vendorTypeCode} AND is_active = 'true' ));
						
	</insert>
	
	
	<select id="getAttendancePolicy" resultType="com.qts.icam.model.backoffice.AttendancePolicy">
		SELECT
			compensation_type as compensation,
			limitation_day as limitationOfDay,
			over_time as overTime,
			attendance_policy_id as attendancePolicyId
		FROM
			attendance_policy ap
		WHERE
			ap.is_active = 'true';
	</select>
	
	<insert id="insertAttendancePolicy" parameterType="com.qts.icam.model.backoffice.AttendancePolicy">
		INSERT INTO
			attendance_policy(
								rec_id,
								obj_id,
								updated_by,
								updated_on,
								date_of_creation,
								compensation_type,
								limitation_day,
								over_time)
							VALUES (
								uuid_generate_v4(),
								#{attendancePolicyObjectId},
								(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = 'true'),
								(SELECT extract(epoch FROM now())),
								(SELECT extract(epoch FROM now())),
								#{compensation},
								#{limitationOfDay},
								#{overTime});
	</insert>
	
	<update id="updateAttendancePolicy" parameterType="com.qts.icam.model.backoffice.AttendancePolicy">
		UPDATE
			attendance_policy
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active= 'true'),
			updated_on=(SELECT extract(epoch FROM now())),
			is_active = 'false'
		WHERE
			attendance_policy_id = #{attendancePolicyId};
	</update>
	
	<select id="getExamPolicy" resultType="com.qts.icam.model.backoffice.Exam">
		SELECT
			change_day as
			changeDay
		FROM
			exam_policy ep
		WHERE
			ep.is_active = 'true';
	</select>
	
	
	<insert id="insertExamPolicy" parameterType="com.qts.icam.model.backoffice.Exam">
		INSERT INTO
			exam_policy(
						rec_id,
						obj_id,
						updated_by,
						updated_on,
						date_of_creation,
						change_day)
				VALUES (
						uuid_generate_v4(),
						#{objectId},
						(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active ='true'),
						(SELECT extract(epoch FROM now())),
						(SELECT extract(epoch FROM now())),
						#{changeDay});
	</insert>
	
	
	<update id="updateExamPolicy" parameterType="com.qts.icam.model.backoffice.Exam">
		UPDATE
			exam_policy
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = 'true'),
			updated_on=(SELECT extract(epoch FROM now())),
			change_day = #{changeDay}
		WHERE
			is_active = 'true';
	</update>
	
	<select id="getCurrentAcademicYear" resultType="com.qts.icam.model.common.AcademicYear">
		SELECT
			academic_year_code as academicYearCode,
			academic_year_name as academicYearName
		FROM
			academic_year ay
		JOIN 
			status_flag sf ON (sf.rec_id = ay.year_status)
		WHERE
			ay.is_active = 'true'
		AND
			sf.status_sym='C'
	</select>
	
	
	<!-- <select id="getAllExamType" resultType="com.qts.icam.model.backoffice.Exam">
		SELECT
		exam_type_code as
		examTypeCode,
		exam_type_name as examTypeName
		FROM
		"Exam_Type" et
		JOIN
		"Status_Flag" sf ON (sf.rec_id=et.active)
		WHERE
		sf.status_sym='A'
	</select> -->
	
	<select id="getCourseInClass" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Course">
		SELECT
			course_code as courseCode,
			course_name as courseName
		FROM
			course co
		JOIN 
			standard st ON (co.standard = st.rec_id AND st.is_active = true)
		WHERE
			co.is_active = true
		AND
			st.standard_code=#{classCode};
	</select>
	
	
	<select id="getTermForCourse" parameterType="java.lang.String"
		resultType="com.qts.icam.model.backoffice.Term">
		SELECT
		term_details_code as termCode,
		term_details_name as termName
		FROM
		"Term_Details" td
		JOIN "Status_Flag" sf ON (sf.rec_id=td.active)
		JOIN "Course" c ON
		(td.course=c.rec_id AND sf.rec_id=c.active)
		JOIN "Academic_Year" ay ON
		(ay.rec_id=td.academic_year AND sf.rec_id=ay.active)
		JOIN "Status_Flag"
		sf2 ON (sf2.rec_id=ay.year_status)
		WHERE
		c.course_code=#{courseCode}
		AND
		sf.status_sym='A'
		AND
		sf2.status_sym='CY'
	</select>
	
	<select id="getExamsForTermCourseAndExamType" parameterType="com.qts.icam.model.backoffice.Exam"
		resultType="com.qts.icam.model.backoffice.Exam">
		SELECT 
			exam_code as examCode, 
			exam_name as examName
		FROM 
			user_defined_exams ude 
		JOIN 
			user_exam_course_mapping uecm ON (ude.rec_id = uecm.user_defined_exams AND uecm.is_active = true)
		JOIN 
			course c ON (uecm.course = c.rec_id AND c.is_active = true)
		JOIN 
			standard s ON (c.standard = s.rec_id AND s.is_active = true)
		WHERE 
			c.course_code = #{courseCode}
		AND
			s.standard_code = #{standardCode}
		AND 
			ude.is_active = true	
	</select>
	
	
	<select id="getSectionForClassAndStream" parameterType="com.qts.icam.model.common.Class"
		resultType="com.qts.icam.model.common.Section">
		SELECT
			s.section_code as sectionCode,
			s.section_name as sectionName
		FROM
			section s
		JOIN
			standard st ON (s.standard = st.rec_id AND st.is_active = true)
		WHERE
			st.standard_code = #{classCode}
		AND
			s.is_active = true
	</select>
	
	<select id="getStudentForClassStreamSectionAndCourse"
		parameterType="com.qts.icam.model.common.Resource" resultType="com.qts.icam.model.common.Resource">
		SELECT
			r.roll_number as userId,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || r.last_name as resourceName
		FROM 
			resource r
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN 
			section sec ON (sec.rec_id = r.section AND sec.is_active = true)
		JOIN 
			standard st ON (st.rec_id = sec.standard AND st.is_active = true)
		JOIN 
			course cr ON (cr.standard = st.rec_id AND cr.is_active = true)
		WHERE 
			standard_code = #{klass}
		AND 
			course_code = #{code}
		AND 
			section_code = #{section.sectionCode}
		AND 
			resource_type_code = 'STUDENT'
		AND 
			r.is_active = true	
	</select>
	
	
	<select id="readBookDataToGenerateQRCode" resultType="com.qts.icam.model.common.BookForQRCode">
		SELECT
			bi.book_individual_code as bookIndividualCode,
			bi.book_common_code as bookCommonCode,
			bi.price as price,
			b.book_name as bookName,
			(SELECT to_char((SELECT to_timestamp(bi.book_entry_date)), 'DD/MM/YYYY')) as bookEntryDate,
			bp.book_publisher_name as bookPublisherName,
			b.book_isbn as bookIsbn,
			bm.book_medium_name as bookMediumName,
			b.book_edition as bookEdition,
			bl.book_language_name as bookLanguageName
		FROM
			book_id bi	
		JOIN 
			book b ON(b.book_code = bi.book_common_code AND b.is_active = 'true')		
		JOIN 
			book_publisher bp ON(b.book_publisher = bp.rec_id AND bp.is_active = 'true')
		JOIN 
			book_medium bm ON(b.book_medium = bm.rec_id AND bm.is_active = 'true')
		JOIN 
			book_language bl ON(b.book_language = bl.rec_id AND bl.is_active = 'true')
		WHERE
			qr_code = 'false'
		AND
			bi.is_active = 'true';
	</select>
	
	
	<select id="readBookAuthorListForQr" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			a.author_full_name as authorList
		FROM
			book b
		JOIN 
			book_author ba ON (b.rec_id = ba.book AND ba.is_active = 'true')
		JOIN 
			author a ON (a.rec_id = ba.author AND a.is_active = 'true')
		WHERE
			b.is_active = 'true'
		AND
			b.book_code = #{bookCode}
	</select>
	
	<update id="updateBookIdForQRCode" parameterType="java.lang.String" >
		UPDATE "Book_Id" SET qr_code=true WHERE book_individual_code=#{bookIndividualCode};
	</update>
	
	<select id="readStudentDataToGenerateQRCode" resultType="com.qts.icam.model.common.StudentForQRCode">
		SELECT
			<!-- r1.registration_id as registrationId, -->
			r.roll_number as rollNumber,
			st.standard_name as klass,
			s.section_name as section,
			<!-- str.stream_name as stream, -->
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || r.last_name as name,
			r.father_first_name || ' ' || COALESCE(r.father_middle_name,' ') || ' ' || r.father_last_name as fathersName,
			r.mother_first_name || ' ' || COALESCE(r.mother_middle_name,' ') || ' ' || r.mother_last_name as motherName,
			to_char((SELECT to_timestamp(r.date_of_birth)), 'DD/MM/YYYY') as dateOfBirth,
			r.email_address as emailAdress,
			r.mobile_no as contactNumber,
			r.gender as gender,
			r.blood_group as bloodGroup,
			co.course_name as course
		FROM
			resource r
		JOIN 
			section s ON (r.section = s.rec_id AND s.is_active = 'true')
		JOIN 
			standard st ON (st.rec_id = s.standard AND st.is_active = 'true')
		<!-- JOIN "Stream" str ON (sf.rec_id = str.active)
		JOIN "Social_Category" sc ON (sc.rec_id = r1.category AND sf.rec_id = sc.active)
		JOIN "Class_Stream_Mapping" csm ON (csm.class = c.rec_id) AND (csm.stream = str.rec_id) AND (csm.active = sf.rec_id)
		JOIN "Section"s ON (csm.rec_id = s.class_stream_mapping) AND (r1.section = s.rec_id) AND (sf.rec_id = s.active)
		LEFT JOIN "Resource"r2 ON (r1.father_name = r2.rec_id) AND (sf.rec_id =	r2.active)
		LEFT JOIN "Resource"r3 ON (r1.mother_name = r3.rec_id) AND (sf.rec_id =	r3.active) -->
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = 'true')
		<!-- LEFT JOIN "Scholarship" sclp ON (r1.rec_id = sclp.registration_id) AND (sf.rec_id = sclp.active) -->
		LEFT JOIN course co ON (co.standard = st.rec_id AND co.is_active = 'true')
		WHERE
			rt.resource_type_name = 'STUDENT'
		AND		
			r.is_active = 'true';

		
	</select>
	
	<select id="readTeacherDataToGenerateQRCode" resultType="com.qts.icam.model.common.TeacherForQRCode">
		SELECT
			r.user_id as userId,	
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || r.last_name as name,	
			r.gender as gender,
			to_char((SELECT to_timestamp(r.date_of_birth)), 'DD/MM/YYYY') as dateOfBirth,
			d.designation_name as designation,	
			r.blood_group as bloodGroup,	
			r.mobile_no as mobile,
			r.email_address as emailId				
		FROM
			resource r
		JOIN 
			employee_details ed ON (ed.resource = r.rec_id AND ed.is_active = 'true')	
		JOIN 
			designation d ON (ed.designation = d.rec_id AND d.is_active = 'true')		
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = 'true')
		<!-- JOIN 
			department dpt ON (r.department = dpt.rec_id AND dpt.is_active = 'true') -->
		WHERE
			rt.resource_type_name = 'TEACHING STAFF'
		AND
			r.is_active = true;
	</select>
	
	<select id="getClassNameAndCodeList" resultType="com.qts.icam.model.common.Standard">
		SELECT
			s.standard_code as standardCode,
			s.standard_name as standardName
		FROM
			standard s
		WHERE
			s.is_active = true;
	</select>
	
	
	<select id="getSectionAgainstClassAndStream" resultType="com.qts.icam.model.common.Section"
		parameterType="com.qts.icam.model.common.Section">
		SELECT
			sec.section_code as sectionCode,
			sec.section_name as sectionName
		FROM
			section sec
		JOIN 
			standard s ON (sec.standard = s.rec_id AND s.is_active = true)
		WHERE
			s.standard_name = #{klass}
		AND
			sec.is_active = true;
	</select>
	
	<select id="getResourceAgainstSection" resultType="com.qts.icam.model.common.Resource" parameterType="com.qts.icam.model.common.Resource">
		SELECT
			r.registration_id as registrationId,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || r.last_name || '(' || r.user_id || ')' as name
		FROM
			"Resource" r
		JOIN 
			"Status_Flag" sf ON (sf.rec_id = r.active)
		JOIN
			"Section" s ON (s.rec_id = r.section) AND (sf.rec_id = s.active)
		JOIN
			"Course" co ON (co.rec_id = r.course) AND (sf.rec_id = co.active)
		WHERE
			s.section_code=#{section}
		AND
			co.course_code = #{courseName}
		AND
			sf.status_sym='A';
	</select>
	
	<select id="checkWheatherFeesPaid" resultType="com.qts.icam.model.common.SessionFees"
		parameterType="com.qts.icam.model.common.SessionFees">
		SELECT
		tot_amount as netTotAmount,
		tot_amount_paid as
		payingAmount
		FROM
		"Student_Fees_Paid" sfp
		JOIN "Status_Flag" sf ON
		(sf.rec_id=sfp.active)
		JOIN
		"Academic_Year" ay ON (ay.rec_id =
		sfp.academic_year) AND
		(sf.rec_id=ay.active)
		JOIN "Resource" r ON
		(r.rec_id = sfp.student_id)
		AND (sf.rec_id=r.active)
		WHERE
		ay.academic_year_code=#{academicSsession}
		AND
		r.registration_id=#{registrationId}
		AND
		sf.status_sym='A'
	</select>
	
	<insert id="grantTC" parameterType="com.qts.icam.model.common.StudentTc">
		INSERT INTO "Student_TC"(
		rec_id, obj_id, updated_by, updated_on, date_of_creation, active,
		registration_id, name, class, stream, section, session, reason)
		VALUES
		((SELECT uuid_generate_v4()),
		#{objectId}, (SELECT rec_id FROM "Resource" WHERE user_id =#{updatedBy} AND
		active=(SELECT rec_id FROM "Status_Flag" WHERE status_desc='ACTIVE')),
		(SELECT extract(epoch FROM now())), (SELECT extract(epoch FROM
		now())), (SELECT rec_id FROM "Status_Flag" WHERE
		status_desc='ACTIVE'),
		#{registrationId}, (SELECT first_name || ' ' || middle_name || ' ' || last_name FROM
		"Resource" WHERE registration_id =#{registrationId}),
		(SELECT class_name FROM "Class" WHERE class_code =#{className}), (SELECT
		stream_name FROM "Stream" WHERE stream_code =#{streamName}),
		(SELECT section_name FROM "Section" WHERE section_code =#{section}),
		#{academicSsession}, #{tcCause});

		UPDATE "Resource" SET
		updated_by=(SELECT rec_id FROM "Resource" WHERE user_id=#{updatedBy} AND active=(SELECT
		rec_id FROM "Status_Flag" WHERE status_desc='ACTIVE')),
		updated_on=(SELECT extract(epoch FROM now())),
		active=(SELECT rec_id FROM "Status_Flag" WHERE status_sym='IA')
		WHERE
		registration_id =#{registrationId};

	</insert>
	
	<select id="getBookIdForQrCode" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			bi.book_individual_code as bookList
		FROM
			book_id bi
		WHERE
			bi.book_individual_code ilike (#{strQuery}||'%')
		AND
			bi.is_active = true;
	</select>
	
	<resultMap id="resultMapOffetchSelectiveTerm" type="com.qts.icam.model.backoffice.Term">
		<id property="termName" column="term_details_name" jdbcType="VARCHAR" />
		<result property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="termStartDate" column="start_date" jdbcType="INTEGER" />
		<result property="termEndDate" column="end_date" jdbcType="INTEGER" />
		<result property="noOfWorkingDays" column="working_days" jdbcType="INTEGER" />
		<result property="academicYear" column="academic_year_code" jdbcType="VARCHAR" />
		<result property="holiDayOne" column="holiday_one" jdbcType="VARCHAR" />
		<result property="holiDayTwo" column="holiday_two" jdbcType="VARCHAR" />
	</resultMap>

	<select id="fetchSelectiveTerm" parameterType="com.qts.icam.model.backoffice.Term" resultMap="resultMapOffetchSelectiveTerm">
		SELECT
			term_details_name,
			term_details_code,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY'))as start_date,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD/MM/YYYY')) as end_date,
			working_days,
			academic_year_code,
			holiday_one,
			holiday_two
		FROM
			term_details td 
		JOIN 
			academic_year ay ON (td.academic_year = ay.rec_id AND ay.is_active = true
		AND
			ay.year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
		WHERE
			td.term_details_code = #{termCode}
		AND
			td.is_active = true;
	</select>
	
	<resultMap id="resultMapOfCountPublicHoli" type="com.qts.icam.model.backoffice.Term">
		<id property="termDetailsId" column="count" jdbcType="INTEGER" />
	</resultMap>

	<select id="countPublicHoli" parameterType="com.qts.icam.model.backoffice.Term" resultMap="resultMapOfCountPublicHoli">
		SELECT
			COUNT(hd.holiday_details_id) as count
		FROM
			term_details td
		JOIN 
			academic_year ay ON (td.academic_year = ay.rec_id AND ay.is_active = true
		AND
			ay.year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C'))
		JOIN 
			holiday_details hd ON (td.rec_id = hd.term_details AND hd.is_active = true)
		WHERE
			td.term_details_code = #{termCode}
		AND
			td.is_active = true;
	</select>
	
	<resultMap id="resultMapOfCountCompensatoryHoli" type="com.qts.icam.model.backoffice.Term">
		<id property="count" column="count_compensatory" jdbcType="INTEGER" />
	</resultMap>

	<select id="countCompensatoryHoli" parameterType="com.qts.icam.model.backoffice.Term" resultMap="resultMapOfCountCompensatoryHoli">
		SELECT
			COUNT(hd.compensatory) as count_compensatory
		FROM
			term_details td
		JOIN
			academic_year ay ON (td.academic_year = ay.rec_id AND ay.is_active = 'true')
		AND
			ay.year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C')
		JOIN 
			holiday_details hd ON (td.rec_id = hd.term_details AND hd.is_active = 'true')
		WHERE
			td.term_details_code = #{termCode}
		AND
			td.is_active = 'true';
	</select>
	
	<resultMap id="fetchTermListForClassResultMap" type="com.qts.icam.model.backoffice.Term">
		<id property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="termName" column="term_details_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchTermListForClass" parameterType="java.lang.String" resultMap="fetchTermListForClassResultMap">
		SELECT
			td.term_details_code,
			td.term_details_name
		FROM
			term_details td
		JOIN 
			course cr ON (cr.is_active = 'true' AND td.course = cr.rec_id)
		WHERE
			td.is_active = 'true'	
		AND
			cr.course_code = #{courseCode};
	</select>
	
	<select id="selectScholarshipList" resultType="com.qts.icam.model.common.Scholarship">
		SELECT
			scholarship_id as scholarshipId,
			scholarship_code as scholarshipCode,
			scholarship_name as scholarshipName,
			concession as concession,
			concession_unit as concessionUnit
		FROM scholarship
		WHERE is_active=true;
	</select>
	
	<insert id="insertScholarship" parameterType="com.qts.icam.model.common.Scholarship">
		INSERT INTO scholarship(
			rec_id, obj_id, updated_by, updated_on, date_of_creation, 
			scholarship_code, scholarship_name, scholarship_desc, 
			concession, concession_unit)
		VALUES ((select uuid_generate_v4()), #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{scholarshipCode}, #{scholarshipName}, #{desc}, #{concession}, #{concessionUnit});
	</insert>
	
	<update id="updateScholarship" parameterType="com.qts.icam.model.common.Scholarship">
			UPDATE
				scholarship 
			SET
				updated_by =(SELECT rec_id FROM resource WHERE user_id ilike #{updatedBy} AND is_active = true),
				updated_on=extract(epoch FROM now()),
				scholarship_code=#{scholarshipCode},
				scholarship_name=#{scholarshipName},
				scholarship_desc=#{desc},
				concession=#{concession},
				concession_unit=#{concessionUnit}
			WHERE
				scholarship_code=#{scholarshipCode}
				AND
				is_active=true
	</update>
	
	<resultMap id="resultMapOfTerm" type="com.qts.icam.model.backoffice.Term">
		<id property="termDetailsId" column="term_details_id" jdbcType="INTEGER" />
		<result property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="termName" column="term_details_name" jdbcType="VARCHAR" />
		<result property="termStartDate" column="start_date" jdbcType="VARCHAR" />
		<result property="termEndDate" column="end_date" jdbcType="VARCHAR" />
		<result property="course.courseName" column="course_name" jdbcType="VARCHAR" />
		<result property="classObj" column="standard_name" jdbcType="VARCHAR" />
		<result property="dateOfCreation" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>

	<select id="selectTerm" resultMap="resultMapOfTerm">
		SELECT
			td.term_details_id,
			td.term_details_code,
			td.term_details_name,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD-MM-YYYY')) as start_date,
			(SELECT to_char((SELECT to_timestamp(end_date)), 'DD-MM-YYYY')) as end_date,
			cr.course_name,
			st.standard_name,
			(SELECT to_char((SELECT to_timestamp(td.date_of_creation)), 'DD-MM-YYYY')) as date_of_creation
		FROM
			term_details td
		JOIN
			course cr ON(cr.rec_id = td.course AND cr.is_active = true)
		JOIN
			standard st ON(st.rec_id = cr.standard AND st.is_active = true)
		WHERE
			td.is_active = true;
	</select>
	
	<insert id="insertAcademicTerm" parameterType="com.qts.icam.model.backoffice.Term">
		INSERT INTO term_details(
									rec_id,
									obj_id,
									updated_by,
									updated_on,
									date_of_creation,
									term_details_code,
									term_details_name,
									term_details_desc,
									working_days,
									academic_year,
									course,
									start_date,
									end_date
								)
						VALUES (
									(SELECT uuid_generate_v4()),
									#{termObjectId},
									(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
									(SELECT extract(epoch FROM now())),
									(SELECT extract(epoch FROM now())),
									(SELECT ('TD-'||(select COALESCE((SELECT MAX(term_details_id) FROM term_details),0 )+1))),
									#{termName},
									#{termDesc},
									(select (SELECT to_char((SELECT to_timestamp(#{termEndDate}, 'DD-MM-YYYY')),'YYYY-MM-DD'))::
									date - (SELECT to_char((SELECT to_timestamp(#{termStartDate}, 'DD-MM-YYYY')),'YYYY-MM-DD')):: date),
									(SELECT rec_id FROM academic_year WHERE academic_year_code = #{academicYear} 
									AND is_active = true AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym='C')),
									(SELECT rec_id FROM course WHERE course_name = #{course.courseName} 
									AND is_active = true AND standard =(SELECT rec_id FROM standard WHERE
									standard_name = #{classObj})),
									(SELECT extract(epoch from (SELECT to_timestamp(#{termStartDate},'DD-MM-YYYY')))),
									(SELECT extract(epoch from (SELECT to_timestamp(#{termEndDate},'DD-MM-YYYY'))))
								);
	</insert>
	
	
	<update id="updateAcademicTerm" parameterType="com.qts.icam.model.backoffice.Term">
		UPDATE
			term_details
		SET
			updated_by =(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			term_details_name = #{termName},
			term_details_desc = #{termName},
			start_date = (SELECT extract(epoch from (SELECT to_timestamp(#{termStartDate},'DD-MM-YYYY')))),
			end_date = (SELECT extract(epoch from (SELECT to_timestamp(#{termEndDate},'DD-MM-YYYY')))),
			working_days = (select (SELECT to_char((SELECT to_timestamp(#{termEndDate},
			'DD-MM-YYYY')),'YYYY-MM-DD'))::date - (SELECT to_char((SELECT
			to_timestamp(#{termStartDate}, 'DD-MM-YYYY')),'YYYY-MM-DD'))::date)
		WHERE
			term_details_id = #{termDetailsId}
		AND
			is_active = true;
	</update>
	
	
	<resultMap id="resultMapOffetchSelectiveTermforupdate" type="com.qts.icam.model.backoffice.Term">
		<id property="termName" column="term_details_name" jdbcType="VARCHAR" />
		<result property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="termStartDate" column="start_date" jdbcType="INTEGER" />
		<result property="termEndDate" column="end_date" jdbcType="INTEGER" />
		<result property="noOfWorkingDays" column="working_days" jdbcType="INTEGER" />
		<result property="academicYear" column="academic_year_code" jdbcType="VARCHAR" />
	</resultMap>

	<select id="fetchSelectiveTermforupdate" parameterType="com.qts.icam.model.backoffice.Term"
		resultMap="resultMapOffetchSelectiveTermforupdate">
		SELECT
			td.term_details_name,
			td.term_details_code,
			(SELECT to_char((SELECT to_timestamp(start_date)), 'DD/MM/YYYY'))as start_date,
			(SELECT to_char((SELECT to_timestamp(td.end_date)), 'DD/MM/YYYY')) as end_date,
			td.working_days,
			academic_year_code
		FROM
			term_details td 
		JOIN 
			academic_year ay ON (td.academic_year = ay.rec_id) WHERE td.term_details_code =#{termCode}
		AND
			ay.is_active = true  AND ay.year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C')
		AND
			td.is_active = true;
	</select>
	
	
	<resultMap id="resultMapOffetchHolidayListbyId" type="com.qts.icam.model.backoffice.Holiday">
		<id property="termCode" column="term_details_code" jdbcType="VARCHAR" />
		<result property="holidayDetailsId" column="holiday_details_id" jdbcType="INTEGER" />
		<result property="holidayDesc" column="holiday_desc" jdbcType="VARCHAR" />
		<result property="specialHoliday" column="special_holiday" jdbcType="VARCHAR" />
		<result property="compensatory" column="compensatory" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchHolidaybyId" parameterType="java.lang.String" resultMap="resultMapOffetchHolidayListbyId">
		SELECT
			term_details_code,
			holiday_details_id,
			holiday_desc,
			(SELECT to_char((SELECT to_timestamp(special_holiday)), 'DD/MM/YYYY'))as special_holiday ,
			(SELECT to_char((SELECT to_timestamp(compensatory)), 'DD/MM/YYYY'))as compensatory
		FROM
			term_details td
		JOIN
			holiday_details hd ON (hd.term_details = td.rec_id) WHERE holiday_details_id = #{holidayDetailsId} AND td.is_active = true 
		AND 
			hd.is_active = true;
	</select>
	
	
	<resultMap id="getListClassForTermCreationRM" type="com.qts.icam.model.common.Standard">
		<id property="standardCode" column="standard_code" jdbcType="VARCHAR" />
		<result property="standardName" column="standard_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="getListClassForTermCreation" parameterType="java.lang.String" resultMap="getListClassForTermCreationRM">
		SELECT
			st.standard_code,
			st.standard_name
		FROM
			standard st
		JOIN 
			teaching_level tl ON (st.teaching_level = tl.rec_id AND tl.is_active = true);		
	</select>
	
	
	<resultMap id="getCourseForTermCreationRM" type="com.qts.icam.model.common.Course">
		<id property="courseCode" column="rec_id" jdbcType="VARCHAR" />
		<result property="courseName" column="course_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="getCourseForTermCreation" parameterType="com.qts.icam.model.common.Standard" resultMap="getCourseForTermCreationRM">
		SELECT
			cr.rec_id,
			cr.course_name
		FROM
			course cr
		JOIN 
			standard st ON (cr.standard = st.rec_id AND st.is_active = true)
		WHERE
			cr.standard = (SELECT rec_id FROM standard WHERE standard_name = #{standardName})
	</select>
	
	<!-- modified by sourav.bhadra on 21-07-2017 -->
	<update id="updateHoliDays" parameterType="com.qts.icam.model.backoffice.Holiday">
		UPDATE 
			holiday_special_details
		SET 
			updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true), 
			updated_on = (SELECT extract(epoch FROM now())), 
			holiday_date = (SELECT extract(epoch from (SELECT to_timestamp(#{specialHoliday},'DD/MM/YYYY'))))
		WHERE 
			special_holiday_code = #{holidayCode}
		AND
			month = #{month}
		AND
			year = #{year}
		AND
			is_active = true;

	</update>
	
	
	<insert id="insertIntoNoticeBoard" parameterType="com.qts.icam.model.common.NoticeBoard">
		INSERT INTO notice_board(
		rec_id, obj_id, updated_by, updated_on, date_of_creation,
		is_active, notice_board_code, notice_board_subject, notice_board_desc)
		VALUES (
		uuid_generate_v4(),
		#{noticeObjId},
		(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true),
		extract(epoch FROM now()),
		extract(epoch FROM now()),
		true,
		(SELECT ('NOTICE-' ||(select COALESCE((SELECT MAX(notice_board_id) FROM
		notice_board), 0 )+1))),
		#{noticeName},
		#{noticeDesc}
		)
	</insert>

	<delete id="deleteNotice" parameterType="com.qts.icam.model.common.NoticeBoard">
		UPDATE notice_board
		SET updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active=true),
		updated_on=(SELECT extract(epoch FROM now())),
		is_active=false
		WHERE
		notice_board_code = #{noticeCode}
	</delete>

	<select id="viewNotice" parameterType="com.qts.icam.model.common.NoticeBoard"
		resultType="com.qts.icam.model.common.NoticeBoard">
		SELECT
		notice_board_code as noticeCode, notice_board_subject as noticeName, notice_board_desc
		as noticeDesc
		FROM
		notice_board
		WHERE
		notice_board_code=#{noticeCode}
		AND
		is_active=true;
	</select>
	
	<update id="updateNotice" parameterType="com.qts.icam.model.common.NoticeBoard">
		UPDATE notice_board
		SET updated_by=(SELECT rec_id FROM resource WHERE
		user_id=#{updatedBy} AND is_active=true),
		updated_on=(SELECT extract(epoch FROM now())),
		notice_board_subject=#{noticeName},
		notice_board_desc=#{noticeDesc}
		WHERE
		notice_board_code = #{noticeCode}
	</update>
	
	
<!-- FOR TIMETABLE BY SAIKAT DAS -->

	<select id="getTeacherList" resultType="com.qts.icam.model.common.Resource" >
		SELECT 
	       		r.user_id as userId,
	       		r.first_name || ' ' || COALESCE(r.middle_name,'') || ' ' || COALESCE(r.last_name,'') as teacherName
	  	FROM 
			resource r
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)		
	 	WHERE
			resource_type = (SELECT rec_id FROM resource_type WHERE resource_type_name = 'TEACHING STAFF' AND is_active = true)
		AND		
			r.is_active = true
	</select>	
	
	<select id="getStandardList" resultType="com.qts.icam.model.common.Standard" >
		SELECT 
       		sec.section_code as section,
       		s.standard_name as standardName
	  	FROM
			section sec
		JOIN 
			standard s ON (sec.standard = s.rec_id AND s.is_active = true )
	 	WHERE	
			sec.is_active = true
		ORDER BY 
			standard_name,section_code
	</select>
	
	<select id="getSubjectList" resultType="com.qts.icam.model.academics.Subject" >
		SELECT 
       		subject_name as subjectName
       	FROM 
			school_time_table_subjects
	</select>
	
	<select id="getAllGridDataList" resultType="com.qts.icam.model.backoffice.TimeTableGridData" >
		SELECT 
       		cell_id as gridId,
       		cell_data as gridData
       	FROM 
			school_time_table_grid
	</select>
	
	<select id="getGridData" parameterType="com.qts.icam.model.backoffice.TimeTableGridData"
								resultType="com.qts.icam.model.backoffice.TimeTableGridData">
		SELECT 
       		cell_id as gridId,
       		cell_data as gridData
       	FROM 
			school_time_table_grid
		WHERE
		    cell_id = #{gridId}
	</select>
	
	<insert id="insertGridData" parameterType="com.qts.icam.model.backoffice.TimeTableGridData">
		INSERT INTO school_time_table_grid(
	            rec_id, cell_id, cell_data)
	    VALUES ((select uuid_generate_v4()), #{gridId}, #{gridData});
	</insert>
	
	<insert id="updateGridData" parameterType="com.qts.icam.model.backoffice.TimeTableGridData">
		UPDATE
				school_time_table_grid 
			SET
				cell_data=#{gridData}
			WHERE
				cell_id=#{gridId};
	</insert>
	
	<insert id="insertTimeTableConfigData" parameterType="com.qts.icam.model.backoffice.TimeTableConfigModel">
		INSERT INTO school_time_table_config(
	            rec_id, teacher_name, teacher_userId, class_section, subject, no_of_classes)
	    VALUES ((select uuid_generate_v4()), #{teacherName}, #{teacherUserId}, #{classSectionName}, #{subjectName}, #{noOfClasses});
	</insert>
	
	<select id="getAllTimeTableConfigDataList" resultType="com.qts.icam.model.backoffice.TimeTableConfigModel" >
		SELECT 
       		teacher_name as teacherName,
       		teacher_userId as teacherUserId,
       		class_section as classSectionName,
       		subject as subjectName,
       		no_of_classes as noOfClasses
	  	FROM 
			school_time_table_config 
		
	</select>
	
	<select id = "viewAllTimeTable" resultType = "com.qts.icam.model.backoffice.TimeTableConfigModel">
		SELECT 
       		teacher_name as teacherName,
       		teacher_userId as teacherUserId,
       		class_section as classSectionName,
       		subject as subjectName,
       		no_of_classes as noOfClasses
	  	FROM 
			school_time_table_config
	</select>
	
	
	<update id="editAndUpdateTimeTable" parameterType="com.qts.icam.model.backoffice.TimeTableConfigModel">
		UPDATE
			school_time_table_config
		SET
			teacher_name = #{teacherName} , 
			class_section = #{classSectionName},
			subject = #{subjectName},
			no_of_classes = #{noOfClasses}
		WHERE
			teacher_userid = #{teacherUserId}
		AND
			class_section = #{oldClassSection}
		AND 
			subject = #{oldsubjectName};
	</update>
	
	<update id="deleteClassForTeacher" parameterType="com.qts.icam.model.backoffice.TimeTableConfigModel">
		DELETE FROM
			school_time_table_config
		WHERE
			teacher_userid = #{teacherUserId}
		AND
			class_section = #{classSectionName}
		AND 
			subject = #{subjectName};
	</update>
	<!-- FOR TC -->
	
	
	<update id="setPenaltyRecievedD" parameterType="com.qts.icam.model.common.Resource" statementType="CALLABLE">
				UPDATE
			book_allocation_details
		SET
			fine_status = (SELECT
								rec_id
							FROM
								book_operational_status
							WHERE
								book_operational_status_name = #{name})
		WHERE
			book_allocation = (SELECT
									rec_id
								FROM
									book_allocation
								WHERE
									book_allocation_code = #{code}
								AND
									is_active = true)
		AND
			book_id = #{desc}
		AND
			is_active = true;
	</update>
	
	<insert id="insertIntoTransactionalWorkingAreaForReceiveLibraryFine" parameterType="com.qts.icam.model.common.Resource">
						INSERT INTO transactional_working_area(
													rec_id,
													obj_id,
													updated_by,
													updated_on, 
													date_of_creation,
													transactional_working_area_code,
													transactional_working_area_name, 
													transactional_working_area_desc,
													resource_type,
													resource,
													transaction_date,
													gross_amount,
													net_amount,
													transaction_mode,
													reason_of_transaction,
													desc_of_transaction,
													transaction_status,
													academic_year,
													paid_against,
													transaction_year,
													transaction_month
													<choose>
														<when test="paymentMode == 'BANK'">
														,bank_amount
														</when>
														<otherwise>
															,cash_amount
														</otherwise>
													</choose>
													,department,
													income_expense,
													ledger
											)VALUES(
  												uuid_generate_v4(),
	   											#{objectId},
												(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
	   											extract(epoch FROM now()), 
												extract(epoch FROM now()),
            									(SELECT('TWA' ||(SELECT COALESCE((SELECT MAX(transactional_working_area_id) FROM transactional_working_area), 0)+1))),
            									'LIBRARY FINE', 
            									'LIBRARY FINE',
            									(SELECT
													rt.resource_type_name
												FROM 
													book_allocation_details bad
												JOIN
													book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
												JOIN
													resource r ON (ba.book_issued_to = r.rec_id AND r.is_active = true)
												JOIN
													resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
												WHERE
													ba.book_allocation_code = #{code}
												AND 
													bad.is_active = true	
												AND
													bad.book_id = #{desc}),
							          			(SELECT
													r.user_id
												FROM 
													book_allocation_details bad
												JOIN
													book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
												JOIN
													resource r ON (ba.book_issued_to = r.rec_id)
												WHERE
													ba.book_allocation_code = #{code}
												AND	
													bad.is_active = true
												AND
													bad.book_id = #{desc}),
	  											extract(epoch FROM now()),
	  											(SELECT
													bad.penalty
												FROM 
													book_allocation_details bad
												JOIN
													book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
												JOIN
													resource r ON (ba.book_issued_to = r.rec_id AND r.is_active = true)
												JOIN
													resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
												WHERE
													ba.book_allocation_code = #{code}
												AND 	
													bad.is_active = true
												AND
													bad.book_id = #{desc}),
	  											(SELECT
													bad.penalty
												FROM 
													book_allocation_details bad
												JOIN
													book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
												JOIN
													resource r ON (ba.book_issued_to = r.rec_id AND r.is_active = true)
												JOIN
													resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
												WHERE
													ba.book_allocation_code = #{code}
												AND	
													bad.is_active = true
												AND
													bad.book_id = #{desc}), 
           										#{paymentMode},
           										'FINE',
       											'FINE',
            									'PENDING',
												(SELECT
													academic_year_name
												FROM
													academic_year
												WHERE
													is_active = true
												AND
													year_status = (SELECT rec_id FROM status_flag WHERE status_sym ='C')),
            									(SELECT
													b.book_name
												FROM 
													book_allocation_details bad
												JOIN
													book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
												JOIN
													book b ON (b.book_code = bad.book_code AND b.is_active = true)
												WHERE
													ba.book_allocation_code = #{code}
												AND
													bad.is_active = true
												AND
													bad.book_id = #{desc}),
            									to_char((SELECT to_timestamp(extract(epoch FROM now()))), 'YYYY'),
            									to_char((SELECT to_timestamp(extract(epoch FROM now()))), 'MM')
					           				<choose>
													<when test="paymentMode == 'BANK'">
													  ,(SELECT
															bad.penalty
														FROM 
															book_allocation_details bad
														JOIN
															book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
														JOIN
															resource r ON (ba.book_issued_to = r.rec_id AND r.is_active = true)
														JOIN
															resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
														WHERE
															ba.book_allocation_code = #{code}
														AND
															bad.is_active = true
														AND
															bad.book_id = #{desc})
													</when>
													<otherwise>
										 				,(SELECT
																bad.penalty
														 FROM 
															  book_allocation_details bad
														 JOIN
															 book_allocation ba ON (bad.book_allocation = ba.rec_id AND ba.is_active = true)
														 JOIN
															 resource r ON (ba.book_issued_to = r.rec_id AND r.is_active = true)
														 JOIN
															 resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
														 WHERE
															 ba.book_allocation_code = #{code}
														 AND
															 bad.is_active = true
														 AND
															 bad.book_id = #{desc})
													</otherwise>
												</choose>
												,'LIBRARY DEPARTMENT',
												'INCOME',
												(SELECT rec_id FROM ledger WHERE ledger_code = #{ledger} AND is_active = true)
												);
	</insert>
	
		<!--**********************************START IT SECTION********************************** -->	
<select id="viewAllITSections" resultType="com.qts.icam.model.common.ITSection">
	SELECT
		it.it_section_id as itSectionObjectId, 
		it.it_section_code as itSectionCode,
		it.it_section_name as itSectionName,
		it.it_section_desc as itSectionDesc
	  FROM it_section it	  
	  WHERE
		it.is_active = true	
</select>
	
<insert id="createITSections" parameterType="com.qts.icam.model.common.ITSection">
	INSERT INTO it_section(			
			rec_id, 
			obj_id, 
			updated_by, 
			updated_on, 
			date_of_creation, 			 
			it_section_code, 
			it_section_name, 
			it_section_desc)
   	VALUES 	(
			(SELECT	uuid_generate_v4()), 
			#{itSectionObjectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true), 
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())),  
			(SELECT('IT_CODE_' ||(SELECT COALESCE((SELECT MAX(it_section_id) FROM it_section), 0)+1))),
			#{itSectionName},
			#{itSectionDesc}
			);
	</insert>

<update id="updateITSection" parameterType="com.qts.icam.model.common.ITSection">
		UPDATE it_section
		SET 
			updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true),
			updated_on =(SELECT extract(epoch FROM now())), 
			it_section_name = #{itSectionName} , 
			it_section_desc = #{itSectionDesc}		  
		WHERE 
			is_active=true
		AND
			it_section_code=#{itSectionCode};	
	</update>

<select id="selectRebatesForITSection" parameterType="java.lang.String" resultType="com.qts.icam.model.common.ITSectionDetails">
		SELECT
			itsd.it_section_details_code as itSectionDetailsCode,
			itsd.it_section_details_name as itSectionDetailsName
		FROM it_section_details itsd
		JOIN it_section its ON (its.rec_id = itsd.it_section) AND (its.is_active=true)
		WHERE
			itsd.is_active=true
		AND
			its.it_section_code = #{itSectionCode}
	</select>
	
<insert id="insertIntoITSectionDetail" parameterType="com.qts.icam.model.common.ITSectionDetails">
		INSERT INTO 
				it_section_details(
				rec_id, obj_id, updated_by, updated_on, date_of_creation,
				it_section_details_code, it_section, it_section_details_name, it_section_details_desc)
		VALUES (uuid_generate_v4(),
				#{itSectionDetailsObjectId},
				(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
				(SELECT extract(epoch FROM now())), (SELECT extract(epoch FROM now())), 
				(select #{itSectionDetailsCode}|| '-' || COALESCE((SELECT MAX(it_section_details_id) FROM it_section_details), 0)+1),
				(SELECT itsec.rec_id FROM it_section itsec WHERE itsec.it_section_code = #{itSection} AND is_active=true),
				#{itSectionDetailsName},
				#{itSectionDetailsName}
			);
	</insert>

<update id="updateITSecDetails" parameterType="com.qts.icam.model.common.ITSectionDetails">		
								
		UPDATE
			it_section_details
		SET
			updated_on = (SELECT extract(epoch FROM now())),
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			it_section_details_name = #{itSectionDetailsName},
			it_section_details_desc = #{itSectionDetailsName}
		WHERE
			it_section_details_code = #{itSectionDetailsCode}
		AND
			is_active = true;
				
	</update>	
	
<select id="defaultAmountInsertInITSectionDetailAmnt" parameterType="com.qts.icam.model.common.ITSection">

		INSERT INTO it_section_details_amount(
			rec_id, obj_id, updated_by, 
			updated_on, date_of_creation, 
			it_section_details_amount_code, it_section_details, it_section_group_details, 
			it_section_details_amount, financial_year, it_section_details_amount_desc)
		VALUES ((SELECT uuid_generate_v4()), 
			#{itSectionObjectId}, 
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())),  
			(SELECT('ITSEC-DET-AMNT-'||(SELECT COALESCE((SELECT MAX(it_section_details_amount_id) FROM it_section_details_amount), 0)+1))), 
			(SELECT rec_id FROM it_section_details WHERE it_section_details_id = (SELECT MAX(it_section_details_id) FROM it_section_details) AND is_active = true), 
			(SELECT
				itsgd.rec_id
			FROM it_section_group_details itsgd			
			JOIN financial_year f ON (f.rec_id = itsgd.financial_year) AND (f.is_active = true)
			JOIN it_section its ON (its.rec_id = itsgd.it_section) AND (its.is_active = true)
			JOIN status_flag sf1 ON (sf1.rec_id = f.year_status)
			WHERE
				itsgd.is_active=true
			AND
				sf1.status_sym = 'C'
			AND
				its.it_section_code = #{itSectionCode}), 
			#{amount}, 
			(SELECT rec_id FROM financial_year WHERE is_active = true AND year_status = (SELECT rec_id FROM status_flag WHERE status_sym = 'C')), 
			(SELECT #{itSectionDesc}||(SELECT it_section_details_code FROM it_section_details WHERE it_section_details_id = (SELECT MAX(it_section_details_id) FROM it_section_details) AND is_active = true)||'-0.0')
			);
			
	</select>

<!-- <select id="getIncomeAgeList" resultType="com.qts.icam.model.common.IncomeAge">
		SELECT 
			income_age_name as incomeAgeName, 
			income_age_code as incomeAgeCode
		FROM income_age ia		
		JOIN financial_year fy ON (fy.is_active= true)
		JOIN status_flag sf_cs ON (fy.year_status = sf_cs.rec_id)
		WHERE 
			ia.is_active=true
		AND 
			sf_cs.status_sym = 'C'
		ORDER BY income_age_id;
	</select> -->	
	
<select id="getUnmappedITSections" resultType="com.qts.icam.model.common.ITSection">
	SELECT
		it.it_section_id as itSectionObjectId, 
		it.it_section_code as itSectionCode,
		it.it_section_name as itSectionName,
		it.it_section_desc as itSectionDesc
	  FROM it_section it		
	  WHERE
		it.is_active=true	
		EXCEPT(
			SELECT
				it.it_section_id as itSectionObjectId, 
				it.it_section_code as itSectionCode,
				it.it_section_name as itSectionName,
				it.it_section_desc as itSectionDesc
			FROM 
				it_section it
			
			JOIN
				income_age ia ON(ia.is_active=true)
			JOIN
				financial_year f ON(f.is_active=true)
			JOIN
				it_section_group isg ON (isg.is_active=true) AND (isg.financial_year=f.rec_id) AND (isg.income_age=ia.rec_id)
			JOIN
				it_section_group_details isgd ON(isgd.is_active=true) AND(isg.rec_id = isgd.it_section_group_name) AND (it.rec_id = isgd.it_section)
			WHERE
				it.is_active=true
			AND
				f.financial_year_code=#{financialYear.financialYearCode}
			AND
				ia.income_age_code=#{incomeAge.incomeAgeCode}
		)
	</select>	
	
	<insert id="insertITSectionDeductionAmount" parameterType="com.qts.icam.model.common.ITSectionGroup">	
	INSERT INTO it_section_group(		
			rec_id,
			obj_id,
			updated_by,
			updated_on, 
			date_of_creation,		
			it_section_group_code,
			it_section_group_name, 
			group_amount,
			financial_year,
			income_age)
    VALUES (
			(SELECT	uuid_generate_v4()), 
			#{itSectionGroupObjectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true), 
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())), 
			(SELECT(#{itSectionGroupCode} ||(SELECT COALESCE((SELECT MAX(it_section_group_id) FROM it_section_group), 0)+1))),
			#{itSectionGroupName},
			#{groupAmount},		
			(SELECT rec_id FROM financial_year WHERE financial_year_code=#{financialYear.financialYearCode} AND is_active=true),
			(SELECT rec_id FROM income_age WHERE income_age_code=#{incomeAge.incomeAgeCode} AND is_active=true)
			);			
	</insert>
	
	<insert id="insertITSectionDeductionAmountDetails" parameterType="com.qts.icam.model.common.ITSection">	
		INSERT INTO it_section_group_details(            
            rec_id,
            obj_id,
            updated_by,
            updated_on, 
            date_of_creation,
            it_section_group_details_code,
            it_section_group_name, 
            it_section,
            group_details_amount,
            financial_year)
    VALUES (
			(SELECT	uuid_generate_v4()), 
			#{itSectionObjectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true), 
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())),
			(SELECT(#{itSectionCode} ||(SELECT COALESCE((SELECT MAX(it_section_group_details_id) FROM it_section_group_details), 0)+1))),
			(Select rec_id FROM it_section_group WHERE it_section_group_id=(Select  max(it_section_group_id) from it_section_group)),
			(SELECT rec_id FROM it_section WHERE it_section_code =#{itSectionCode} AND is_active=true),
			#{amount},
			(SELECT rec_id FROM financial_year WHERE financial_year_code=#{itSectionDesc} AND is_active=true)
            );			
	</insert>
	
	<select id="selectITSectionGroupsForAgeYear" parameterType="com.qts.icam.model.common.ITSectionGroup" resultType="com.qts.icam.model.common.ITSectionGroup">
				
		SELECT
			isg.it_section_group_name as itSectionGroupName,
			isg.it_section_group_code as itSectionGroupCode	
		FROM
			it_section_group isg		
		JOIN
			income_age ia ON (ia.rec_id = isg.income_age) AND (ia.is_active = true)
		JOIN
			financial_year f ON (f.rec_id = isg.financial_year) AND (f.is_active=true)
		WHERE
			isg.is_active=true
		AND
			f.financial_year_code = #{financialYear.financialYearCode}
		AND
			ia.income_age_code = #{incomeAge.incomeAgeCode}		
		 
	</select>
	
	<select id="checkITSecDetailAmountForITSecGroup" parameterType="com.qts.icam.model.common.ITSectionGroup" resultType="java.lang.String">
	
		SELECT COUNT(itsda.rec_id) as count
		FROM it_section_details_amount itsda		
		JOIN financial_year f ON (f.rec_id = itsda.financial_year) AND (f.is_active = true)
		JOIN it_section_group_details itsgd ON (itsgd.rec_id = itsda.it_section_group_details) AND (f.rec_id = itsgd.financial_year) AND (itsgd.is_active = true)
		JOIN it_section_group itsg ON (f.rec_id = itsg.financial_year) AND (itsg.rec_id = itsgd.it_section_group_name) AND (itsg.is_active = true)
		JOIN income_age ia ON (ia.rec_id = itsg.income_age) AND (ia.is_active = true)
		WHERE
			itsda.is_active=true
		AND
			f.financial_year_code = #{financialYear.financialYearCode}
		AND
			ia.income_age_code = #{incomeAge.incomeAgeCode}
		AND
			itsg.it_section_group_code = #{status}
	
	</select>
	
	<resultMap id="selectITSectionForSectionGroupsResultMap" type="com.qts.icam.model.common.ITSectionGroup">
		<result property="groupAmount" column="group_amount" jdbcType="DOUBLE" />
		<collection property="itSectionList" ofType="com.qts.icam.model.common.ITSection">
			<id property="itSectionCode" column="it_section_code" jdbcType="VARCHAR" />
			<result property="itSectionName" column="it_section_name" jdbcType="VARCHAR" />
			<result property="amount" column="group_details_amount" jdbcType="DOUBLE" />
		</collection>
	</resultMap>
	
	<select id="selectITSectionForSectionGroups" parameterType="com.qts.icam.model.common.ITSectionGroup" resultMap="selectITSectionForSectionGroupsResultMap">
		SELECT				
			it.it_section_code,
			it.it_section_name,
			isg.group_amount,
			isgd.group_details_amount	
		FROM 
			it_section it		
		JOIN
			income_age ia ON (ia.is_active = true)
		JOIN
			financial_year f ON (f.is_active = true)
		JOIN
			it_section_group isg ON (isg.is_active = true) AND (isg.financial_year = f.rec_id) AND (isg.income_age = ia.rec_id)
		JOIN
			it_section_group_details isgd ON(isgd.is_active=true) AND(isg.rec_id = isgd.it_section_group_name) AND (it.rec_id = isgd.it_section)
		WHERE
			it.is_active=true
		AND
			f.financial_year_code = #{financialYear.financialYearCode}
		AND
			ia.income_age_code = #{incomeAge.incomeAgeCode}
		AND
			isg.it_section_group_code = #{status}
	</select>
	
	<select id="selectITSecDetailsForSection" parameterType="com.qts.icam.model.common.ITSection" resultType="com.qts.icam.model.common.ITSectionDetails">
		
		SELECT
			itsd.it_section_details_name as itSectionDetailsName,
			itsd.it_section_details_code as itSectionDetailsCode										
		FROM 
			it_section it
		JOIN 
			it_section_details itsd ON (it.rec_id = itsd.it_section) AND (itsd.is_active = true)			
		WHERE
			it.is_active = true
		AND
			it.it_section_code = #{itSectionCode};
			
	</select>
	
	<insert id="insertIntoITSectionDetailAmount" parameterType="com.qts.icam.model.common.ITSectionGroup">
	
		INSERT INTO it_section_details_amount(
			rec_id, obj_id, updated_by, updated_on, date_of_creation, 
			it_section_details_amount_code, it_section_details, it_section_group_details, 
			it_section_details_amount, financial_year, it_section_details_amount_desc)
		VALUES ((SELECT uuid_generate_v4()), 
			#{itSectionGroupObjectId}, 
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())), 
			(SELECT('ITSEC-DET-AMNT-' ||(SELECT COALESCE((SELECT MAX(it_section_details_amount_id) FROM it_section_details_amount), 0)+1))), 
			(SELECT rec_id FROM it_section_details WHERE it_section_details_code = #{itSection.itSectionDesc} AND is_active = true), 
			(SELECT rec_id FROM it_section_group_details 
				WHERE it_section_group_name = (
					SELECT itsg.rec_id 
					FROM it_section_group itsg					
					JOIN financial_year f ON (f.rec_id = itsg.financial_year) AND (f.is_active = true)
					JOIN income_age ia ON (ia.rec_id = itsg.income_age) AND (ia.is_active = true)
					WHERE 
						itsg.is_active=true
					AND
						itsg.it_section_group_code = #{itSectionGroupCode})
					AND it_section = (SELECT rec_id FROM it_section WHERE it_section_code = #{itSection.itSectionCode} AND is_active = true)
					AND financial_year = (SELECT rec_id FROM financial_year WHERE financial_year_code = #{financialYear.financialYearCode} AND is_active = true)
					AND is_active = true), 
			#{itSection.amount}, 
			(SELECT rec_id FROM financial_year WHERE financial_year_code = #{financialYear.financialYearCode} AND is_active = true), 
			#{itSectionGroupDesc});
	
	</insert>
	
	<resultMap id="selectRebateAmountForITSectionGroupResultMap" type="com.qts.icam.model.common.ITSectionGroup">
		<id property="itSectionGroupCode" column="it_section_group_code" jdbcType="VARCHAR" />
		<result property="itSectionGroupName" column="it_section_group_name" jdbcType="VARCHAR" />
		<result property="groupAmount" column="group_amount" jdbcType="DOUBLE" />
		<collection property="itSectionList" ofType="com.qts.icam.model.common.ITSection">
			<id property="itSectionCode" column="it_section_code" jdbcType="VARCHAR" />
			<result property="itSectionName" column="it_section_name" jdbcType="VARCHAR" />
			<collection property="itSectionDetailsList" ofType="com.qts.icam.model.common.ITSectionDetails">
				<id property="itSectionDetailsCode" column="it_section_details_code" jdbcType="VARCHAR" />
				<result property="itSectionDetailsName" column="it_section_details_name" jdbcType="VARCHAR" />
				<result property="subAmount" column="it_section_details_amount" jdbcType="DOUBLE" />
			</collection>
		</collection>
	</resultMap>
	<select id="selectRebateAmountForITSectionGroup" parameterType="com.qts.icam.model.common.ITSectionGroup" resultMap="selectRebateAmountForITSectionGroupResultMap">
		
		SELECT 
			itsg.it_section_group_name, 
			itsg.it_section_group_code,
			itsg.group_amount,
			its.it_section_name,
			its.it_section_code,
			itsd.it_section_details_name,
			itsd.it_section_details_code,
			itsda.it_section_details_amount
		FROM it_section_details_amount itsda		
		JOIN financial_year f ON (f.rec_id = itsda.financial_year) AND (f.is_active = true)
		JOIN it_section_group_details itsgd ON (itsgd.rec_id = itsda.it_section_group_details) AND (f.rec_id = itsgd.financial_year) AND (itsgd.is_active = true)
		JOIN it_section_group itsg ON (f.rec_id = itsg.financial_year) AND (itsg.rec_id = itsgd.it_section_group_name) AND (itsg.is_active = true)
		JOIN it_section its ON (its.rec_id = itsgd.it_section) AND (its.is_active = true)
		JOIN it_section_details itsd ON (itsd.rec_id = itsda.it_section_details) AND (its.rec_id = itsd.it_section) AND (itsd.is_active = true)
		JOIN income_age ia ON (ia.rec_id = itsg.income_age) AND (ia.is_active = true)
		WHERE
			itsda.is_active = true
		AND
			f.financial_year_code = #{financialYear.financialYearCode} 
		AND
			ia.income_age_code = #{incomeAge.incomeAgeCode}
		AND
			itsg.it_section_group_code = #{status}
			
	</select>
	
	<update id="updateITSecDetailsAmount" parameterType="com.qts.icam.model.common.ITSectionGroup">
	
		UPDATE
			it_section_details_amount
		SET
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true), 
			updated_on = (SELECT extract(epoch FROM now())),
			is_active = false
		WHERE
			it_section_details = (
				SELECT itsd.rec_id FROM it_section_details itsd			
				JOIN it_section its ON (its.rec_id = itsd.it_section AND its.is_active = true)
				WHERE 	
					itsd.is_active=true
				AND
					itsd.it_section_details_code = #{itSection.itSectionDesc}
				AND
					its.it_section_code = #{itSection.itSectionCode}
			)
		AND
			it_section_group_details = (
				SELECT itsgd.rec_id FROM it_section_group_details itsgd				
				JOIN it_section its ON (its.rec_id = itsgd.it_section AND its.is_active = true)
				JOIN it_section_group itsg ON (itsg.rec_id = itsgd.it_section_group_name AND itsg.is_active = true)
				JOIN income_age ia ON (ia.rec_id = itsg.income_age AND ia.is_active = true)
				JOIN financial_year f ON (f.rec_id = itsg.financial_year AND f.rec_id = itsgd.financial_year AND f.is_active = true)
				WHERE 
					itsgd.is_active = true
				AND
					itsg.it_section_group_code = #{itSectionGroupCode}
				AND
					its.it_section_code = #{itSection.itSectionCode}
				AND
					f.financial_year_code = #{financialYear.financialYearCode}
			)
		AND
			financial_year = (SELECT rec_id FROM financial_year WHERE financial_year_code = #{financialYear.financialYearCode} AND is_active = true)
		AND
			is_active = true;
	
	</update>
		<!--**********************************END IT SECTION********************************** -->
		
		<!--**********************************START STUDENT TC**********************************
		anup.roy // 07092017 -->
	<select id="selectNameStandardSectionForRollNumber" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Student">
		SELECT
			r.first_name || ' ' || COALESCE(r.middle_name ,'') || ' ' || COALESCE(r.last_name ,' ') as studentName,
			sec.section_name as section,
			std.standard_name as standard
		FROM 
			resource r
		LEFT JOIN 
			student_course_mapping scm ON (r.user_id = scm.user_id AND scm.is_active= true)
		JOIN 
			section sec on (scm.section = sec.rec_id AND sec.is_active = true)
		LEFT JOIN 
			standard std ON(sec.standard = std.rec_id AND std.is_active = true)	
		WHERE 
			scm.roll_number = #{rollNumber};
	</select>
	
	
	<select id="getStudentLibraryFineStatus" resultType="java.lang.String" parameterType="java.lang.Integer">
		SELECT
			sf1.status_sym	
		FROM
			book_allocation ba
		JOIN book_allocation_details bad ON (bad.book_allocation = ba.rec_id) AND (bad.is_active = true)
		JOIN status_flag sf1 ON (bad.fine_status = sf1.rec_id)
		JOIN book_id bi ON (bad.book_id = bi.rec_id) AND (bi.is_active = true)
		JOIN book b ON (bi.book = b.rec_id) AND (b.is_active = true)
		JOIN resource r ON (ba.book_issued_to = r.rec_id) AND (r.is_active = true)
		JOIN resource_type rtp ON (rtp.rec_id = r.resource_type) AND (ba.book_issued_to_resource_type = rtp.rec_id) AND (rtp.is_active = true)
		WHERE
			ba.is_active = true
		AND
			rtp.resource_type_code = 'STUDENT'
		AND
			r.roll_number = #{rollNumber}
	</select>
	
	<select id="getStudentLibraryBookStatus" resultType="java.lang.String" parameterType="java.lang.Integer">
		SELECT
			sf.status_sym		
		FROM
			book_allocation ba
		JOIN status_flag sf ON (ba.allocation_status = sf.rec_id)
		JOIN book_allocation_details bad ON (bad.book_allocation = ba.rec_id) AND (bad.is_active = true)
		JOIN book_id bi ON (bad.book_id = bi.rec_id) AND (bi.is_active = true)
		JOIN book b ON (bi.book = b.rec_id) AND (b.is_active = true)
		JOIN resource r ON (ba.book_issued_to = r.rec_id) AND (r.is_active = true)
		JOIN resource_type rtp ON (rtp.rec_id = r.resource_type) AND (ba.book_issued_to_resource_type = rtp.rec_id) AND (rtp.is_active = true)
		WHERE
			ba.is_active = true
		AND
			rtp.resource_type_code = 'STUDENT'
		AND
			r.roll_number = #{rollNumber}
	</select>
		<!--**********************************END STUDENT TC********************************** -->
		
		<select id="checkSocialCategoryName" parameterType="java.lang.String" resultType="com.qts.icam.model.common.SocialCategory">
		SELECT
			social_category_code as socialCategoryCode,
			social_category_name as socialCategoryName
		FROM
			social_category
		WHERE
			social_category_name=upper(#{socialCategoryName})
		AND
			is_active=true;
	</select>
	
		<resultMap id="gadmissionDriveListForFeesSubmissionResultMap"
		type="com.qts.icam.model.admission.AdmissionForm">
		<id property="courseName" column="course_name" jdbcType="VARCHAR" />
		<result property="courseClass" column="standard_name" jdbcType="VARCHAR" />
		<result property="courseType" column="course_type_name"
			jdbcType="VARCHAR" />
		<result property="courseDuration" column="course_duration"
			jdbcType="INTEGER" />
		<result property="admissionFormYear" column="admission_drive_year"
			jdbcType="VARCHAR" />
		<result property="admissionDriveName" column="admission_drive_name"
			jdbcType="VARCHAR" />
		<result property="noOfOpenings" column="number_of_opening"
			jdbcType="INTEGER" />
	</resultMap>
	<select id="admissionDriveListForFeesSubmission" resultMap="gadmissionDriveListForFeesSubmissionResultMap">
		SELECT
			co.course_name,
			st.standard_name,
			ct.course_type_name,
			co.course_duration,
			ad.admission_drive_year,
			ad.admission_drive_name,
			ad.number_of_opening
		FROM
			admission_drive ad,course co,
			course_type ct, standard st
		WHERE
			ad.course = co.rec_id AND ad.is_active = true
		AND
			co.course_type = ct.rec_id AND co.is_active = true AND ct.is_active = true
		AND
			co.standard = st.rec_id AND st.is_active = true
		AND
			ad.status_of_admission IN
			(select rec_id from admission_drive_status where
			admission_drive_status_name IN('ONGOING'));
	</select>
	
	
	<!-- Added by naimisha for IT section rebate -->
	
	<update id="inactiveItRebate" parameterType="java.lang.String">
		UPDATE it_section_details SET
			is_active = false
		WHERE
			it_section_details_code = #{itSection};
	</update>
	
	
		<resultMap id="getselectedCandidateListResultMap" type="com.qts.icam.model.common.Resource">
		<id property="userId" column="print_admission_form_code" jdbcType="VARCHAR" />
	</resultMap>
	<select id="getSelectedCandidateList" parameterType="com.qts.icam.model.admission.AdmissionProcess"
		resultMap="getselectedCandidateListResultMap">
		SELECT
			print_admission_form_code
		FROM
			print_admission_form paf
		JOIN
			status_flag sf	ON (paf.status = sf.rec_id)
		WHERE
			paf.admission_year=#{admissionYear}
		AND
			paf.print_admission_form_class=#{courseClass}
		AND
			paf.print_admission_form_name=#{formName}
		AND
			paf.status = (SELECT rec_id FROM status_flag WHERE status_sym='PR')		
		AND
			paf.is_active=true
		AND
			paf.form_fees_paid_status IS NULL;
	</select>
	

	
	<update id="updateStudentStatusForFeesSubmission" parameterType="com.qts.icam.model.common.Student">
		UPDATE 
			print_admission_form	
		SET 
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = true),
			updated_on=(SELECT extract(epoch FROM now())),
			date_of_payment=(SELECT extract(epoch FROM now())),
			form_fees_paid_status='FEESPAID',		
			phase_required_paid_waived='PAID',
			phase_admitted='ADMITTED',
			cheque_no = #{chequeNo},
			registration_id = #{registrationId},
			course=(SELECT rec_id FROM course WHERE course_name = #{standard} AND is_active = true)
		WHERE
			print_admission_form_code=#{formIdForFeesSubmission}
		AND
			print_admission_form_name=#{driveNameForFeesSubmission}
		AND
			print_admission_form_class=#{standard}
		AND
			admission_year=#{academicYearForFeesSubmission};
	</update>
	
	<select id="selectSubmitedStudentFees" parameterType="com.qts.icam.model.common.Student" resultType="com.qts.icam.model.common.Student">
		SELECT
			print_admission_form_id as admissionFormId,
			admission_year as "resource.admissionYear",
			co .course_name as "resource.courseName"
		FROM
			print_admission_form paf
		LEFT JOIN
			admission_drive ad ON (paf.print_admission_form_name = ad.admission_drive_name)
		LEFT JOIN
			course co ON (ad.course = co.rec_id)
		WHERE
			print_admission_form_code=#{formIdForFeesSubmission}
		AND
			print_admission_form_name=#{driveNameForFeesSubmission}
		AND
			print_admission_form_class=#{standard}
		AND
			admission_year=#{academicYearForFeesSubmission};
	</select>
	
	<!-- modified by sourav.bhadra on 18-09-2017 -->
	<insert id="insertStudentAdmissionFeesDetails" parameterType="com.qts.icam.model.common.FeesCategory">
		INSERT INTO submitted_admission_fees_break_up
			(rec_id,
			obj_id,
			updated_by,
			updated_on,
			date_of_creation,
			submited_admission_fees_break_up_code,
			submited_admission_fees_break_up_name,
			submited_admission_fees_break_up_desc,
			print_admission_form,
			fees_category,
			fees_amount,
			payment_mode,
			payable_amount,
			due_amount)
		VALUES(
			(SELECT uuid_generate_v4()),
			#{feesCategoryObjectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),
			(SELECT extract(epoch FROM now())),		
			#{feesCategoryCode},
			upper(#{feesCategoryName}),
			#{feesCategoryName},
			(SELECT rec_id FROM print_admission_form WHERE print_admission_form_id = #{checkValid}),
			upper(#{feesCategoryName}),
			#{fees},
			#{status},
			#{discountedFees},
			#{discount}
		);
	</insert>
	
	<insert id="insertIntoTransactionalWorkingAreaForAdmissionFees" parameterType="com.qts.icam.model.common.Student">
		<selectKey keyProperty="studentCode" resultType="String" order="BEFORE">
	   		SELECT('TWA' ||(SELECT COALESCE((SELECT MAX(transactional_working_area_id) FROM transactional_working_area), 0)+1));
	 	</selectKey>
			INSERT INTO transactional_working_area(
			            rec_id,
			            obj_id,
			            updated_by,
			            updated_on, 
			            date_of_creation,			           
			            transactional_working_area_code,
			            transactional_working_area_name, 
			            transactional_working_area_desc,
			            resource_type,
			            resource,
			            transaction_date,
			            gross_amount,
			            net_amount,
			            transaction_mode,
			            cheque_no,
			            reason_of_transaction,
			            desc_of_transaction,
			            transaction_status,
			            academic_year,
			            paid_against,
			            bank_name,
			            bank_code,
			            bank_location,
			            transaction_year,
			            transaction_month
			            <choose>
							<when test="paymentMode == 'BANK'">
								,bank_amount
							</when>
							<otherwise>
								,cash_amount
							</otherwise>
						</choose>
						,department,
						income_expense)
  					VALUES(
  						(uuid_generate_v4()),
	    				#{objectId},
	    				(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
	    				extract(epoch FROM now()), 
            			extract(epoch FROM now()),
            			<!-- (SELECT('TWA' ||(SELECT COALESCE((SELECT MAX(transactional_working_area_id) FROM transactional_working_area), 0)+1))), -->
            			#{studentCode},
            			'ADMISSION FEES', 
            			'ADMISSION FEES',
            			'CANDIDATE',
           				#{admissionFormId},
	   					extract(epoch FROM now()),
	   					#{totAmmount},
	   					#{totAmmount}, 
           				#{paymentMode},
          				#{chequeNo},
           				'FEES',
           				'FEES',
            			'PENDING',
            			#{resource.admissionYear},
            			#{resource.courseName},
            			#{bankName},
            			#{bankCode},
            			#{bankLocation},
            			to_char((SELECT to_timestamp(extract(epoch FROM now()))), 'YYYY'),
            			to_char((SELECT to_timestamp(extract(epoch FROM now()))), 'MM')
            			<choose>
							<when test="paymentMode == 'BANK'">
								,#{totAmmount}
							</when>
							<otherwise>
								,#{totAmmount}
							</otherwise>
						</choose>
						,'ADMISSION',
						'INCOME'
           );
        <foreach item="feesCategory" collection="feesCategoryList"  open="" close="" separator=";">
			INSERT INTO transactional_working_area_details(
	            rec_id,
	            obj_id,
	            updated_by, 
	            updated_on,
	            date_of_creation,
	            transactional_working_area_details_code, 
	            transactional_working_area_details_name,
	            transactional_working_area_details_desc, 
	            transactional_working_area,
	            transaction_head_name,
	            transaction_head_amount)
   		 VALUES (
   		 		uuid_generate_v4(),
	   			#{objectId},
	   			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active=true),
	   			extract(epoch FROM now()), 
       			extract(epoch FROM now()),           		
           		(SELECT('TWAD' ||(SELECT COALESCE((SELECT MAX(transactional_working_area_details_id) FROM transactional_working_area_details), 0)+1))),
	   			#{academicYearForFeesSubmission}, 
           		#{academicYearForFeesSubmission},
           		(SELECT rec_id FROM transactional_working_area WHERE transactional_working_area_code = #{studentCode} AND is_active=true), 
           		upper(#{feesCategory.feesCategoryName}),
           		#{feesCategory.discountedFees}
           );
		</foreach>
	</insert>
	
	<update id="updateHostelRoomTypeAvailabilityForAvlSeat"	parameterType="com.qts.icam.model.common.Student">
		UPDATE hostel_room_type_availability
		SET updated_by = (SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active=true),
		updated_on = (SELECT extract(epoch FROM now())),
		avl_seat= avl_seat-1
		WHERE
			rec_id =(SELECT
						hrta.rec_id
					FROM
						hostel_room_type_availability hrta					
					JOIN
						hostel h ON (h.is_active = sf.rec_id) AND (h.rec_id = hrta.hostel)
					JOIN
						hostel_room_type hrt ON (hrt.is_active = sf.rec_id) AND (hrt.rec_id = hrta.room_type)
					WHERE
						sf.status_sym='A'
					AND
						hostel_code = #{hostel.hostelCode}
					AND
						hostel_room_type_code = #{hostel.room.roomTypeCode}
		);
	</update>
	
	<update id="updateAdmissionDriveForNoOfStudentAdmitted"	parameterType="com.qts.icam.model.common.Student">
		UPDATE
		admission_drive
		SET
		updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active=true),
		updated_on=(SELECT extract(epoch FROM now())),
		total_number_admitted=total_number_admitted+1
		WHERE
		admission_drive_name = #{studentDesc}
		AND
		admission_drive_year = #{studentCode}
		AND
		course=(SELECT
					co.rec_id
				FROM
					course co,admission_drive ad
				WHERE
					ad.course = co.rec_id
				AND
					co.is_active=true
				AND
					ad.admission_drive_name = #{studentDesc});
	</update>
	
	
	<select id="getRegistrationIdForStudentForAdmissionFeesSubmission" parameterType="com.qts.icam.model.common.Resource" resultType="com.qts.icam.model.common.Resource">
		SELECT
			first_name as firstName,
			middle_name as middleName,
			last_name as lastName,
			gender as gender,
			sc.social_category_name category
		FROM
			print_admission_form paf, social_category sc
		WHERE
			sc.rec_id = paf.social_category
		AND
			admission_year=#{admissionYear}
		AND
			print_admission_form_name=#{admissionDriveNameId}
		AND
			paf.print_admission_form_code=#{admissionFromId};
	</select>	
	
	
	<select id ="displayFeesForSocialCategoryClassYear" parameterType="com.qts.icam.model.common.FeesCategory" resultType="com.qts.icam.model.common.FeesCategory">
		SELECT 
			fs.fees_structure_name as feesCategoryName, 
			fs.fees_structure_code as feesCategoryCode, 
			sc.social_category_name "socialCategory.socialCategoryName", 
			sc.social_category_code "socialCategory.socialCategoryCode", 
			sft.student_fees_template_name as feesCategoryDesc, 
			sfta.amount as fees
		FROM 
			course c 
		JOIN
			course_type ct ON (c.course_type = ct.rec_id AND ct.is_active = true)
		JOIN	
			student_fees_template_amount sfta ON (sfta.course = c.rec_id AND sfta.is_active = true)
		JOIN	
			social_category sc ON (sfta.social_category = sc.rec_id AND sc.is_active = true)
		JOIN	
			student_fees_template_details sftd ON (sfta.student_fees_template_details = sftd.rec_id AND sftd.is_active = true)
		JOIN	
			student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)
		JOIN
			fees_structure fs ON (sftd.fees_structure = fs.rec_id AND fs.is_active = true)
		WHERE 
			c.course_name = #{course}
		AND
			sc.social_category_code = #{feesCategoryDesc}
		AND
			c.is_active = true;
			
		<!-- SELECT 
			f.fees_name feesCategoryName, 
			f.fees_code feesCategoryCode, 
			sc.social_category_name "socialCategory.socialCategoryName", 
			sc.social_category_code "socialCategory.socialCategoryCode", 
			ft.fees_template_name as feesCategoryDesc, 
			ftd.amount as fees
		FROM fees_template ft
		JOIN fees_template_details ftd ON (ft.rec_id = ftd.fees_template)
		JOIN fees f ON (f.rec_id = ftd.fees)
		JOIN social_category sc ON (sc.rec_id = ftd.social_category) 
		JOIN standard s ON (s.rec_id = ft.standard)
		WHERE s.standard_code = #{klass}
		AND 
		sc.social_category_code = #{feesCategoryDesc}; -->
	</select>
	
	
	
	<select id="getResourceTypes" resultType="com.qts.icam.model.common.ResourceType">
		SELECT
			resource_type_name as resourceTypeName,
			resource_type_code as resourceTypeCode
		FROM
			resource_type rt		
		WHERE
			is_active=true
		AND
			rt.resource_type_name !='STUDENT'
		AND
			rt.resource_type_name !='SUPERADMIN';
	</select>
	
<!-- FOR ATTENDANCE CALENDAR -->
	
	<select id="getStudentsForView" parameterType="com.qts.icam.model.common.Resource"
		resultType = "com.qts.icam.model.common.Resource">
		SELECT
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name) as resourceName,
			scm.roll_number as userId
		FROM
			resource r
		JOIN
			student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true)
		JOIN 
			section sec ON(scm.section=sec.rec_id AND sec.is_active=true)
		JOIN 
			standard s ON (sec.standard = s.rec_id AND s.is_active = true)
		WHERE
			sec.section_name = #{section.sectionName}
		AND
			s.standard_name = #{klass}
		AND
			r.is_active = true;
	</select>
	
	<select id= "selectAttendanceDetailsOfResource" resultType="java.lang.String" parameterType="com.qts.icam.model.backoffice.AttendanceDetails">
		SELECT 			 			
			(SELECT to_char((SELECT to_timestamp(date_of_absent)), 'DD/MM/YYYY'))as absent_date			
		FROM 
			attendance_details ad 
		JOIN  
			resource r ON (ad.resource = r.rec_id AND r.is_active = true)
		WHERE 
			ad.year = #{year} 
		AND 
			ad.month = #{month} 
		AND 
			ad.resource = 	(SELECT r.rec_id 
							FROM resource r
							JOIN student_course_mapping scm ON(r.user_id=scm.user_id AND scm.is_active=true)
							WHERE scm.roll_number = #{teacherId} 
							AND r.is_active = true);
	</select>
	
	<select id= "selectAttendanceDetailsOfTeacher" resultType="java.lang.String" parameterType="com.qts.icam.model.backoffice.AttendanceDetails">
		SELECT 
			(SELECT to_char((SELECT to_timestamp(date_of_attendance)), 'DD/MM/YYYY'))as present_date
	    FROM teacher_attendance_details tad 
	    JOIN  resource r ON (tad.resource = r.rec_id AND r.is_active = true)
	    WHERE tad.year = #{year} 
	    AND tad.month = #{month} 
	    AND tad.resource = (SELECT rec_id FROM resource WHERE user_id = #{teacherId} AND is_active = true);		
	</select>
	
	<!-- naimisha 29062017 -->
	
	<select id="getCourseListForCreateStudent" resultType="com.qts.icam.model.common.Course" >
		<!-- SELECT 
			course_name as courseName,
			admission_drive_name as "admissionDrive.admissionDriveName"
		FROM
			admission_drive	ad
		JOIN 
			course cr ON (ad.course = cr.rec_id AND cr.is_active = true)	
		JOIN 
			admission_drive_status ads ON (ad.status_of_admission = ads.rec_id AND ads.is_active = true)	
		WHERE 
			ad.status_of_admission=(SELECT rec_id FROM admission_drive_status WHERE admission_drive_status_code = 'ONGOING')
		AND 
			ad.is_active = true -->
			SELECT
				DISTINCT c.course_code as courseCode,
				c.course_name as courseName
			FROM
				print_admission_form paf
			JOIN
				course c ON (c.rec_id = paf.course AND c.is_active = true)
			WHERE
				paf.phase_admitted = 'ADMITTED'
			AND
				resource_enrolled = false
	</select>
	
	<select id = "getFormIdAgainstCourseId" resultType="com.qts.icam.model.admission.Form" parameterType = "com.qts.icam.model.common.Course">
		<!-- SELECT 
			rec_id,
			print_admission_form_code as strFormId
		FROM
			print_admission_form 
		WHERE 
			print_admission_form_name = (SELECT
												admission_drive_name FROM admission_drive ad
											JOIN 
												course cr ON (ad.course = cr.rec_id AND cr.is_active = true)
											JOIN 
												admission_drive_status ads ON (ad.status_of_admission = ads.rec_id AND ads.is_active = true)	
											WHERE 
												ad.status_of_admission=(SELECT rec_id FROM admission_drive_status WHERE admission_drive_status_code = 'ONGOING')	
											AND
												course =(SELECT rec_id FROM course WHERE course_name = #{courseName} AND is_active = true))	
		AND 
			form_fees_paid_status = 'FEESPAID'
		AND 
			phase_admitted = 'ADMITTED'
		AND
			resource_enrolled = false	
		AND
			is_active = true; -->
		SELECT 
			paf.rec_id,
			application_id as strFormId
		FROM
			print_admission_form paf
		JOIN
			course c ON (c.rec_id = paf.course AND c.is_active = true)
		WHERE 
			c.course_code = #{courseName}
		AND 
			phase_admitted = 'ADMITTED'
		AND
			resource_enrolled = false	
		AND
			paf.is_active = true;
				
	</select>
	
	<!-- naimisha 24062017 -->
	
	<select id="selectCandidateDetailsAgainstFromId" parameterType="com.qts.icam.model.common.Resource" resultType="com.qts.icam.model.common.Student">
 		SELECT 
			first_name as "resource.firstName",
			middle_name as "resource.middleName",
			last_name as "resource.lastName",
			to_char((SELECT to_timestamp(date_of_birth)),'DD/MM/YYYY')as "resource.dateOfBirth",
			user_id as userId,
  			email_address as "resource.emailId",
  			to_char((SELECT to_timestamp(updated_on)),'DD/MM/YYYY')as dateOfAdmission,
  			registration_id as registrationId
 			
 		FROM 
 			print_admission_form
 		WHERE
 			application_id = #{admissionFromId}::integer
 		AND
 			course = (SELECT rec_id FROM course c WHERE c.course_code =  #{admissionDriveNameId} AND c.is_active = true )	
 		AND
 			is_active = true;
	</select>

	<!-- //Modified By Naimisha 18062017 -->
	<select id="getAdmissionDriveNameAgainstCourseId" parameterType="com.qts.icam.model.common.Course" resultType="java.lang.String">
		<!-- SELECT 
			admission_drive_name
		FROM 
			admission_drive ad
		JOIN 
			course cr On (ad.course = cr.rec_id AND cr.is_active = true)
		JOIN 
			admission_drive_status ads ON (ad.status_of_admission = ads.rec_id AND ads.is_active = true)	
		WHERE 
			ad.status_of_admission=(SELECT rec_id FROM admission_drive_status WHERE admission_drive_status_code = 'ONGOING')	
		AND 
			course_name = #{courseName}
		AND
			ad.is_active = true -->	
		SELECT 
			admission_drive_name
		FROM 
			admission_drive ad
		JOIN 
			course cr On (ad.course = cr.rec_id AND cr.is_active = true)
		JOIN 
			admission_drive_status ads ON (ad.status_of_admission = ads.rec_id AND ads.is_active = true)	
		JOIN
			academic_year ay ON (ay.academic_year_code = ad.admission_drive_year AND ay.is_active = true)
		JOIN
			status_flag sf ON (sf.rec_id = ay.year_status AND ay.is_active = true)
		WHERE 
			ad.status_of_admission IN (SELECT rec_id FROM admission_drive_status WHERE admission_drive_status_code IN ('ONGOING','DONE'))
		AND
			sf.status_sym = 'C'
		AND 
			course_code = #{courseName}
		AND
			ad.is_active = true		
	</select>
	
	 <!-- new fees portion starts -->
	<!-- new -->
	<resultMap id="selectCategoryNameResultMap" type="com.qts.icam.model.common.FeesCategory">
		<id property="feesCategoryCode" column="fees_structure_code" jdbcType="VARCHAR" />
		<result property="feesCategoryName" column="fees_structure_name" jdbcType="VARCHAR" />
		<association property="feesDuration" javaType="com.qts.icam.model.common.FeesDuration">
			<id property="feesDurationCode" column="fees_duration_code" jdbcType="VARCHAR" />
			<result property="feesDurationName" column="fees_duration_name" jdbcType="VARCHAR" />
		</association>
	</resultMap>
	<select id="selectFeesCategory" resultMap="selectCategoryNameResultMap">
		SELECT
			fs.fees_structure_code,
			fs.fees_structure_name,
			fd.fees_duration_code,
			fd.fees_duration_name
		FROM
			fees_structure fs
		JOIN 
			fees_duration fd ON (fs.fees_duration = fd.rec_id)
		AND
			fs.fees_structure_code IS NOT NULL
		AND
			fs.is_active = true;	
	</select>
	
	<resultMap id="selectFeesDurationResultMap" type="com.qts.icam.model.common.FeesDuration">
		<id property="feesDurationCode" column="fees_duration_code" jdbcType="VARCHAR" />
		<result property="feesDurationName" column="fees_duration_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="selectFeesDuration" resultMap="selectFeesDurationResultMap">
		SELECT
			fees_duration_code,
			fees_duration_name
		FROM
			fees_duration
		WHERE 
			is_active = true;
	</select>
	
	<insert id="insertFeesCategory" parameterType="com.qts.icam.model.common.FeesCategory"
		statementType="CALLABLE">
		select insert_into_fee_structure(
		#{feesCategoryObjectId, mode=IN, jdbcType=VARCHAR},
		#{updatedBy, mode=IN, jdbcType=VARCHAR},
		#{feesCategoryCode, mode=IN, jdbcType=VARCHAR},
		#{feesCategoryName , mode=IN, jdbcType=VARCHAR},
		#{feesCategoryDesc , mode=IN, jdbcType=VARCHAR},
		#{feesDuration.feesDurationCode , mode=IN, jdbcType=VARCHAR})
	</insert>
	
	<update id="editFeesStructure" parameterType="com.qts.icam.model.common.FeesCategory">
			UPDATE 
				fees_structure
			SET 
				updated_by = (SELECT rec_id FROM resource WHERE user_id ilike #{updatedBy} AND is_active = true),
				updated_on = extract(epoch FROM now()),
				fees_structure_code = #{feesCategoryCode},
				fees_structure_name = #{feesCategoryName},
				fees_structure_desc = #{feesCategoryName},
				fees_duration = (SELECT rec_id FROM fees_duration WHERE fees_duration_code = #{feesDuration.feesDurationCode} AND is_active = true)
			WHERE 
				fees_structure_code = #{feesCategoryDesc}
			AND 
				is_active = true
	</update>
	
	<resultMap id="selectStudentFeesTemplateListRM" type="com.qts.icam.model.common.StudentFeesTemplate">
		<id property="studentFeesTemplateId" column="student_fees_template_id" jdbcType="INTEGER" />
		<result property="studentFeesTemplateCode" column="student_fees_template_code" jdbcType="VARCHAR" />
		<result property="studentFeesTemplateName" column="student_fees_template_name" jdbcType="VARCHAR" />
		<collection property="feesCategoryList" ofType="com.qts.icam.model.common.FeesCategory">
			<id property="feesStructureId" column="fees_structure_id" jdbcType="INTEGER" />
			<result property="feesCategoryCode" column="fees_structure_code" jdbcType="VARCHAR" />				
			<result property="feesCategoryName" column="fees_structure_name" jdbcType="VARCHAR" />
		</collection>
	</resultMap>
	<select id="selectStudentFeesTemplateList"  resultMap="selectStudentFeesTemplateListRM">
		SELECT 	sft.student_fees_template_id, 
				sft.student_fees_template_code,
				sft.student_fees_template_name,
				fs.fees_structure_id,
				fs.fees_structure_code, 
				fs.fees_structure_name 
		from 
			student_fees_template sft 
		join 
			student_fees_template_details sftd on (sftd.student_fees_template = sft.rec_id AND sftd.is_active = true)
		join 
			fees_structure fs on (sftd.fees_structure = fs.rec_id AND fs.is_active = true)
		where 
			sft.is_active = true
		ORDER BY
			sft.student_fees_template_id ASC;	
	</select>
	
	<insert id= "insertStudentFeesTemplate" parameterType="com.qts.icam.model.common.StudentFeesTemplate">
		INSERT INTO student_fees_template
			(rec_id, obj_id, updated_by, updated_on, date_of_creation, student_fees_template_code, student_fees_template_name)
    	VALUES 
    		(uuid_generate_v4(), 
		    #{studentFeesTemplateObjectId},   
		    (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),   
		    (SELECT extract(epoch FROM now())), 
            (SELECT extract(epoch FROM now())),
            #{studentFeesTemplateName},
            #{studentFeesTemplateName});
	</insert>
	
	<select id= "selectMaxStudentFeesTemplateId" resultType="String">
		SELECT 
			student_fees_template_code as studentFeesTemplateCode
		FROM 
			student_fees_template
		WHERE 
			student_fees_template_id = (SELECT  max(student_fees_template_id) FROM  student_fees_template WHERE is_active = true);
	</select>
	
	<insert id="insertStudentFeesTemplateDetails" parameterType="com.qts.icam.model.common.StudentFeesTemplateDetails">
		INSERT INTO student_fees_template_details
			(rec_id, obj_id, updated_by, updated_on, date_of_creation, student_fees_template, fees_structure)
		 VALUES (uuid_generate_v4(), 
		   		 #{studentFeesTemplateDetailsObjectId},
		    	(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),      
		    	(SELECT extract(epoch FROM now())), 
	            (SELECT extract(epoch FROM now())),
	            (SELECT rec_id FROM student_fees_template WHERE student_fees_template_code = #{studentFeesTemplate} AND is_active = true),
	            (SELECT rec_id FROM fees_structure WHERE fees_structure_code = #{studentFeesBreakUpCode} AND is_active = true));
	</insert>
	
	<update id="inactiveFeesTemplateDetailsMapping" parameterType="com.qts.icam.model.common.StudentFeesTemplate">
	 	<foreach item="oldFeeTemp" collection="studentFeesTemplateDetailsListOld" index="index" open="" close="" separator=";">
			UPDATE 
				student_fees_template_details 
			SET
				updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on = extract(epoch FROM now()),
				is_active = false
			WHERE
				fees_structure = (SELECT rec_id FROM fees_structure WHERE fees_structure_code = #{oldFeeTemp.studentFeesBreakUpCode} AND is_active = true)
			AND
				student_fees_template = (SELECT rec_id FROM student_fees_template WHERE student_fees_template_code = #{studentFeesTemplateCode} AND is_active = true)
			AND
				is_active=true;
		</foreach>
	</update>
	
	<!-- modified by kaustav.sen 26042017 -->
	
	<select id="selectInactiveStudentFeesTemplateMapping" resultType="com.qts.icam.model.common.StudentFeesTemplate" parameterType="com.qts.icam.model.common.StudentFeesTemplate">
		SELECT DISTINCT
			sft.student_fees_template_code as studentFeesTemplateCode,
			fs.fees_structure_code as studentFeesTemplateDesc
		FROM 
			student_fees_template_details sftd
		JOIN 
			student_fees_template sft ON(sft.rec_id = sftd.student_fees_template AND sft.is_active = true)
		JOIN 
			fees_structure fs ON(fs.rec_id = sftd.fees_structure AND fs.is_active=true)
		WHERE
			sftd.is_active = false
		AND
			sft.student_fees_template_code = #{studentFeesTemplateCode}
		AND
			fs.fees_structure_code = #{studentFeesTemplateDesc};
	</select>
	
	<!-- modified by kaustav.sen 26042017 -->
	
	<update id="updateFeesTemplateMapping" parameterType="com.qts.icam.model.common.StudentFeesTemplate">
		UPDATE 
				student_fees_template_details 
			SET
				updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
				updated_on = extract(epoch FROM now()),
				is_active = true
			WHERE
				fees_structure = (SELECT rec_id FROM fees_structure WHERE fees_structure_code = #{studentFeesTemplateDesc} AND is_active = true)
			AND
				student_fees_template = (SELECT rec_id FROM student_fees_template WHERE student_fees_template_code = #{studentFeesTemplateCode} AND is_active = true)
			AND
				is_active = false;
	</update>
	
	<!-- modified by kaustav.sen 26042017 -->
	
	<insert id="insertNewFeesTemplateMapping" parameterType="com.qts.icam.model.common.StudentFeesTemplate">
		INSERT INTO 
			student_fees_template_details
			(rec_id, obj_id, updated_by, updated_on, date_of_creation, student_fees_template, fees_structure)
		VALUES 
			(uuid_generate_v4(), #{studentFeesTemplateObjectId},
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			extract(epoch FROM now()),extract(epoch FROM now()),
			(SELECT rec_id FROM student_fees_template WHERE student_fees_template_code =#{studentFeesTemplateCode} AND is_active = true),
			(SELECT rec_id FROM fees_structure WHERE fees_structure_code =#{studentFeesTemplateDesc} AND is_active = true));
	</insert>
	
	<update id="updateStudentFeesTemplate" parameterType="com.qts.icam.model.common.StudentFeesTemplate">
		UPDATE 
			student_fees_template 
		SET
			updated_by = (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active = true),
			updated_on = extract(epoch FROM now()),
			student_fees_template_code = #{studentFeesTemplateCode},
			student_fees_template_name = #{studentFeesTemplateName}
		WHERE
			student_fees_template_code = #{studentFeesTemplateCode}
		AND
			is_active = true;
	</update>
	
	<select id="allFeesTemplates" resultType = "com.qts.icam.model.common.StudentFeesTemplate">
		SELECT 
			student_fees_template_code as studentFeesTemplateCode,
			student_fees_template_name as studentFeesTemplateName
		FROM
			student_fees_template
		WHERE 
			is_active = true;
	</select>
	
	<!-- anup.roy//for fetching unmapped standard 11.09.2017 -->	
	<select id="allUnmappedCourses" resultType = "com.qts.icam.model.common.Course">
		(SELECT 
			standard_code as courseCode, standard_name as courseName 
		FROM 
			standard st 
		JOIN
			course c ON (c.standard = st.rec_id AND c.is_active = true)	
		WHERE
			st.is_active = true)
	
		EXCEPT
	
		(SELECT 
			distinct standard_code, standard_name 
		FROM 
			standard st 
		JOIN
			course c ON (c.standard = st.rec_id AND c.is_active = true)
		JOIN 
			student_fees_template_amount sftd ON (sftd.course = c.rec_id AND sftd.is_active = true)
		WHERE
			st.is_active = true);
	</select>
	
	<select id="getAllSocialCategories" resultType = "com.qts.icam.model.common.SocialCategory">
		SELECT 
			social_category_code as socialCategoryCode,
			social_category_name as socialCategoryName
		FROM
			social_category
		WHERE
			is_active = true;		
	</select>
	
	<select id="getTemplateWiseFeesStructure" resultType = "com.qts.icam.model.common.FeesCategory" parameterType = "java.lang.String">
		SELECT 
			fees_structure_code as feesCategoryCode, 
			fees_structure_name as feesCategoryName
		FROM
			fees_structure fs
		JOIN
			student_fees_template_details sftd ON (sftd.fees_structure = fs.rec_id AND sftd.is_active = true)
		JOIN 
			student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)
		WHERE 
			sft.student_fees_template_code = #{templateCode}
		AND 
			fs.is_active = true;
	</select>
	
	<!-- anup.roy 06.08.2017 // modification for removing term -->
	
	<insert id="submitAmountInStudentFeesTemplate" parameterType="com.qts.icam.model.common.SocialCategory">
		INSERT INTO student_fees_template_amount(
	    	rec_id, obj_id, updated_by, updated_on, date_of_creation, is_active, 
	        student_fees_template_amount_code, student_fees_template_details, course, 
	        <!-- term, --> 
	        social_category, amount)
		VALUES ((SELECT	uuid_generate_v4()), 'SFTA-OBJ', 
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),
			(SELECT extract(epoch FROM now())),
			true,
			(SELECT ('SFTA-' ||(select COALESCE((SELECT MAX(student_fees_template_amount_id) FROM student_fees_template_amount), 0 )+1))), 
			(SELECT	sftd.rec_id FROM student_fees_template_details sftd
				JOIN student_fees_template sft ON (sftd.student_fees_template = sft.rec_id) AND (sft.is_active = true)
				JOIN fees_structure fs ON (sftd.fees_structure = fs.rec_id AND fs.is_active = true)
				AND sft.student_fees_template_code = #{objectId}
				AND fs.fees_structure_name = #{socialCategoryCode}), 
			(SELECT c.rec_id FROM course c 
			JOIN standard st ON (c.standard = st.rec_id AND st.is_active = true)
			WHERE st.standard_code = #{desc}
			AND c.is_active = true),
			<!-- (SELECT t.rec_id FROM term t WHERE t.term_code = #{status}), -->
			(SELECT sc.rec_id FROM social_category sc WHERE sc.social_category_name = #{socialCategoryName}), 
			#{amount});
	</insert>
	
	<select id= "getAmountAssignedFeesTemplateList" resultType="com.qts.icam.model.common.StudentFeesTemplate">	
		SELECT 
			DISTINCT
				sft.student_fees_template_name as studentFeesTemplateName,
				sft.student_fees_template_code as studentFeesTemplateCode,
				co.course_name as "course.courseName"
		FROM
			student_fees_template_details sftd
		JOIN fees_structure fs ON (sftd.fees_structure = fs.rec_id AND fs.is_active = true)	
		JOIN student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)				
		JOIN student_fees_template_amount sfta ON (sfta.student_fees_template_details = sftd.rec_id AND sfta.is_active = true)
		JOIN course co ON (sfta.course = co.rec_id AND co.is_active = true)	
		WHERE
			sftd.is_active = true;
	</select>
	
	<resultMap id="getAmountAssignedFeesTemplateListResultMap" type="com.qts.icam.model.common.FeesCategory">		
		<id property="feesCategoryCode" column="fees_structure_code" jdbcType="VARCHAR" />
		<result property="feesCategoryName" column="fees_structure_name" jdbcType="VARCHAR" />
		<collection property="socialCategoryList" ofType="com.qts.icam.model.common.SocialCategory">
			<id property="socialCategoryId" column="student_fees_template_amount_id" jdbcType="INTEGER" />
			<result property="socialCategoryCode" column="social_category_code" jdbcType="VARCHAR" />
			<result property="socialCategoryName" column="social_category_name" jdbcType="VARCHAR" />
			<result property="amount" column="amount" jdbcType="DOUBLE" />			
		</collection>
	</resultMap>
	
	<!-- anup.roy//fetch assigned amount list -->
	
	<select id= "getAmountAssignedFeesTemplateDetails" parameterType="java.lang.String" resultMap="getAmountAssignedFeesTemplateListResultMap">	
		SELECT	
			sfta.student_fees_template_amount_id,		
			fs.fees_structure_code,
			fs.fees_structure_name,
			sc.social_category_code, 
			sc.social_category_name, 
			amount
		FROM 
			student_fees_template_amount sfta
		JOIN student_fees_template_details sftd ON (sfta.student_fees_template_details = sftd.rec_id AND sftd.is_active = true)
		JOIN student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)
		JOIN course c ON (c.rec_id = sfta.course AND c.is_active = true)
		JOIN standard st ON (c.standard = st.rec_id AND st.is_active = true)
		JOIN social_category sc ON (sc.rec_id = sfta.social_category AND sc.is_active = true)
		JOIN fees_structure fs ON (fs.rec_id = sftd.fees_structure AND fs.is_active = true)
		WHERE
			sfta.is_active = true
		AND
			st.standard_code = #{courseName}
		ORDER BY 
			fs.fees_structure_name, sc.social_category_name;		
	</select>
	
	<update id="inactiveAmountDetailsForStudentFeesTemplate" parameterType="com.qts.icam.model.common.SocialCategory">
		UPDATE				
			student_fees_template_amount
		SET 
			is_active = false,
			updated_by = (SELECT rec_id FROM resource WHERE user_id = trim(#{updatedBy}) AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now()))
		WHERE
			course = (SELECT c.rec_id FROM course c WHERE c.course_name = trim(#{desc}))
		AND
			social_category = (SELECT sc.rec_id FROM social_Category sc WHERE sc.social_category_name = trim(#{socialCategoryName}))
		AND
			student_fees_template_details = (SELECT sftd.rec_id FROM student_fees_template_details sftd
							JOIN student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)
							JOIN fees_structure fs ON (fs.rec_id = sftd.fees_structure AND fs.is_active = true)
							WHERE
								sftd.is_active = true
							AND
								fs.fees_structure_name = trim(#{socialCategoryCode})
							AND
								sft.student_fees_template_code = trim(#{objectId}))
	</update>
	
	<select id="getCourseForClass" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Course">
		SELECT
			course_code as courseCode,
			course_name as courseName
		FROM
			course co
		JOIN 
			standard st ON (co.standard = st.rec_id AND st.is_active = true)
		WHERE
			co.is_active = true
		AND
			st.standard_code = #{standardCode};
	</select>
	
	<!-- anup.roy//for fetch the sections for a standard -->
	
	<select id="getSectionForStandard" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Section">
		SELECT
			sec.section_code as sectionCode,
			sec.section_name as sectionName
		FROM 
			section sec
		JOIN
			standard st ON (sec.standard = st.rec_id AND st.is_active = true)
		WHERE	
			sec.is_active = true
		AND
			st.standard_code = #{standardCode}
		AND
			sec.section_name IS NOT NULL 
		AND
			sec.section_name != 'NA'
	</select>
	
	<!-- anup.roy//for get students against standard and section -->
	
	<select id="getStudentAgainstSection" parameterType = "com.qts.icam.model.common.Section" resultType = "com.qts.icam.model.common.Student">
		SELECT
			scm.roll_number as rollNumber,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,' ') as studentName
		FROM
			student_course_mapping scm
		JOIN
			resource r ON (scm.user_id = r.user_id AND r.is_active = true)	
		JOIN
			course c ON (scm.course = c.rec_id AND c.is_active = true)
		JOIN
			standard st ON (c.standard = st.rec_id AND st.is_active = true)		
		JOIN
			section sec ON (scm.section = sec.rec_id AND sec.is_active = true)
		WHERE
			st.standard_code = #{desc}
		AND	
			sec.section_code = #{sectionCode}
		AND
			scm.roll_number IS NOT NULL	
		AND
			scm.is_active = true;
	</select>
	
	<!-- anup.roy//for getting fees structure against student -->
	
	<select id="getFeeStructureAgainstStudent" resultType="com.qts.icam.model.common.FeesCategory" parameterType="com.qts.icam.model.common.FeesCategory">
		SELECT
			fs.fees_structure_code as feesCategoryCode,
			fs.fees_structure_name as feesCategoryName,
			sfta.amount as fees,
			fd.fees_duration_name as updatedBy,
			sfta.student_fees_template_amount_code as feesStructureId
		FROM
			course co
		JOIN
			standard st ON (co.standard = st.rec_id AND st.is_active = true)
		JOIN
			student_fees_template_amount sfta ON (sfta.course = co.rec_id AND sfta.is_active = true)
		JOIN
			social_category sc ON (sfta.social_category = sc.rec_id AND sc.is_active = true)
		JOIN
			student_fees_template_details sftd ON (sfta.student_fees_template_details = sftd.rec_id AND sftd.is_active = true)
		JOIN
			student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)
		JOIN 
			fees_structure fs ON (sftd.fees_structure = fs.rec_id AND fs.is_active = true)
		JOIN						
			fees_duration fd ON (fs.fees_duration = fd.rec_id AND fd.is_active = true)
		WHERE	
			sc.social_category_name = (SELECT
											soc.social_category_name
									   FROM
											resource r
									   JOIN
											social_category soc ON (soc.rec_id = r.social_category AND soc.is_active = true)
									   WHERE
											r.user_id = #{student}
									   AND
											r.is_active = true
									   )
		AND
			st.standard_code = #{klass}
		AND
			fd.fees_duration_name NOT IN ('ONE TIME','YEARLY');
	</select>
	
	<!-- anup.roy// this is to fetch individual paid fee -->
	
	<select id="getIndividualPaidFee" parameterType="com.qts.icam.model.common.FeesCategory" resultType="com.qts.icam.model.common.SessionFees">
		SELECT
			sum(sfpd.amount_payable) as netTotAmount
		FROM
			student_fees_paid_details sfpd
		JOIN
			student_fees_paid sfd ON (sfpd.student_fees_paid = sfd.rec_id AND sfd.is_active = true)
		JOIN 
			resource r ON (sfd.student_id = r.rec_id AND r.is_active = true)
		JOIN 
			student_fees_template_amount sfta ON (sfpd.student_fees_template_amount = sfta.rec_id AND sfta.is_active = true)
		JOIN
			course co ON (sfta.course = co.rec_id AND co.is_active = true)
		JOIN 
			standard st ON (co.standard = st.rec_id AND st.is_active = true)
		WHERE 
			r.user_id = #{student}
		AND 
			st.standard_code= #{klass}
		AND 
			sfta.student_fees_template_amount_code = #{feesCategoryObjectId}
		AND
			sfpd.is_active = true;
	</select>
	
	<select id="getPreviousDatesAndCommentOfPayment" parameterType="com.qts.icam.model.common.FeesCategory" resultType="com.qts.icam.model.common.SessionFees">
		SELECT
			(to_char((SELECT to_timestamp(sfpd.date_of_creation)), 'DD/MM/YYYY')) as dateOfPayment,
			sfpd.comment as comment
		FROM
			student_fees_paid_details sfpd
		JOIN
			student_fees_paid sfd ON (sfpd.student_fees_paid = sfd.rec_id AND sfd.is_active = true)
		JOIN 
			resource r ON (sfd.student_id = r.rec_id AND r.is_active = true)
		JOIN 
			student_fees_template_amount sfta ON (sfpd.student_fees_template_amount = sfta.rec_id AND sfta.is_active = true)
		JOIN
			course co ON (sfta.course = co.rec_id AND co.is_active = true)
		JOIN 
			standard st ON (co.standard = st.rec_id AND st.is_active = true)
		WHERE 
			r.user_id = #{student}
		AND 
			st.standard_code= #{klass}
		AND 
			sfta.student_fees_template_amount_code = #{feesCategoryObjectId}
		AND
			sfpd.is_active = true;
	</select>
	
	<update id="deleteStudentFeesTemplateAmountDetails" parameterType="com.qts.icam.model.common.Resource">
		UPDATE 
			student_fees_template_amount
		SET 
			is_active = false,
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now()))
		WHERE
			course = (SELECT c.rec_id FROM course c 
						WHERE c.course_name = trim(#{courseName})
						AND c.is_active = true)
		AND
			is_active = true;
	</update>
	
	<!-- <select id="fetchTeachersForAttendance" parameterType="com.qts.icam.model.common.Resource" resultType = "com.qts.icam.model.common.Resource">
		SELECT
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name) as teacherName,
			r.user_id as userId
			
		FROM
			resource r
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id)
		JOIN
			employee_details ed ON (r.rec_id = ed.resource)
		JOIN
			job_type jt ON (ed.job_type = jt.rec_id)
		WHERE
			r.resource_type = (SELECT rec_id FROM resource_type WHERE resource_type_name = #{resourceTypeName})
		AND
			ed.job_type = (SELECT rec_id FROM job_type WHERE job_type_name = #{jobType.jobTypeName})
		AND	
			r.is_active = true;
	</select> -->
	
	<select id="fetchTeachersForAttendance" parameterType="com.qts.icam.model.common.Resource" resultType = "com.qts.icam.model.common.Resource">
		SELECT
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name) as teacherName,
			r.user_id as userId
			
		FROM
			resource r
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id)
		JOIN
			employee_details ed ON (r.rec_id = ed.resource)
		JOIN
			job_type jt ON (ed.job_type = jt.rec_id)
		WHERE
			r.resource_type = (SELECT rec_id FROM resource_type WHERE resource_type_name = #{resourceTypeName})
		AND
			ed.job_type = (SELECT rec_id FROM job_type WHERE job_type_name = #{jobType.jobTypeName})
		AND	
			r.is_active = true;
	</select>
	
	<resultMap id="resultMapOfFetchTeacherssAttendanceDateOfCreation" type="com.qts.icam.model.common.StudentAttendance">
		<id property="attendanceDesc" column="date_of_creation" jdbcType="VARCHAR" />
	</resultMap>
	<select id="fetchTeachersAttendanceDateOfCreation"
		parameterType="com.qts.icam.model.common.StudentAttendance" resultMap="resultMapOfFetchTeacherssAttendanceDateOfCreation">
		SELECT
			distinct 
			(SELECT to_char((SELECT to_timestamp(td.date_of_creation)), 'DD/MM/YYYY'))as date_of_creation
		FROM 
			teacher_attendance td
		JOIN 
			resource r ON (td.resource = r.rec_id AND r.is_active = true)
		WHERE
			td.is_active = true
		AND
			td.month = #{month}
		AND
			td.year = #{year}
		AND
			r.user_id = #{resourceId};
	</select>
	
	<insert id="insertIntoVenueTeacherMapping" parameterType="com.qts.icam.model.common.Resource">
		INSERT INTO venue_teacher_mapping(
						    rec_id,
				            obj_id, 
				            updated_by, 
				            updated_on, 
				            date_of_creation,
				            venue,
				            resource,
				            course)
    	VALUES
		    	(uuid_generate_v4(), 
			    #{objectId}, 
			    (SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = true), 
			    (SELECT extract(epoch FROM now())),
			    (SELECT extract(epoch FROM now())),
			    (SELECT rec_id FROM venue WHERE venue_code = #{code} AND is_active = true),
		        (SELECT rec_id FROM resource WHERE user_id=#{resourceType.resourceTypeCode} AND is_active = true),
		        (SELECT rec_id FROM course  WHERE course_code = #{courseName} ));	
	</insert>
	
	<!-- 	/************Added By Naimisha 20042017*********/ -->
	<select id="getStudentListForACourse" parameterType="java.lang.String" resultType = "com.qts.icam.model.common.Student">
		<!-- SELECT 
			r.roll_number as roll,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,'  ')  as studentName,
			c.course_acronym as studentCode
		FROM
			resource r 
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN
			course c ON (r.course = c.rec_id AND c.is_active = true)
		JOIN
			section s ON (r.section = s.rec_id AND s.is_active = true)
		WHERE
			rt.resource_type_code = 'STUDENT'
		AND 
			c.course_code = #{course}
		AND
			r.roll_number IS NOT NULL -->
		SELECT 
			scm.roll_number as roll,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,'  ')  as studentName,
			c.course_acronym as studentCode
		FROM
			resource r 
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN
			student_course_mapping scm ON (scm.user_id = r.user_id ANd scm.is_active = true)
		JOIN
			course c ON (scm.course = c.rec_id AND c.is_active = true)
		JOIN
			section s ON (scm.section = s.rec_id AND s.is_active = true)
		WHERE
			rt.resource_type_code = 'STUDENT'
		AND 
			c.course_code = #{course}
		AND
			scm.roll_number IS NOT NULL
	
	</select>
	
	<select id="getStudentListForAssigningRollNumber" parameterType="java.lang.String" resultType = "com.qts.icam.model.common.Student">
		SELECT 
			scm.roll_number as roll,
			r.user_id as registrationId,
			r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,'  ')  as studentName,
			c.course_acronym as studentCode,
			s.section_Name as section
		FROM
			resource r 
		JOIN 
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		JOIN
			student_course_mapping scm ON (scm.user_id = r.user_id ANd scm.is_active = true)
		JOIN
			course c ON (scm.course = c.rec_id AND c.is_active = true)
		JOIN
			section s ON (scm.section = s.rec_id AND s.is_active = true)
		WHERE
			rt.resource_type_code = 'STUDENT'
		AND 
			c.course_code = #{course}
		AND
			scm.roll_number IS  NULL;
	
	</select>
	<update id="insertRollNumberForStudent" parameterType="com.qts.icam.model.common.Student">
			
		UPDATE 
			student_course_mapping
		SET 
			roll_number = #{roll},
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now()))
		WHERE
			user_id = #{registrationId}
		AND
			course = (SELECT rec_id FROM course c WHERE c.course_code =#{courseId} AND c.is_active = true)
		AND
			is_active = true;
	</update>
	
	
	<!-- /*********Added By Naimisha 21042017*********/ -->
	
	<insert id="insertIntoProgramPolicy" parameterType="com.qts.icam.model.common.Course">
		INSERT INTO programme_policy(
            rec_id, obj_id, updated_by, updated_on, 
            date_of_creation,programme_duration)
    VALUES (
    		(select uuid_generate_v4()),
			#{objectId},
			(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
		 	(SELECT extract(epoch FROM now())), (SELECT extract(epoch FROM now())), 
         	 #{desc});
	</insert>
	<select id="getProgramPolicy" resultType = "java.lang.String">
		SELECT
			programme_duration as desc
		FROM
			programme_policy 
		WHERE
			is_active  = true;
	
	</select>
	
	<delete id="deleteProgramPolicy">
		DELETE FROM programme_policy;
	</delete>
	
	<insert id="insertStudentCourseSectionMapping" parameterType="com.qts.icam.model.common.Student">
		INSERT INTO student_course_mapping(
            rec_id, obj_id, updated_by, updated_on, date_of_creation, 
            course, user_id, section, roll_number)
   		 VALUES ((select uuid_generate_v4()), #{objectId},
		    (SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
		    (SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())), 
            (SELECT rec_id FROM course WHERE course_code = #{courseId}), #{resourceUserId},
            (SELECT s.rec_id FROM section s JOIN standard st ON (s.standard = st.rec_id AND st.is_active = true)JOIN course c ON (c.standard = st.rec_id AND c.is_active = true)WHERE course_code = #{courseId} AND s.section_code='NA' AND s.is_active = true),
           	#{resourceUserId}
           	);
	</insert>
	<update id="updateStudentCourseMapping" parameterType="com.qts.icam.model.common.Student">
		UPDATE 
			student_course_mapping
		SET 
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now())),
			section = (SELECT s.rec_id FROM section s JOIN standard st ON (s.standard = st.rec_id AND st.is_active = true)JOIN course c ON (c.standard = st.rec_id AND c.is_active = true)WHERE course_code = #{courseId} AND s.section_code= #{section} AND s.is_active = true)
		WHERE
			course = (SELECT rec_id FROM course WHERE course_code = #{courseId} AND is_active = true)
		AND
			uesr_id = #{userId}
		AND
			is_active = true;
	</update> 
	<update id="updatePrintAdmissionForm" parameterType="com.qts.icam.model.common.Student">
		UPDATE 
			print_admission_form
		SET 
			resource_enrolled = true,
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			updated_on = (SELECT extract(epoch FROM now())),
			status = (SELECT rec_id FROM status_flag WHERE status_sym = 'O') 
		WHERE
			course = (SELECT rec_id FROM course WHERE course_code = #{courseId} AND is_active = true)
		AND
			application_id = #{strFormId}::integer
		AND
			is_active = true;
	</update>
	
	<select id="listOfTermsForFeesTmplates" resultType="com.qts.icam.model.backoffice.Term" parameterType="java.lang.String">
		SELECT
			term_code as termCode,
			term_name as termName
		FROM
			term t
		JOIN
			course c ON (t.course = c.rec_id AND c.is_active = true)
		<!-- JOIN
			academic_year ay ON (ay.rec_id = t.academic_year AND ay.is_active = true) -->
		<!-- JOIN
			status_flag sf ON (ay.year_status = sf.rec_id AND sf.is_active = true) -->
		WHERE
			<!-- sf.status_sym = 'C' 
		AND  -->
			c.course_code = #{program};
	</select>
	
	<select id="getProgramsForInterviewPanel" resultType = "com.qts.icam.model.common.Course">
		SELECT
			course_code as courseCode,
			course_name as courseName
		FROM
			course
		WHERE
			is_active = true
		ORDER BY
			date_of_creation DESC;			
	</select>
	
	<select id="selectFinedBookDetails" resultType="com.qts.icam.model.library.BookAllocation">
		<![CDATA[ 	 SELECT 	
		  	r.user_id as bookAllocationObjectId,
		  	ba.book_allocation_code as bookAllocationCode,
		  	to_char((SELECT to_timestamp(bad.book_return_date)), 'DD/MM/YYYY' ) as bookReturnDate
		FROM	
			book_request br
		JOIN
			resource r ON (r.rec_id=br.book_resource_id AND r.is_active=true)
	
		JOIN 
			book_allocation ba ON (ba.request_id=br.rec_id AND br.is_active=true)
		JOIN  
				
			book_allocation_details bad ON (bad.book_allocation=ba.rec_id AND bad.is_active=true)
		WHERE
			bad.book_return_date <(SELECT extract(epoch FROM now()))
		AND
			ba.is_active=true; 
			]]>
	</select>
	
	<!-- anup.roy//for getting marks for tc -->
	
	<select id="getMarksOfAllSubjectForPromotion" resultType="com.qts.icam.model.academics.StudentResult"  parameterType="com.qts.icam.model.common.Student">
		SELECT
			subject as subject,
			theory_obtained as theoryObtained,
			practical_obtained as practicalObtained,
			total_obtained as totalObtained,
			pass_fail as passFail
		FROM
			student_marks_v1 sm
		WHERE
			sm.standard = #{standard}
		AND
			sm.section = #{section}
		AND
			sm.is_active = true;
	</select>
	<select id="getCourseNameAgainstCourseCode" resultType="java.lang.String"  parameterType="java.lang.String">
		SELECT
			course_name 
		FROM
			course
		
		WHERE
			course_code = #{course}
		AND
			is_active = true;
	</select>
	
	<select id="getTermNameAgainstTermCode" resultType="java.lang.String"  parameterType="java.lang.String">
		SELECT
			term_name 
		FROM
			term
		
		WHERE
			term_code = #{desc}
		AND
			is_active = true;
	</select>
	
	<!-- modified by sourav.bhadra on 19-09-2017 -->
	<select id="selectBankDetails" resultType="com.qts.icam.model.common.Vendor" parameterType="com.qts.icam.model.common.Vendor">
		SELECT
			v.bank_name as bankName,
			v.bank_code as bankCode
		FROM
			bank v
		WHERE
			v.is_active =true;
	</select>
	
	<!-- ranita.sur 28062017 -->
	
	<insert id="insertBank" parameterType="com.qts.icam.model.common.Vendor">
		INSERT INTO 
				bank
					(
						rec_id,	obj_id,updated_by,updated_on,date_of_creation,
						bank_code,bank_name,bank_ifsc_code,
						bank_account_no,bank_branch_name,bank_address,branch_code,opening_balance
					)
		VALUES 
					(
						uuid_generate_v4(),
						#{vendorObjectId},
						(SELECT rec_id FROM resource WHERE user_id ilike #{updatedBy} AND is_active =true),
						extract(epoch FROM now()),
						extract(epoch FROM now()),
					    (select (#{bankName})|| '_' ||COALESCE((SELECT MAX(bank_id) FROM bank), 0)+1),
						#{bankName},
						#{bankIfscCode},
						#{accountNo},
						#{branchName},
						#{bankLocation},
						#{bankBranchCode},
						#{openingBal}
					);
	</insert>
	
	<!-- ranita.sur 21062017 -->
	
	<select id="selectBank" resultType="com.qts.icam.model.common.Vendor" parameterType="com.qts.icam.model.common.Vendor">
		SELECT
			v.bank_code as bankCode,
			v.bank_name as bankName,
			v.bank_ifsc_code as bankIfscCode,
			v.bank_account_no as accountNo,
			v.bank_branch_name as branchName,
			v.bank_address as bankLocation,
			v.branch_code as bankBranchCode
		FROM
			bank v
		WHERE
			v.is_active =true;
	</select>
	
	<!-- ranita.sur 21062017 -->
	
	<update id="editBankDetails" parameterType="com.qts.icam.model.common.Vendor">
		UPDATE Bank SET
			updated_by =(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active=true),
			updated_on =(SELECT extract(epoch FROM now())),
			
			bank_name= #{bankName},
			bank_branch_name=#{branchName},
			bank_account_no = #{accountNo},
			bank_ifsc_code = #{bankIfscCode},
			branch_code = #{bankBranchCode},
			bank_address = #{bankLocation}
		WHERE
			bank_code = #{bankCode}
		AND
			is_active=true;
	</update>
	
	<update id="inactiveBankDetails" parameterType="com.qts.icam.model.common.Vendor">
	 	UPDATE 
			bank
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			updated_on=extract(epoch FROM now()),
			is_active=false
		WHERE
			bank_code = #{bankCode}
		AND
			is_active=true;
	</update>
	
	<!-- changes for ledgerParentGroup Delete ranita.sur 14082017 -->
	<!-- modified by sourav.bhadra 23-04-2018 -->
	<insert id="insertinLedger" parameterType="com.qts.icam.model.common.Ledger">
		INSERT INTO 
				ledger
					(
						rec_id,
						obj_id, 
						updated_by,
						updated_on,
						date_of_creation, 
						is_active,
						ledger_code,
						ledger_name,
						parent_group,
						subgroup,
						ledger_type
					)
		VALUES
					(
						(uuid_generate_v4()), 
					    #{objectId},
						(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active =true),
						(SELECT extract(epoch FROM now())),
						(SELECT extract(epoch FROM now())),
						true,
						#{ledgerName},
						#{ledgerName},
						(SELECT rec_id FROM group_for_ledger WHERE group_code ='CURRENT ASSETS' AND is_active =true),
						(SELECT rec_id FROM group_for_ledger WHERE group_code='CASH AND CASH EQUIVALENTS' AND is_active=true),
						'BANK'
					);
			
	INSERT INTO 
			ledger_balance
					(
						rec_id, 
						obj_id, 
						updated_by, 
						updated_on,
					    date_of_creation, 
						is_active,
					    ledger, 
					    month, 
					    year, 
					    opening_balance, 
					    current_balance, 
					    is_current
				    )
	VALUES 
					(
						(select uuid_generate_v4()), 
					    #{objectId},
						(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active =true),
						(SELECT extract(epoch FROM now())), 
						(SELECT extract(epoch FROM now())), 
						true,
						(SELECT rec_id FROM ledger WHERE ledger_code ilike #{ledgerName} AND is_active =true),
						(SELECT EXTRACT(MONTH FROM (SELECT now()))), 
						(SELECT EXTRACT(YEAR FROM (SELECT now()))),
						#{openingBal}, 
						#{openingBal}, 
						true
					);
	</insert>
	
	<!-- added by ranita.sur 28062017 -->
	
	<update id="editinLedgerBalance" parameterType="com.qts.icam.model.common.Ledger">
	 	UPDATE 
			ledger_balance
		SET
			updated_by=(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			updated_on=extract(epoch FROM now()),
			current_balance= current_balance+#{openingBal}
			
		WHERE
			ledger =(SELECT rec_id FROM ledger WHERE ledger_code='BANK' AND is_active =true) 
		AND
			is_active=true;
	</update>
	
	<select id="selectAdmissionModeForACourse" resultType="java.lang.String" parameterType="java.lang.String">
			SELECT 
				admission_mode as admissionMode
			FROM
				course
			WHERE
				course_code = #{courseId}
			AND
				is_active = true;
	</select>
	
	<!-- naimisha 03072017 -->
	
	<select id = "getFormIdAgainstOfflineCourseId" resultType="com.qts.icam.model.admission.Form" parameterType = "com.qts.icam.model.common.Course">
		 <!-- SELECT 
			rec_id,
			print_admission_form_code as strFormId
		FROM
			print_admission_form 
		WHERE 
			print_admission_form_name = (SELECT
												admission_drive_name FROM admission_drive ad
											JOIN 
												course cr ON (ad.course = cr.rec_id AND cr.is_active = true)
											JOIN 
												admission_drive_status ads ON (ad.status_of_admission = ads.rec_id AND ads.is_active = true)	
											WHERE 
												ad.status_of_admission=(SELECT rec_id FROM admission_drive_status WHERE admission_drive_status_code = 'ONGOING')	
											AND
												course =(SELECT rec_id FROM course WHERE course_code = #{courseName} AND is_active = true))	
		AND 
			form_fees_paid_status = 'FEESPAID'
		AND 
			phase_admitted = 'ADMITTED'
		AND
			resource_enrolled = false	
		AND
			is_active = true;  -->
		SELECT 
			rec_id,
			print_admission_form_code as strFormId
		FROM
			print_admission_form 
		WHERE 
			print_admission_form_name = #{desc}
		AND
			course = (SELECT rec_id FROM course WHERE course_code = #{courseName} AND is_active = true)
		AND 
			form_fees_paid_status = 'FEESPAID'
		AND 
			phase_admitted = 'ADMITTED'
		AND
			resource_enrolled = false	
		AND
			is_active = true; 
	</select>
	
	<select id="selectCandidateDetailsAgainstFromIdForOffline" parameterType="com.qts.icam.model.common.Resource" resultType="com.qts.icam.model.common.Student">
 		SELECT 
			first_name as "resource.firstName",
			middle_name as "resource.middleName",
			last_name as "resource.lastName",
			to_char((SELECT to_timestamp(date_of_birth)),'DD/MM/YYYY')as "resource.dateOfBirth",
			user_id as userId,
  			email_address as "resource.emailId",
  			to_char((SELECT to_timestamp(updated_on)),'DD/MM/YYYY')as dateOfAdmission,
  			registration_id as registrationId
 			
 		FROM 
 			print_admission_form
 		WHERE
 			print_admission_form_code = #{admissionFromId}
 		AND
 			print_admission_form_name = #{admissionDriveNameId}
 		AND
 			course = (SELECT rec_id FROM course c WHERE c.course_code =  #{courseName} AND c.is_active = true )	
 		AND
 			is_active = true;
	</select>
	
	<!-- added by sourav.bhadra on 17-07-2017
		to insert special holidays -->
	<select id="insertSpecialHolidays" parameterType="com.qts.icam.model.backoffice.Holiday">
		INSERT INTO holiday_special_details(
	            rec_id, obj_id, updated_by, updated_on, date_of_creation,
	            special_holiday_code, special_holiday_name, 
	            month, year, holiday_mode, holiday_date)
	    VALUES (
			(SELECT	uuid_generate_v4()), 
			#{holidayObjectId},
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = 'true'), 
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())),
			(select 'SPECIAL_HOLIDAY-' || #{month} || '-' || #{year} || ' ' || COALESCE((SELECT MAX(special_holiday_id) FROM holiday_special_details), 0)+1),
			(select 'SPECIAL_HOLIDAY-' || #{month} || '-' || #{year} || ' ' || COALESCE((SELECT MAX(special_holiday_id) FROM holiday_special_details), 0)+1),
			#{month}, #{year}, #{mode}, 
			(SELECT extract(epoch FROM to_timestamp(#{specialHoliday}, 'DD/MM/YYYY')))
		);
	</select>
	
	<!-- added by sourav.bhadra on 17-07-2017
		to fetch special holidays against month and academicYear -->
	<select id="fetchSpecialHolidaysList" parameterType="com.qts.icam.model.backoffice.Term" resultType="com.qts.icam.model.backoffice.Holiday">
		SELECT 
			special_holiday_code as holidayCode, 
			special_holiday_name as holidayName, 
		    holiday_mode as mode, 
		    to_char((SELECT to_timestamp(holiday_date)), 'DD/MM/YYYY') as specialHoliday
		FROM 
			holiday_special_details
		WHERE 
			month=#{termStartDate}
		AND 
			year=#{academicYear}
		AND 
			is_active=true;
	</select>
	
	<!-- saif.ali 13072017 -->
	
	<insert id="insertMajorEvents" parameterType="com.qts.icam.model.backoffice.MajorEvents">
		INSERT INTO 
			major_events
					(
	            		rec_id, obj_id, updated_by, updated_on, date_of_creation, 
	            		major_events_date, major_events_desc
            		)
	    VALUES 		(
	    				(select uuid_generate_v4()), #{majorEventObjId},
				    	(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
						(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
						(SELECT	extract(epoch from (SELECT to_timestamp(#{majorEventDate},'DD-MM-YYYY')))), 
						UPPER(#{majorEventDesc})
					);
	</insert>

	<!-- added by sourav.bhadra on 20-07-2017
		to fetch special holidays against month and academicYear -->
	<select id="fetchHolidayDetailsOfAMonth" parameterType="java.util.Map" resultType="com.qts.icam.model.backoffice.Term">
		SELECT 
			special_holiday as count,
			total_workingdays as noOfWorkingDays,
			academic_year as academicYear,
			month as termStartDate
		FROM 
			holiday_details
		WHERE 
			month=#{month}
		AND 
			year=#{year}
		AND 
			is_active=true;
	</select>

	<!-- author saif.Ali -->
	<select id="selectResourceForLeavePolicy" resultType="com.qts.icam.model.common.ResourceType">
		SELECT 
      		resource_type_name as resourceTypeName,
      		resource_type_code as resourceTypeCode
		FROM 
			resource_type  		
  		WHERE 
  			is_active=true
  		 AND
  			resource_type_code!='SUPERADMIN'
		AND 
			resource_type_code!='STUDENT'; 
	</select>
	
	<insert id="insertLeavepolicy" parameterType="com.qts.icam.model.backoffice.LeavePolicy">
		INSERT INTO leave_policy(
	            rec_id, obj_id, updated_by, updated_on, date_of_creation, 
	            encashment_rate,carry_forward_year, resource_type)
	    VALUES ((select uuid_generate_v4()), #{leavePolicyObjectId},
	    	(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{dailyEncashment},#{noOfYearsCarryForward},
			(SELECT rec_id FROM resource_type WHERE resource_type_name  ilike #{resourceTypeSelect} AND is_active = true));
	</insert>
	
	<!-- Author Saif.Ali  Date-18/07/2017-->
	<select id="leavePolicyListToShowAccordingToResouceType" parameterType="java.lang.String"
		resultType="com.qts.icam.model.backoffice.LeavePolicy">
		SELECT
			encashment_rate as dailyEncashment,
			carry_forward_year as noOfYearsCarryForward
		FROM
			leave_policy lp
		JOIN 
			resource_type rt ON (rt.rec_id = lp.resource_type)
		WHERE
			lp.is_active = true
		AND
			rt.resource_type_name = #{resourceType.resourceTypeName}
	</select>
	
	<update id="updateLeavePoilicyForResourceType" parameterType="com.qts.icam.model.backoffice.LeavePolicy">
		update
			leave_policy 
		set
			updated_by=(SELECT rec_id FROM resource WHERE user_id=#{updatedBy} AND is_active = 'true'),
			updated_on=(SELECT extract(epoch FROM now())),
			encashment_rate =#{dailyEncashment},
			carry_forward_year = #{noOfYearsCarryForward}
		WHERE
			is_active = true
		AND
			resource_type = (SELECT rec_id FROM resource_type WHERE resource_type_name ilike #{resourceTypeSelect} AND is_active = true);
	</update>
	
	<!-- fetch student personal details for profile -->
	
	<resultMap id="getStudentPersonalDetailsResultMap" type="com.qts.icam.model.common.Student">
		<id property="userId" column="roll_number" jdbcType="VARCHAR" />
		<result property="studentName" column="studentFullName" jdbcType="VARCHAR" />	
		<result property="courseId" column="print_admission_form_class" jdbcType="VARCHAR" />
		<result property="stateOfDomicile" column="state_name" jdbcType="VARCHAR" />
		<result property="standard" column="standard_name" jdbcType="VARCHAR" />
		<result property="house" column="hostel_name" jdbcType="VARCHAR" />
		<result property="fatherIncome" column="father_annual_income" jdbcType="VARCHAR" />
		<result property="motherIncome" column="mother_annual_income" jdbcType="VARCHAR" />
		<result property="guardianFirstName" column="guardianFullFirstName" jdbcType="VARCHAR" />
		<result property="previousAchivement" column="previous_achivement" jdbcType="VARCHAR" />
		<association property="resource" javaType="com.qts.icam.model.common.Resource">
			<result property="dateOfBirth" column="dateOfBirth" jdbcType = "VARCHAR"/>
			<result property="category" column="social_category_name" jdbcType="VARCHAR" />
			<result property="bloodGroup" column="blood_group" jdbcType="VARCHAR" />
			<result property="fatherFirstName" column="fatherFirstName" jdbcType="VARCHAR" />
			<result property="fatherOccupation" column="father_occupation" jdbcType="VARCHAR" />
			<result property="motherFirstName" column="motherFirstName" jdbcType="VARCHAR" />
			<result property="motherOccupation" column="mother_occupation" jdbcType="VARCHAR" />
			<result property="accountNumber" column="bank_account_number" jdbcType="VARCHAR" />
			<result property="aadharCardNo" column="aadhar_card_no" jdbcType="VARCHAR" />
			<result property="childId" column="child_id" jdbcType="VARCHAR" />
			<result property="foodPreference" column="food_preference" jdbcType="VARCHAR" />
			<result property="firstPickUpPlace" column="pickup_place" jdbcType="VARCHAR" />
			<result property="hobbies" column="hobbies" jdbcType="VARCHAR" />
			<result property="personalIdentificationMark" column="personal_identification" jdbcType="VARCHAR" />
			<collection property="attachmentList" ofType="com.qts.icam.model.common.Attachment">
				<id property="storageObjectId" column="attachment_id" jdbcType="VARCHAR" />
				<result property="storageRootPath" column="attachment_location" jdbcType="VARCHAR" />
				<result property="attachmentName" column="attached_file_name" jdbcType="VARCHAR" />
				<result property="attachmentType" column="attachment_type_name" jdbcType="VARCHAR" />
			</collection>
		</association>
	</resultMap>
	<select id="getStudentPersonalDetails" parameterType="java.lang.String" resultMap="getStudentPersonalDetailsResultMap">
		SELECT
			scm.roll_number,
			(r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,' ')) as studentFullName,
			paf.print_admission_form_class,
			st.state_name,
			s.standard_name,
			h.hostel_name,
			r.father_annual_income,
			r.mother_annual_income,
			(r.guardian_first_name || ' ' || COALESCE(r.guardian_middle_name,' ') || ' ' || COALESCE(r.guardian_last_name,' ')) as guardianFullFirstName,
			r.previous_achivement,
			(to_char((SELECT to_timestamp((r.date_of_birth))), 'DD/MM/YYYY')) as dateOfBirth,
			sc.social_category_name,
			r.blood_group,
			r.father_first_name || ' ' || COALESCE(r.father_middle_name,' ') || ' ' || COALESCE(r.father_last_name,' ') as fatherFirstName,
			r.father_occupation,
			r.mother_first_name || ' ' || COALESCE(r.mother_middle_name,' ') || ' ' || COALESCE(r.mother_last_name,' ') as motherFirstName,
			r.mother_occupation,
			r.bank_account_number,
			r.aadhar_card_no,
			r.child_id,
			r.food_preference,
			r.pickup_place,
			r.hobbies,
			r.personal_identification,
			att.attachment_id,
			att.attachment_location,
			att.attached_file_name,
			attp.attachment_type_name
		FROM
			resource r
		JOIN
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)	
		JOIN
			print_admission_form paf ON (r.print_admission_form_id = paf.rec_id AND paf.is_active = true)
		JOIN
			social_category sc ON (r.social_category = sc.rec_id AND sc.is_active = true)
		LEFT JOIN 
			attachment att ON (r.rec_id = att.resource AND att.is_active = true)
		LEFT JOIN 
			attachment_type attp ON (att.attachment_type = attp.rec_id AND attp.is_active = true)	
		JOIN	
			state st ON (r.state_of_domicile = st.state_code AND st.is_active = true)
		JOIN	
			student_course_mapping scm ON (r.user_id = scm.user_id AND scm.is_active = true)
		JOIN
			course c ON (scm.course = c.rec_id AND c.is_active = true)
		JOIN
			standard s ON (c.standard = s.rec_id AND s.is_active = true)	
		LEFT JOIN
			hostel h ON (r.hostel = h.rec_id AND h.is_active = true)
		WHERE
			r.user_id = #{schoolNumber}
		AND	
			rt.resource_type_name = 'STUDENT'
		AND	
			r.is_active = true
	</select>
	
	<!-- fetch address for personal details tab -->
	
	<select id="getStudentAddressForPersonalDetailsTab" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Address">
		SELECT  DISTINCT
			a1.address_line as presentAddressLine, 
			a1.land_mark as presentAddressLandmark, 
			ct1.city_name as presentAddressCityVillage, 
			dis1.district_name as presentAddressDistrict, 
			a1.postal_code as presentAddressPinCode, 
			st1.state_name as presentAddressState, 
			cty1.country_name presentAddressCountry, 
			a1.police_station as presentAddressPoliceStation, 
			a1.post_office as presentAddressPostOffice,
			a1.railway_station as presentAddressRailwayStation, 
			a1.phone as presentAddressPhone,
		
			a2.address_line as permanentAddressLine, 
			a2.land_mark as permanentAddressLandmark, 
			ct2.city_name as permanentAddressCityVillage, 
			dis2.district_name as permanentAddressDistrict, 
			a2.postal_code as permanentAddressPinCode, 
			st2.state_name as permanentAddressState, 
			cty2.country_name as permanentAddressCountry, 
			a2.police_station as permanentAddressPoliceStation, 
			a2.post_office as permanentAddressPostOffice,
			a2.railway_station as permanentAddressRailwayStation,
			a2.phone as permanentAddressPhone,
		
			a3.address_line as guardianAddressLine, 
			a3.land_mark as guardianAddressLandmark, 
			ct3.city_name as guardianAddressCityVillage, 
			dis3.district_name as guardianAddressDistrict, 
			a3.postal_code as guardianAddressPinCode, 
			st3.state_name as guardianAddressState,
			cty3.country_name as guardianAddressCountry, 
			a3.police_station as guardianAddressPoliceStation, 
			a3.post_office as guardianAddressPostOffice,
			a3.railway_station as guardianAddressRailwayStation,
			a3.phone as guardianAddressPhone
		FROM address a1
			JOIN resource r1 ON (a1.resource = r1.rec_id AND a1.is_active = true AND r1.is_active = true)
		
			JOIN state st1 ON (a1.state = st1.rec_id AND st1.is_active = true)
			LEFT JOIN district dis1 ON (a1.district = dis1.rec_id AND dis1.is_active = true)
			LEFT JOIN city ct1 ON (a1.city = ct1.rec_id AND ct1.is_active = true)
			JOIN country cty1 ON (a1.country = cty1.rec_id AND cty1.is_active = true)
		
			JOIN address a2 ON (a2.resource = r1.rec_id)
			JOIN state st2 ON (a2.state = st2.rec_id AND st2.is_active = true)
			LEFT JOIN district dis2 ON (a2.district = dis2.rec_id AND dis2.is_active = true)
			LEFT JOIN city ct2 ON (a2.city = ct2.rec_id AND ct2.is_active = true)
			JOIN country cty2 ON (a2.country = cty2.rec_id AND cty2.is_active = true)
		
			LEFT JOIN address a3 ON (a3.resource = r1.rec_id)
			LEFT JOIN state st3 ON (a3.state = st3.rec_id AND st3.is_active = true)
			LEFT JOIN district dis3 ON (a3.district = dis3.rec_id AND dis3.is_active = true)
			LEFT JOIN city ct3 ON (a3.city = ct3.rec_id AND ct3.is_active = true)
			LEFT JOIN country cty3 ON (a3.country = cty3.rec_id AND cty3.is_active = true)
		WHERE
			r1.user_id = #{schoolNumber}
		AND
			a1.address_type = 'PRESENT'
		AND
			a2.address_type = 'PERMANENT'
		AND
			a3.address_type = 'LOCAL GUARDIAN';
	</select>

	<!-- naimisha.ghosh 07.08.2017 -->

	<insert id="insertIntoStudentMarksAfterStudentSubjectMappingForCBSENew" parameterType="com.qts.icam.model.common.Student" statementType="CALLABLE">
		select insert_into_student_marks_v1(
			#{rollNumber::text, mode=IN, jdbcType=VARCHAR},
			#{standard, mode=IN, jdbcType=VARCHAR},
			#{section, mode=IN, jdbcType=VARCHAR},
			#{updatedBy, mode=IN, jdbcType=VARCHAR});	
	</insert>
	
	<!-- naimisha 08.08.2017 -->
	
	<select id="checkIfMarksAlreadyEnteredForAStandard" resultType="java.lang.Integer" parameterType="com.qts.icam.model.common.Student">
 		SELECT 
 			count(*) 
 		FROM 
			student_marks_v1 
		WHERE
			 standard = #{standard}
		AND
			section = #{section}
		AND
			is_active = true;
 	</select>
 	
 	<!-- anup.roy//for insert session fees  -->
 	
 	<insert id="updateStudentFees" parameterType="com.qts.icam.model.common.SessionFees" statementType="CALLABLE">
		SELECT 
			insert_student_fees_payment_details
				(
					#{sessionFeesObjectId, mode=IN, jdbcType=VARCHAR},
					#{updatedBy,mode=IN, jdbcType=VARCHAR},
					#{academicSsession, mode=IN,jdbcType=VARCHAR},
					#{rollNumber, mode=IN,jdbcType=VARCHAR},
					#{netTotAmount, mode=IN, jdbcType=DOUBLE},
					#{comment, mode=IN, jdbcType=VARCHAR},
					#{payingAmount, mode=IN,jdbcType=DOUBLE},
					#{feesName, mode=IN, jdbcType=VARCHAR}
				)
	</insert>
	
	<!-- added by sourav.bhadra on 01-09-2017 to update fees ledger -->
	<insert id="createLedgerForFeesStructure" parameterType="com.qts.icam.model.common.Ledger">
		INSERT INTO ledger(
			rec_id,
			obj_id, 
			updated_by,
			updated_on,
			date_of_creation, 
			is_active,
			ledger_code,
			ledger_name,
			parent_group,
			ledger_holder
						
		)VALUES(
			(uuid_generate_v4()), 
		    #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active =true),
			(SELECT extract(epoch FROM now())),
			(SELECT extract(epoch FROM now())),
			true,
			#{ledgerName},
			#{ledgerName},
			(SELECT rec_id FROM group_for_ledger WHERE group_code =#{parentGroupCode} AND is_active =true),
			(SELECT rec_id FROM fees_structure WHERE fees_structure_name = #{ledgerName})
		);
			
		INSERT INTO ledger_balance(
						rec_id, 
						obj_id, 
						updated_by, 
						updated_on,
					    date_of_creation, 
						is_active,
					    ledger, 
					    month, 
					    year, 
					    opening_balance, 
					    current_balance, 
					    is_current
		)VALUES(
			(select uuid_generate_v4()), 
		    #{objectId},
			(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active =true),
			(SELECT extract(epoch FROM now())), 
			(SELECT extract(epoch FROM now())), 
			true,
			(SELECT rec_id FROM ledger WHERE ledger_code ilike #{ledgerName} AND is_active =true),
			(SELECT EXTRACT(MONTH FROM (SELECT now()))), 
			(SELECT EXTRACT(YEAR FROM (SELECT now()))),
			#{openingBal}, 
			#{openingBal}, 
			true
		);
	</insert>
	
	<!-- added by sourav.bhadra on 01-09-2017 to update fees ledger -->
	<update id="updateFeesLedger" parameterType="com.qts.icam.model.common.Ledger">
		UPDATE
			ledger
		SET
			updated_by = (SELECT rec_id FROM resource WHERE user_id ilike #{updatedBy} AND is_active = true),
			updated_on = extract(epoch FROM now()),
			ledger_code = #{ledgerName},
			ledger_name = #{ledgerName}
		WHERE
			ledger_holder = (SELECT rec_id FROM fees_structure WHERE fees_structure_name = #{ledgerName} AND is_active = true)
		AND
			is_active = true;
	</update>
	
	<!-- anup.roy // for fetching standard list unmapped with template -->
	
	<select id="getUnmappedStandardsToFeesTemplate" parameterType="java.lang.String" resultType="com.qts.icam.model.common.Standard">
		(
		SELECT 
			standard_code as standardCode, standard_name as standardName
		FROM 
			standard 
		WHERE 
			is_active = true
		)
		EXCEPT
		(
		SELECT 
			DISTINCT st.standard_code, st.standard_name 
		FROM
			standard st 
		JOIN 
			course c ON (c.standard = st.rec_id AND st.is_active = true)
		JOIN
			student_fees_template_amount sfta ON (sfta.course = c.rec_id AND c.is_active = true)
		JOIN
			student_fees_template_details sftd ON (sfta.student_fees_template_details = sftd.rec_id AND sftd.is_active = true)
		JOIN
			student_fees_template sft ON (sftd.student_fees_template = sft.rec_id AND sft.is_active = true)
		WHERE
			sft.student_fees_template_code = #{templateCode}
		AND
			st.is_active = true	
		)
	</select>
	
	<!-- added by sourav.bhadra on 18-09-2017 -->
	<insert id="createTransactionForAdmissionFeesReceive" parameterType="com.qts.icam.model.finance.Transaction">
		<selectKey keyProperty="voucherTypeName"  resultType="String" order="BEFORE">
			(select('VOW-' ||(select COALESCE((SELECT MAX(transaction_id) FROM transaction), 0 )+1)));
		</selectKey>
		INSERT INTO transaction(
				rec_id, 
				obj_id, 
				updated_by, 
				updated_on, 
				date_of_creation, 
				is_active, 
				date, 
				voucher_type,
				voucher_number, 
				narration
			)VALUES(
				(select uuid_generate_v4()), 
				 #{objectId},
				(SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active =true),
				(SELECT extract(epoch FROM now())),
				(SELECT extract(epoch FROM now())), 
				true,
				(SELECT extract(epoch FROM now())),
				(SELECT rec_id FROM voucher_type WHERE voucher_type_code =#{voucherTypeCode} AND is_active = true),
				#{voucherTypeName}, 
				#{narration}
			);
		<foreach collection="trDetList" item="trDt" open="" close="" separator=";">
			INSERT INTO transaction_details(
				 rec_id,
				 obj_id, 
				 updated_by, 
				 updated_on, 
				 date_of_creation, 
				 is_active, 
				 transaction, 
				 ledger, 
				 amount, 
				 is_debit
			)VALUES(
				 (select uuid_generate_v4()),
				 #{objectId},
				 (SELECT rec_id FROM resource WHERE user_id =#{updatedBy} AND is_active =true),
				 (SELECT extract(epoch FROM now())), 
				 (SELECT extract(epoch FROM now())), 
				  true,
				 (SELECT rec_id FROM transaction WHERE voucher_number =#{voucherTypeName} AND is_active =true),
				 (SELECT rec_id FROM ledger WHERE ledger_code =#{trDt.ledger} AND is_active =true),
				 #{trDt.amount}, 
				 #{trDt.isDebit}
			);			
		</foreach>
	</insert>
	
	<!-- added by sourav.bhadra on 19-09-2017 to select a ledger for a bank -->
	<select id="selectLedgerOfABank" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT 
			ledger_name 
		FROM 
			ledger
		WHERE 
			ledger_holder = (SELECT rec_id FROM bank WHERE bank_name = 'IDBI' AND  is_active=true)
		AND 
			is_active = true
	</select>
	
	<!-- anup.roy // for getting count of current academic year -->
	
	<select id="numberOfCurrentAcademicYear" resultType="java.lang.Integer">
		SELECT 
			count(*)
		FROM 
			academic_year ay
		JOIN
			status_flag sf ON(ay.year_status = sf.rec_id AND sf.is_active = true)
		WHERE
			ay.is_active = true
		AND
			sf.status_sym='C'
	</select>
	
	<!-- anup.roy // for submitting academic year -->
	
	<insert id="createNewAcademicYear" parameterType="com.qts.icam.model.common.AcademicYear">
		INSERT INTO 
			academic_year
			(
	            rec_id, 
	            obj_id, 
	            updated_by, 
	            updated_on, 
	            date_of_creation,
	            academic_year_code, 
	            academic_year_name, 
	            academic_year_desc, 
	            year_status, 
	            session_start_date, 
	            session_end_date
            )
    	VALUES 
    		(
				(SELECT	uuid_generate_v4()), 
				#{academicYearObjectId},
				(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = 'true'), 
				(SELECT extract(epoch FROM now())), 
				(SELECT extract(epoch FROM now())),
				#{academicYearName},
				#{academicYearName},
				#{academicYearName},
				(SELECT rec_id FROM status_flag WHERE status_desc = 'CURRENT'), 
				(SELECT	extract(epoch from (SELECT to_timestamp(#{sessionStartDate},'DD-MM-YYYY')))),
				(SELECT	extract(epoch from (SELECT to_timestamp(#{sessionEndDate},'DD-MM-YYYY'))))		 
			);
	</insert>
	<!-- anup.roy // this method is for updating financial year name -->
	<update id="updateAcademicYear" parameterType="com.qts.icam.model.common.AcademicYear">
		UPDATE
			academic_year
		 SET  	
			updated_by = (SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active ='true'),
			updated_on = (SELECT extract(epoch FROM now())), 
			academic_year_name = #{academicYearName}      
		 WHERE 
			is_active = 'true'
		 AND
			academic_year_code = #{academicYearCode};
	</update>

	<!-- Added by saif.Ali Date-21/03/2018-->
	<select id="selectModuleNameBasedOnUserId" parameterType="java.lang.String" resultType = "java.lang.String">
		SELECT
			distinct m.module_name
		FROM 
			module m
		JOIN
			role ro ON(ro.module= m.rec_id and ro.is_active = true)
		JOIN
			role_resource_mapping rsm ON (rsm.role= ro.rec_id and rsm.is_active = true)
		JOIN
			resource r ON (rsm.resource = r.rec_id and r.is_active= true)
		WHERE
			r.user_id= #{userId}
	</select>
	
	<!-- Added by saif.Ali Date-12/03/2018-->
	<select id="selectAllActivityLogListModuleWise" parameterType="java.lang.String" resultType = "com.qts.icam.model.common.UpdateLog">
		SELECT 
			al.description as description,
			al.updated_by_name as updatedByName,
			to_char((SELECT to_timestamp(al.updated_on)),'DD/MM/YYYY')as updatedOn,
			al.updated_for as updatedFor,
			al.action as insertUpdate,
			al.functionality as functionality
		FROM
			activity_log al
		JOIN 
			module m on (m.rec_id = al.module_name and m.is_active = true)
		WHERE
			m.module_name= #{moduleName}
		ORDER By
			al.updated_on DESC;
	</select>
	
	<!-- added by naimisha on 08-01-2018 -->
	<!-- //missing link integration 17042018 -->
	<insert id="insertIntoCategoryWithSLA" parameterType="com.qts.icam.model.ticket.Ticket">
		INSERT INTO category_sla_mapping(
            rec_id, obj_id, updated_by, updated_on, 
            date_of_creation, category, acknowledgement_time, 
            completion_time)
    	VALUES ((uuid_generate_v4()), #{ticketObjectId}, 
    			(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
		        (SELECT extract(epoch FROM now())),
			    (SELECT extract(epoch FROM now())),
			    (SELECT rec_id FROM category WHERE category_code = #{ticketCode} AND is_active = true),
			    #{ticketMinDays}::integer,
			    #{ticketMaxDays}::integer
            );
	</insert>
	<!-- //missing link integration 17042018 -->
	<select id="getAllCategorySLAList" resultType="com.qts.icam.model.ticket.Ticket">
		SELECT
			category_name as ticketCode,
			acknowledgement_time as ticketMinDays,
			completion_time as ticketMaxDays
		FROM
			
			category_SLA_mapping csm
		JOIN
			category c ON (csm.category = c.rec_id AND c.is_active = true)
		AND
			csm.is_active = true;
	</select>
	
	<!-- anup.roy // for fetching all list of templates -->
	<!-- //missing link integration 17042018 -->
	<select id="getListOfTemplateForCategoryTemplateUserSLA" resultType="com.qts.icam.model.administrator.EmailEventAndTemplate">
		SELECT
			email_event_template_id as serialId,
			template_code as templateCode,
			template_subject as emailSubject,
			template_type as templateFor
		FROM
			event_template
		WHERE
			template_type = 'Email'
		AND	
			is_active = true
	</select>
	
	<!-- anup.roy // for fetching all list of resources -->
	<!-- //missing link integration 17042018 -->
	<select id="getListOfResourceForCategoryTemplateUserSLA" resultType="com.qts.icam.model.common.Resource">
		SELECT
			user_id as userId
		FROM
			resource r
		JOIN
			employee_details ed ON (ed.resource = r.rec_id AND ed.is_active = true)
		JOIN
			resource_type rt ON (r.resource_type = rt.rec_id AND rt.is_active = true)
		WHERE 
			rt.resource_type_code = 'ADMIN_STAFF'
		AND
			r.is_active = true	
	</select>
	
	<!-- anup.roy // for submitting mapping of category-template-user -->
	<!-- Modified by naimisha29012017 -->
	<!-- //missing link integration 17042018 -->
	<insert id="submitMapCategoryTemplateUser" parameterType="com.qts.icam.model.common.CategoryAndTemplate">
		INSERT INTO 
			category_template_user_mapping_sla
				(
					rec_id, obj_id, updated_by, date_of_creation, updated_on,
					category_template_user_mapping_sla_code, category, event_template,ticket_status
				)
		VALUES
				(
					(uuid_generate_v4()), #{categoryAndTemplateObjectId},
	    			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
					(SELECT extract(epoch FROM now())), (SELECT extract(epoch FROM now())),
					(SELECT 'CAT_TEMP_USER_SLA_' ||COALESCE((SELECT MAX(category_template_user_mapping_sla_id) FROM category_template_user_mapping_sla), 0 )+1),
					(SELECT rec_id FROM category WHERE category_code = #{category} AND is_active = true),
					(SELECT rec_id FROM event_template WHERE template_code = #{template} AND is_active = true),
					(SELECT rec_id FROM ticket_status WHERE ticket_status_code = #{status} AND is_active = true)
				)
	</insert>
		
	<!-- anup.roy // for fetching all mapped category-template-user list -->			
	<!-- //missing link integration 17042018 -->
	<select id="getMappedCategoryTemplateAndUserList" resultType="com.qts.icam.model.common.CategoryAndTemplate">
		SELECT
			category_name as category,
			template_subject as template
			<!-- user_id as userId -->
		FROM
			category_template_user_mapping_sla ctums
		JOIN
			category c ON (ctums.category = c.rec_id AND c.is_active = true)
		JOIN
			event_template et ON (ctums.event_template = et.rec_id AND et.is_active = true)
		<!-- JOIN
			resource r ON (ctums.resource = r.rec_id AND r.is_active = true) -->
		WHERE
			ctums.is_active = true
	</select>
	
	
	<!-- Added by naimisha 30012017 -->
	<!-- //missing link integration 17042018 -->
	<insert id="submitMapTaskWithTemplate" parameterType="com.qts.icam.model.common.CategoryAndTemplate">
		INSERT INTO 
			task_template_mapping
				(
					rec_id, obj_id, updated_by, date_of_creation, updated_on,
					task_template_mapping_code, task, event_template,task_status
				)
		VALUES
				(
					(uuid_generate_v4()), #{categoryAndTemplateObjectId},
	    			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
					(SELECT extract(epoch FROM now())), (SELECT extract(epoch FROM now())),
					(SELECT 'TASK_TEMPLATE_' ||COALESCE((SELECT MAX(task_template_mapping_id) FROM task_template_mapping), 0 )+1),
					(SELECT rec_id FROM task WHERE task_code = #{category} AND is_active = true),
					(SELECT rec_id FROM event_template WHERE template_code = #{template} AND is_active = true),
					(SELECT rec_id FROM task_status WHERE task_status_code = #{status} AND is_active = true)
				)
		
		
	</insert>
	<!-- //missing link integration 17042018 -->
	<select id="getMappedTaskTemplateList" resultType="com.qts.icam.model.common.CategoryAndTemplate">
		SELECT
			task_name as category,
			template_subject as template
		FROM
			task_template_mapping ttm
		JOIN
			task t ON (ttm.task = t.rec_id AND t.is_active = true)
		JOIN
			event_template et ON (ttm.event_template = et.rec_id AND et.is_active = true)
		WHERE
			ttm.is_active = true;
	</select>
	
	
	<select id="getTemplateForATemplateType" resultType="com.qts.icam.model.administrator.EmailEventAndTemplate" parameterType="java.lang.String">
		SELECT
			email_event_template_id as serialId,
			template_code as templateCode,
			template_subject as emailSubject,
			template_type as templateFor
		FROM
			event_template
		WHERE
			template_type = #{templateType}
		AND	
			is_active = true;
	</select>
	
	<select id="getPossibleTaskStatusListForATaskType" resultType="com.qts.icam.model.ticket.TicketStatus" parameterType="java.lang.String">
		SELECT 
			task_status_code as ticketStatusCode,
			task_status as ticketStatusName
		FROM
			task_status
		WHERE
			task_type = #{taskType}
		AND
			is_active = true;
	</select>
	
	<select id="getAllResidentTypeList" resultType="com.qts.icam.model.backoffice.ResidentType">
		SELECT
			resident_type_code as residentTypeCode,
			resident_type_name as residentTypeName
		FROM
			resident_type
		WHERE
			is_active = true;		
	</select>

	<select id="selectDateOfAdmissionAndDateOfBirthOfLastInsertedCadet" resultType="com.qts.icam.model.common.Student">
		SELECT 
			date_of_admission as dateOfAdmission,
			date_of_birth as studentCode
		FROM 
			resource
		WHERE
			resource_id = (SELECT MAX(resource_id) FROM resource WHERE is_active = true)
		AND
			is_active = true

	</select>

	<!-- Added by saif 28/02/2018 -->
	<insert id="submitDisciplinaryActionForStudent" parameterType="com.qts.icam.model.common.Student">
		INSERT INTO 
			disciplinary_action
					(
	            		rec_id, obj_id, updated_by, updated_on, date_of_creation, 
	            		standard, section,comment,roll_number,disciplinary_code
            		)
	    VALUES 		(
	    				(select uuid_generate_v4()), #{objectId},
				    	(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
						(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
						#{standard}, #{section},  #{chequeNo}, #{roll},
						(SELECT rec_id FROM disciplinary_code WHERE disciplinary_code = #{disciplinaryCode} AND is_active = true)
					);
	</insert>

	<!-- added by sourav.bhadra on 28-02-2018 to insert students daily attendance -->
	<insert id="insertStudentsDailyAttendance" parameterType="com.qts.icam.model.common.StudentAttendance">
		INSERT INTO students_daily_attendance(
			rec_id, 
			obj_id, 
			updated_by, 
			updated_on, 
			date_of_creation, 
            attendance_month, 
            attendance_year, 
            student, 
            attendance_date)
    	VALUES (
			(SELECT uuid_generate_v4()),
			#{attendanceObjectId},
			(SELECT rec_id FROM resource WHERE user_id = #{updatedBy} AND is_active = true),
			(SELECT extract (epoch FROM now())),
			(SELECT extract (epoch FROM now())),
			#{month}::integer,
			#{year}::integer,
			(SELECT 
				DISTINCT r.rec_id 
			FROM 
				resource r
			JOIN 
				student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true) 
			WHERE 
				scm.roll_number = #{studentRollNo}
			AND 
				r.is_active = true),
			(SELECT extract (epoch FROM (SELECT to_timestamp(#{absentDay},'DD/MM/YYYY'))))
    );
		
	</insert>
	
	<!-- @author sourav.bhadra on 05-03-2018 this method is for students leave details for daily attendance submit -->
	<select id="selectDetailsOfOnLeaveStudents" parameterType="java.lang.String" resultType="com.qts.icam.model.common.StudentAttendance">
		SELECT 
			DISTINCT scm.roll_number as studentId, 
			leave_comment as attendanceDesc
		FROM 
			attendance_details ad
		JOIN 
			resource r on (r.rec_id = ad.resource and r.is_active = true)
		JOIN
			student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true)
		WHERE
			ad.date_of_absent = (SELECT extract (epoch FROM (SELECT to_timestamp(#{currentDate},'DD/MM/YYYY'))))
		AND 
			ad.is_active = true;
	</select>	
	
	<!-- Added by Saif  Date- 07/03/2018 -->
	<select id="selectListOfDisciplinaryActionForStudents" resultType="com.qts.icam.model.common.Student">
	SELECT
		da.standard as standard,
		da.section as section,
		da.comment as house,
		da.roll_number as roll,
		(r.first_name || ' ' || COALESCE(r.middle_name,' ') || ' ' || COALESCE(r.last_name,' ')) as studentName,
		dc.disciplinary_code as disciplinaryCode
	FROM
		disciplinary_action da
	JOIN
		resource r ON(r.user_id= da.roll_number and r.is_active= true)
	JOIN
		disciplinary_code dc ON(da.disciplinary_code = dc.rec_id AND dc.is_active = true)
	WHERE
		da.is_active= true;
		
	</select>
	
	<!-- Added by Saif  Date- 07/03/2018 -->
	<!-- <resultMap id="resultMapOfselectDetailsOfStudentsAgainstCurrentDate" type="com.qts.icam.model.common.Resource">
		<result property="userId" column="user_id" jdbcType="VARCHAR" />
	</resultMap> -->
	<select id="selectDetailsOfStudentsAgainstCurrentDate" parameterType="com.qts.icam.model.common.Resource"
		resultType = "com.qts.icam.model.common.StudentAttendance">
		SELECT 
			scm.roll_number as studentId
		FROM
			students_daily_attendance sda
		JOIN 
			resource r on (r.rec_id = sda.student and r.is_active = true)
		JOIN
			student_course_mapping scm ON(scm.user_id=r.user_id AND scm.is_active=true)
		JOIN 
			section sec ON(scm.section=sec.rec_id AND sec.is_active=true)
		JOIN 
			standard s ON (sec.standard = s.rec_id AND s.is_active = true)
		WHERE
			sec.section_name = #{section.sectionName}
		AND
			s.standard_name = #{klass}
		AND
			sda.attendance_date= (SELECT extract (epoch FROM (SELECT to_timestamp(#{academicYear},'DD/MM/YYYY'))))
		AND
			r.is_active = true;
	</select>
	<insert id="insertDisciplinaryCode" parameterType="com.qts.icam.model.backoffice.DisciplinaryAction">
		INSERT INTO disciplinary_code(
	            rec_id, obj_id, updated_by, updated_on, date_of_creation, 
	            disciplinary_code, description)
	    VALUES ((select uuid_generate_v4()), #{objectId},
	    	(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{disciplinaryCode}, #{description});
	</insert>
	
	<select id="selectAllDisciplinaryCodeList" resultType="com.qts.icam.model.backoffice.DisciplinaryAction">
		SELECT
			disciplinary_code as disciplinaryCode,
			description as description
		FROM 
			disciplinary_code
		WHERE
			is_active = true;
		
	</select>
	
	<select id="selectDescriptionAgainstDisciplinaryCode" resultType="com.qts.icam.model.backoffice.DisciplinaryAction" parameterType="java.lang.String">
		SELECT
			disciplinary_code as disciplinaryCode,
			description as description
		FROM 
			disciplinary_code
		WHERE
			disciplinary_code = #{disciplinaryCode}
		AND
			is_active = true;
		
	</select>
	
	<insert id="addWebIQTransaction" parameterType="com.qts.icam.model.backoffice.WebIQTransaction">
		 INSERT INTO webiq_transaction_details(
	            rec_id, obj_id, updated_by, updated_on, date_of_creation, 
	            uri, request_json, response_json, status)
	    VALUES ((select uuid_generate_v4()), #{objectId},
	    	(SELECT rec_id FROM resource WHERE user_id  ilike #{updatedBy} AND is_active = true),
			(SELECT extract(epoch FROM now())),(SELECT extract(epoch FROM now())),
			#{uri}, #{requestJSON}, #{responseJSON}, #{status}); 
	</insert>
	
	<select id="getStandardNameforCourse" parameterType="java.lang.String" resultType="java.lang.String">
 		select 
 			s.standard_name 
 		FROM 
 			standard s LEFT JOIN course c on s.rec_id = c.standard 
 		WHERE 
 			s.rec_id = (SELECT standard FROM course WHERE course_code=#{courseId} AND is_active=true)
 		AND 
 			s. is_active = true;
	</select>

	<select id="getHouseName" parameterType="java.lang.String" resultType="java.lang.String">
 		SELECT 
 			house_name 
 		FROM 
 			house 
 		WHERE 
 			house_code=#{houseCode} and is_active = true;
	</select>

	<select id="getMobileNumberAgainstRollNumber" parameterType="java.lang.String" resultType="java.lang.String">
 		SELECT 
 			mobile_no 
 		FROM 
 			resource 
 		WHERE user_id=#{userId} and is_active = true;
	</select>

</mapper>